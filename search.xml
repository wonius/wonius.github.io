<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>01Pico Pro Maker Kit 刷入Android-Things</title>
    <url>/2018/01/06/01Pico-Pro-Maker-Kit-%E5%88%B7%E5%85%A5Android-Things/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    2017年底，参加了GDD上海活动，初次接触了Android Things，并且拿到了一块开发板，Pico Pro Maker Kit，拿回来后有事一直闲置。最近有时间掏出来研究下。</p>
<img data-src="/2018/01/06/01Pico-Pro-Maker-Kit-%E5%88%B7%E5%85%A5Android-Things/1.JPG" class="" title="未开苞">

<h2 id="组装"><a href="#组装" class="headerlink" title="组装"></a>组装</h2><p>​    组装很简单，按照官网教程做，很快就组装好了。</p>
<p>​    <a href="https://developer.android.google.cn/things/hardware/imx7d-kit.html#install-at">https://developer.android.google.cn/things/hardware/imx7d-kit.html#install-at</a></p>
<p>​    不过我拿到的是阉割版，没有Rainbow HAT，差评…</p>
<img data-src="/2018/01/06/01Pico-Pro-Maker-Kit-%E5%88%B7%E5%85%A5Android-Things/2.JPG" class="" title="组装完成">

<h2 id="下载Android-Things"><a href="#下载Android-Things" class="headerlink" title="下载Android-Things"></a>下载Android-Things</h2><p>​    到官网下载Android things setup utility。可是官网上的链接一直无法下载，后来联系了google里的开发人员，发到我的邮箱才拿到。已经上传到百度网盘，可以直接下载。（之前在网上有搜到某同学上传到csdn，下载还需要积分，没积分的宝宝心里苦/(ㄒoㄒ)/~~）</p>
<p>链接: <a href="https://pan.baidu.com/s/1dgmIvk">https://pan.baidu.com/s/1dgmIvk</a> 密码: rsps</p>
<h2 id="配置fastboot"><a href="#配置fastboot" class="headerlink" title="配置fastboot"></a>配置fastboot</h2><p>​    在写入镜像之前，需要确保已安装SDK（我装了Android Studio，内置SDK。你也可以单独装）。将fastboot所在目录加入到环境变量中，不然无法成功执行fastboot命令。</p>
<img data-src="/2018/01/06/01Pico-Pro-Maker-Kit-%E5%88%B7%E5%85%A5Android-Things/6.png" class="" title="找不到fastboot命令">

<p>查找fastboot文件目录，并确保fastboot有执行权限，并且属主正确：</p>
<img data-src="/2018/01/06/01Pico-Pro-Maker-Kit-%E5%88%B7%E5%85%A5Android-Things/4.png" class="" title="fastboot">

<p>加入环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我安装了ohmyzsh插件，所以需要编辑.zshrc。同学们根据实际配置修改</span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件末尾中加入</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/Users/woniu/Library/Android/sdk/platform-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># 别忘了编译</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测是否可用</span></span><br><span class="line">fastboot -h</span><br></pre></td></tr></table></figure>



<h2 id="写入Android-Things"><a href="#写入Android-Things" class="headerlink" title="写入Android-Things"></a>写入Android-Things</h2><p>​    下载Android things setup utility成功之后，解压，运行android-things-setup-utility-macos，按照提示选择，在线下载镜像并且刷入（需要科学上网。没有条件的同学也可以到我的百度云下载iot_imx7d_pico镜像，手动安装。链接: <a href="https://pan.baidu.com/s/1hticxNI">https://pan.baidu.com/s/1hticxNI</a> 密码: 4rvc）。</p>
<img data-src="/2018/01/06/01Pico-Pro-Maker-Kit-%E5%88%B7%E5%85%A5Android-Things/3.png" class="" title="找不到fastboot命令">

<p>从上图可以看到，最后报错了，原因是找不到fastboot命令。当我配置好fastboot后重新在线安装，一直无法下载。只好下载镜像手动安装。</p>
<p>下载iot_imx7d_pico后，解压，到该目录下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./flash-all.sh		//Win系统下执行flash-all.bat</span><br></pre></td></tr></table></figure>

<p>之后静待安装，完成后会自动重启，就可以了：</p>
<img data-src="/2018/01/06/01Pico-Pro-Maker-Kit-%E5%88%B7%E5%85%A5Android-Things/5.jpeg" class="" title="成功">
]]></content>
      <categories>
        <category>IoT</category>
      </categories>
      <tags>
        <tag>Android-Things</tag>
      </tags>
  </entry>
  <entry>
    <title>02创建Android Things工程</title>
    <url>/2018/01/16/02%E5%88%9B%E5%BB%BAAndroid-Things%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<p><a href="https://partner.android.com/things/console/#/">https://partner.android.com/things/console/#/</a></p>
<p><a href="https://developer.android.com/things/training/first-device/create-studio-project.html">https://developer.android.com/things/training/first-device/create-studio-project.html</a></p>
<p><a href="https://developer.android.com/studio/projects/create-project.html">https://developer.android.com/studio/projects/create-project.html</a></p>
]]></content>
      <categories>
        <category>IoT</category>
      </categories>
      <tags>
        <tag>Android-Things</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS免费EC2创建记录</title>
    <url>/2018/03/17/AWS%E5%85%8D%E8%B4%B9EC2%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="注册AWS账号"><a href="#注册AWS账号" class="headerlink" title="注册AWS账号"></a>注册AWS账号</h2><p>如果没有AWS账号，请先注册。注意AWS账号与Amazon商城是两套账号系统，不能共用。<a href="https://aws.amazon.com/cn/">AWS主页</a></p>
<h2 id="选择机房"><a href="#选择机房" class="headerlink" title="选择机房"></a>选择机房</h2><p>选择加州机房，速度快：</p>
<img data-src="/2018/03/17/AWS%E5%85%8D%E8%B4%B9EC2%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95/1%E4%B8%BB%E6%9C%BA.jpg" class="">

<h2 id="选择系统镜像"><a href="#选择系统镜像" class="headerlink" title="选择系统镜像"></a>选择系统镜像</h2><p>注意选择免费套餐：</p>
<img data-src="/2018/03/17/AWS%E5%85%8D%E8%B4%B9EC2%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95/2%E9%95%9C%E5%83%8F.jpg" class="">

<h2 id="选择实例"><a href="#选择实例" class="headerlink" title="选择实例"></a>选择实例</h2><p>同样，选择免费套餐：</p>
<img data-src="/2018/03/17/AWS%E5%85%8D%E8%B4%B9EC2%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95/3%E5%AE%9E%E4%BE%8B.jpg" class="">

<h2 id="实例配置"><a href="#实例配置" class="headerlink" title="实例配置"></a>实例配置</h2><p>默认配置就可以：</p>
<img data-src="/2018/03/17/AWS%E5%85%8D%E8%B4%B9EC2%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95/4%E9%85%8D%E7%BD%AE.jpg" class="">

<h2 id="设置存储"><a href="#设置存储" class="headerlink" title="设置存储"></a>设置存储</h2><p>默认5G，可以调整到30G：</p>
<img data-src="/2018/03/17/AWS%E5%85%8D%E8%B4%B9EC2%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95/5%E5%AD%98%E5%82%A8.jpg" class="">

<h2 id="设置标签"><a href="#设置标签" class="headerlink" title="设置标签"></a>设置标签</h2><p>即实例标签，用来区分不同实例。这里我添加了Name标签，并为该实例命名：</p>
<img data-src="/2018/03/17/AWS%E5%85%8D%E8%B4%B9EC2%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95/6%E6%A0%87%E7%AD%BE.jpg" class="">

<h2 id="设置安全组"><a href="#设置安全组" class="headerlink" title="设置安全组"></a>设置安全组</h2><p>设置开放的接口，将常用的ssh、http、https协议开放：</p>
<img data-src="/2018/03/17/AWS%E5%85%8D%E8%B4%B9EC2%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95/7%E5%AE%89%E5%85%A8%E7%BB%84.jpg" class="">

<h2 id="设置秘钥对"><a href="#设置秘钥对" class="headerlink" title="设置秘钥对"></a>设置秘钥对</h2><p>设置秘钥对，并下载。使用ssh访问服务器时用于校验：</p>
<img data-src="/2018/03/17/AWS%E5%85%8D%E8%B4%B9EC2%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95/8AwsKeyPair.jpg" class="">

<h2 id="SSH访问"><a href="#SSH访问" class="headerlink" title="SSH访问"></a>SSH访问</h2><p>创建完成后，查看创建好的实例，系统会介绍如何通过ssh访问服务器。将上一步下载好的pem文件保存到本地，设置权限，并在该目录下使用命令进行链接：</p>
<img data-src="/2018/03/17/AWS%E5%85%8D%E8%B4%B9EC2%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95/9ssh.jpg" class="">

<p>每次都要到pem所在目录访问，比较麻烦。可以将pem加入到ssh中，就可以在任何目录下访问了(别忘了先将pem文件权限修改为400)：</p>
<img data-src="/2018/03/17/AWS%E5%85%8D%E8%B4%B9EC2%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95/10ssh-add.jpg" class="">

<p>连接服务器：</p>
<img data-src="/2018/03/17/AWS%E5%85%8D%E8%B4%B9EC2%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95/11ssh2.jpg" class="">
]]></content>
      <categories>
        <category>云服务器</category>
      </categories>
      <tags>
        <tag>AWS</tag>
      </tags>
  </entry>
  <entry>
    <title>BlockChain入门</title>
    <url>/2018/05/21/BlockChain%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h2><p>首先要理解智能合约，下面这篇比较通俗易懂</p>
<p><a href="http://www.figurefinance.com/news/shownews.php?lang=cn&amp;id=4827">http://www.figurefinance.com/news/shownews.php?lang=cn&amp;id=4827</a></p>
<p>这篇比较官方：</p>
<p><a href="http://www.8btc.com/what-are-smart-contracts-in-search-of-a-consensus">http://www.8btc.com/what-are-smart-contracts-in-search-of-a-consensus</a></p>
<h2 id="以太坊入门"><a href="#以太坊入门" class="headerlink" title="以太坊入门"></a>以太坊入门</h2><p><a href="http://me.tryblockchain.org/getting-up-to-speed-on-ethereum.html">http://me.tryblockchain.org/getting-up-to-speed-on-ethereum.html</a></p>
]]></content>
      <categories>
        <category>BlockChain</category>
      </categories>
      <tags>
        <tag>BlockChain</tag>
        <tag>Ethereum</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装NodeJS</title>
    <url>/2018/02/06/CentOS%E5%AE%89%E8%A3%85NodeJS/</url>
    <content><![CDATA[<p>​    最近需要在服务器上安装nodejs，网上搜了一下，文章都是转来转去，都出到9.x版本了还在讲如何装6.x，很无语。所以自己整理一下。</p>
<h3 id="选择合适的版本"><a href="#选择合适的版本" class="headerlink" title="选择合适的版本"></a>选择合适的版本</h3><p>​    yum安装自带nodjs版本太低，到<a href="https://github.com/nodesource/distributions">node源码版本</a>上选择合适的版本，我安装了最新版本，9.x</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://rpm.nodesource.com/setup_9.x | bash -</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y nodejs</span><br></pre></td></tr></table></figure>

<h3 id="检查node、npm版本"><a href="#检查node、npm版本" class="headerlink" title="检查node、npm版本"></a>检查node、npm版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h3 id="one-more-thing"><a href="#one-more-thing" class="headerlink" title="one more thing"></a>one more thing</h3><p>​    除了在线安装，还有下载安装包、加压、编译安装的方法，操作繁琐，不推荐。</p>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装zsh和oh-my-zsh</title>
    <url>/2017/12/18/CentOs%E5%AE%89%E8%A3%85zsh%E5%92%8Coh-my-zsh/</url>
    <content><![CDATA[<h3 id="查看系统当前的shell"><a href="#查看系统当前的shell" class="headerlink" title="查看系统当前的shell"></a>查看系统当前的shell</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>
<p>返回结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash</span><br></pre></td></tr></table></figure>

<p><em>PS.默认的shell一般都是bash</em></p>
<h3 id="查看bin下是否有zsh包"><a href="#查看bin下是否有zsh包" class="headerlink" title="查看bin下是否有zsh包"></a>查看bin下是否有zsh包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/bin/dash</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/csh</span><br></pre></td></tr></table></figure>

<p><em>PS：默认没有安装zsh</em></p>
<h3 id="安装zsh包"><a href="#安装zsh包" class="headerlink" title="安装zsh包"></a>安装zsh包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install zsh</span><br></pre></td></tr></table></figure>

<p>安装完成后查看shell列表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/bin/dash</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure>

<h3 id="切换shell至zsh"><a href="#切换shell至zsh" class="headerlink" title="切换shell至zsh"></a>切换shell至zsh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>

<p>chsh用法请自行查找，返回结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Shell changed.</span><br></pre></td></tr></table></figure>

<p>此时查看shell，已经更换为zsh：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>

<p>返回结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash</span><br></pre></td></tr></table></figure>

<p>需要重启才能生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>

<p>重启后查看shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure>

<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install git</span><br></pre></td></tr></table></figure>

<h3 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure>

<p>出现如下界面显示安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">         __                                     __   </span><br><span class="line">  ____  / /_     ____ ___  __  __   ____  _____/ /_  </span><br><span class="line"> / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \ </span><br><span class="line">/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / / </span><br><span class="line">\____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/  </span><br><span class="line">                        /____/                       ....is now installed!</span><br><span class="line">Please look over the ~/.zshrc file to select plugins, themes, and options.</span><br><span class="line"></span><br><span class="line">p.s. Follow us at https://twitter.com/ohmyzsh.</span><br><span class="line"></span><br><span class="line">p.p.s. Get stickers and t-shirts at http://shop.planetargon.com.</span><br></pre></td></tr></table></figure>

<p><em>添加插件、换themes修改文件</em></p>
<p>如果执行命令时提示==warning: cannot set LC_CTYPE locale==，修改profile文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>在文件末尾处添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LC_CTYPE=en_US.UTF-8</span><br></pre></td></tr></table></figure>

<p>修改后更新：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//查看系统自带的主题</span><br><span class="line">ls ~/.oh-my-zsh/themes</span><br><span class="line"></span><br><span class="line">//找到ZSH_THEME，将后面的值改为自己喜欢的主题</span><br><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line">//设置其他主题，先将主题安装到<span class="variable">$ZSH_CUSTOM</span>/themes目录，再设置</span><br></pre></td></tr></table></figure>

<p>推荐几个主题：</p>
<ul>
<li>ys</li>
<li>aussiegeek</li>
<li>bira</li>
<li>agnoster</li>
</ul>
<p>更多主题：</p>
<p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes">https://github.com/robbyrussell/oh-my-zsh/wiki/themes</a></p>
<h3 id="插件设置"><a href="#插件设置" class="headerlink" title="插件设置"></a>插件设置</h3><p>这里列举几个常用的插件，设置方法一样。插件很多，按需索取。否则会影响shell加载速度</p>
<h4 id="git"><a href="#git" class="headerlink" title="git"></a>git</h4><p>默认自带git插件，可以用下面命令查看有哪些快捷指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> | grep git</span><br></pre></td></tr></table></figure>

<h4 id="zsh-autosuggestions（命令补全）"><a href="#zsh-autosuggestions（命令补全）" class="headerlink" title="zsh-autosuggestions（命令补全）"></a>zsh-autosuggestions（命令补全）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//安装插件</span><br><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line">//添加配置</span><br><span class="line">vim ~/.zshrc</span><br><span class="line">//找到plugins，将zsh-autosuggestions添加到括号里</span><br></pre></td></tr></table></figure>

<h4 id="zsh-syntax-highlighting（命令高亮）"><a href="#zsh-syntax-highlighting（命令高亮）" class="headerlink" title="zsh-syntax-highlighting（命令高亮）"></a>zsh-syntax-highlighting（命令高亮）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//安装插件</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line">//添加配置</span><br><span class="line">vim ~/.zshrc</span><br><span class="line">//找到plugins，将zsh-syntax-highlighting添加到括号里</span><br></pre></td></tr></table></figure>

<h4 id="autojump（目录快速跳转）"><a href="#autojump（目录快速跳转）" class="headerlink" title="autojump（目录快速跳转）"></a>autojump（目录快速跳转）</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//安装autojump</span><br><span class="line">brew install autojump</span><br><span class="line"></span><br><span class="line">//配置.zshrc。下面这段，在安装完成后会有提示，直接拷贝</span><br><span class="line">[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh</span><br></pre></td></tr></table></figure>

<p>其他系统安装方法可以到官方上去看。另外注意，只有进过的目录，才会直接进入</p>
<p><a href="https://github.com/wting/autojump">https://github.com/wting/autojump</a></p>
<h4 id="更多插件"><a href="#更多插件" class="headerlink" title="更多插件"></a>更多插件</h4><p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins</a></p>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>zsh</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS彻底删除并重装、升级Mysql</title>
    <url>/2017/12/18/CentOs%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4%E5%B9%B6%E9%87%8D%E8%A3%85Mysql/</url>
    <content><![CDATA[<h3 id="删除Mysql"><a href="#删除Mysql" class="headerlink" title="删除Mysql"></a>删除Mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//备份数据</span><br><span class="line">mysqldump -u xxx -h xxx -P 3306 -p --all-databases &gt; databases.sql</span><br><span class="line">mysqldump -u xxx -h xxx -P 3306 -p *** &gt; ***.sql</span><br><span class="line"></span><br><span class="line">//停止服务</span><br><span class="line">service mysqld stop</span><br><span class="line"></span><br><span class="line">//卸载相关软件</span><br><span class="line">yum remove mysql mysql-*</span><br><span class="line"></span><br><span class="line">//找到遗留文件，并删除</span><br><span class="line">find / -name mysql</span><br><span class="line">sudo rm -rf **</span><br><span class="line"></span><br><span class="line">//找到依赖包，并卸载</span><br><span class="line">rpm -qa| grep mysql</span><br><span class="line">yum remove ***</span><br></pre></td></tr></table></figure>



<h3 id="重装Mysql"><a href="#重装Mysql" class="headerlink" title="重装Mysql"></a>重装Mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//重新安装</span><br><span class="line">yum install mysql mysql-server mysql-libs</span><br></pre></td></tr></table></figure>



<h3 id="升级高版本Mysql"><a href="#升级高版本Mysql" class="headerlink" title="升级高版本Mysql"></a>升级高版本Mysql</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//查看系统信息，el版本、i686还是x86——64等</span><br><span class="line">uname -r</span><br><span class="line"></span><br><span class="line">//到镜像中找适合自己的镜像，拿到链接</span><br><span class="line">http://mirrors.sohu.com/mysql/</span><br><span class="line"></span><br><span class="line">//下载镜像(适合我系统的镜像)</span><br><span class="line">weget http://mirrors.sohu.com/mysql/MySQL-5.7/mysql-5.7.18-1.el6.x86_64.rpm-bundle.tar</span><br><span class="line"></span><br><span class="line">//下载后解压</span><br><span class="line">tar xvf mysql-5.7.18-1.el6.x86_64.rpm-bundle.tar</span><br><span class="line"></span><br><span class="line">//依次安装服务</span><br><span class="line">yum localinstall mysql-***-common-***.rpm mysql-***-libs-***.rpm mysql-***-client-***.rmp mysql-***-server-***.rpm</span><br><span class="line"></span><br><span class="line">//查看mysql版本</span><br><span class="line">mysql -V</span><br><span class="line"></span><br><span class="line">//启动mysql</span><br><span class="line">service mysqld start</span><br><span class="line"></span><br><span class="line">//查看root用户初始密码</span><br><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /var/<span class="built_in">log</span>/mysqld.log  (或/root/.mysql_secret)</span><br><span class="line"></span><br><span class="line">//使用密码登录之后，用下面命令修改密码</span><br><span class="line">ALTER USER ‘root<span class="string">&#x27;@&#x27;</span>localhost<span class="string">&#x27; IDENTIFIED BY &#x27;</span>你的密码<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//将Mysql加到服务自启动</span></span><br><span class="line"><span class="string">chkconfig mysqld on</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用方法</title>
    <url>/2018/03/18/Docker/</url>
    <content><![CDATA[<h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//源中有，直接yum安装</span><br><span class="line">yum install docker-io -y</span><br><span class="line"></span><br><span class="line">//查看docker版本</span><br><span class="line">docker -v</span><br><span class="line"></span><br><span class="line">//启动</span><br><span class="line">service docker start</span><br><span class="line"></span><br><span class="line">//设置开机自启</span><br><span class="line">chkconfig docker on</span><br></pre></td></tr></table></figure>

<h1 id="配置Docker"><a href="#配置Docker" class="headerlink" title="配置Docker"></a>配置Docker</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//设置腾讯云镜像源</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;OPTIONS=&#x27;--registry-mirror=https://mirror.ccs.tencentyun.com&#x27;&quot;</span> &gt;&gt; /etc/sysconfig/docker</span><br><span class="line"></span><br><span class="line">//重新加载服务，重启</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure>

<h1 id="安装镜像"><a href="#安装镜像" class="headerlink" title="安装镜像"></a>安装镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//拉取一个centos镜像</span><br><span class="line">docker pull centos</span><br><span class="line"></span><br><span class="line">//查看docker中有的镜像</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<h1 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//运行docker容器中的centos，并使用bash shell</span><br><span class="line">docker run -it centos /bin/bash</span><br><span class="line"></span><br><span class="line">//直接运行镜像</span><br><span class="line">docker run -it -p port:port centos</span><br><span class="line"></span><br><span class="line">//登录后可以按自己需要做操作</span><br><span class="line">······</span><br><span class="line"></span><br><span class="line">//退出镜像</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<h1 id="保存镜像"><a href="#保存镜像" class="headerlink" title="保存镜像"></a>保存镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//查看容器信息，获取容器id</span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">//保存</span><br><span class="line">docker commit -m=<span class="string">&quot;你的备注&quot;</span> 容器id 镜像id</span><br></pre></td></tr></table></figure>

<h1 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t imageName .</span><br><span class="line"></span><br><span class="line">// 查看镜像</span><br><span class="line">docker images | grep imageName</span><br></pre></td></tr></table></figure>

<h1 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images </span><br><span class="line">docker rmi imageid</span><br><span class="line"></span><br><span class="line">// 如果已经运行，先删除容器id</span><br><span class="line">docker ps -a</span><br><span class="line">docker rm containerid</span><br><span class="line">docker rmi imageid</span><br><span class="line"></span><br><span class="line">// 如果有镜像from该镜像，先删除子镜像(报image has dependent child images)</span><br><span class="line">// 查看有哪些依赖子镜像</span><br><span class="line">docker image inspect --format=<span class="string">&#x27;&#123;&#123;.RepoTags&#125;&#125; &#123;&#123;.Id&#125;&#125; &#123;&#123;.Parent&#125;&#125;&#x27;</span> $(docker image ls -q --filter since=*****)</span><br><span class="line">// 删除子镜像</span><br><span class="line">docker rmi *** *** ***</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Tips:</p>
<p>如果镜像被覆盖，导致后面的tag为<code>&lt;none&gt;</code>，无法对其进行操作的话：</p>
<p>docker tag imgId xxxxx</p>
<p>docker rmi xxxxx</p>
</blockquote>
<h1 id="导入、导出镜像"><a href="#导入、导出镜像" class="headerlink" title="导入、导出镜像"></a>导入、导出镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># export &amp; import（容器操作）</span></span><br><span class="line">docker <span class="built_in">export</span> -o xxx.tar xxxid(容器id)</span><br><span class="line">cat xxx.tar | docker import - xxxname(镜像名xxx/xxx:1.0)</span><br><span class="line"></span><br><span class="line"><span class="comment"># save &amp; load（镜像操作）</span></span><br><span class="line">docker save -o xxx.tar xxxid(容器id)</span><br><span class="line">docker load -I xxx.tar</span><br></pre></td></tr></table></figure>



<h1 id="镜像仓库"><a href="#镜像仓库" class="headerlink" title="镜像仓库"></a>镜像仓库</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录远程仓库</span></span><br><span class="line">docker login hub.yun.***** -u xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送镜像到远程仓库，需先登录</span></span><br><span class="line">docker push imageName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程仓库中的镜像</span></span><br><span class="line">docker search imageName</span><br></pre></td></tr></table></figure>



<h1 id="Dockerfile语法"><a href="#Dockerfile语法" class="headerlink" title="Dockerfile语法"></a>Dockerfile语法</h1><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">//拉取基础镜像</span><br><span class="line"><span class="keyword">FROM</span> &lt;IMAGE&gt;</span><br><span class="line"></span><br><span class="line">//设置镜像作者</span><br><span class="line"><span class="keyword">MAINTAINER</span> &lt;NAME&gt; &lt;EMAIL&gt;</span><br><span class="line"></span><br><span class="line">//为后续的 <span class="keyword">RUN</span><span class="bash"> 、 CMD 、 ENTRYPOINT 指定工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> &lt;PATH&gt;</span></span><br><span class="line"></span><br><span class="line">//创建镜像时执行</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;COMMAND&gt;</span></span><br><span class="line"></span><br><span class="line">//镜像创建成功后，在镜像中执行。如果有多条，只执行最后一条。可被docker <span class="keyword">run</span><span class="bash">覆盖</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]使用<span class="built_in">exec</span>执行，推荐 </span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> <span class="built_in">command</span> param1 param2，在/bin/sh上执行 </span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>] 提供给ENTRYPOINT做默认参数。</span></span><br><span class="line"></span><br><span class="line">//与<span class="keyword">CMD</span><span class="bash">类似。不可被docker run覆盖，除非加上--entrypoint</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> <span class="built_in">command</span> param1 param2</span></span><br><span class="line"></span><br><span class="line">//复制，src可以为Dockerfile所在目录的相对路径，也可以是url。如果是url，会下载并复制到dest；可自动解压</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> &lt;SRC&gt; &lt;DEST&gt;</span></span><br><span class="line"></span><br><span class="line">//复制，src为Dockerfile所在目录的相对路径</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> &lt;SRC&gt; &lt;DEST&gt;</span></span><br><span class="line"></span><br><span class="line">//容器暴露的端口号。多个以空格间隔</span><br><span class="line"><span class="keyword">EXPOSE</span> &lt;PORT&gt;</span><br><span class="line"></span><br><span class="line">//设置环境变量</span><br><span class="line"><span class="keyword">ENV</span> &lt;KEY&gt; &lt;VALUE&gt;</span><br><span class="line"></span><br><span class="line">//指定运行容器时的用户名或UID，后续的<span class="keyword">RUN</span><span class="bash">、CMD、ENTRYPOINT使用该用户</span></span><br><span class="line"><span class="keyword">USER</span> daemon</span><br><span class="line"></span><br><span class="line">//在主机上创建一个挂载，挂载到容器的指定路径。不如docker <span class="keyword">run</span><span class="bash"> -v强大</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> &lt;PATH&gt;</span></span><br><span class="line"></span><br><span class="line">//其他镜像<span class="keyword">FROM</span>该镜像时，执行</span><br><span class="line"><span class="keyword">ONBUILD</span> [INSTRUCTION]</span><br></pre></td></tr></table></figure>

<p>举个🌰</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> nobody <span class="string">&quot;xx@163.com&quot;</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /opt/jdk/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /opt/tomcat/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk1.7.0_79 /opt/jdk/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> tomcat  /opt/tomcat/</span></span><br><span class="line"><span class="keyword">ENV</span> CATALINA_HOME /opt/tomcat</span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /opt/jdk</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/opt/tomcat/bin/catalina.sh&quot;</span>,<span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile与Maven参数间的那点事儿</title>
    <url>/2018/09/28/Dockerfile%E4%B8%8EMaven%E5%8F%82%E6%95%B0%E9%97%B4%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B%E5%84%BF/</url>
    <content><![CDATA[<h1 id="Maven设置Dockerfile参数"><a href="#Maven设置Dockerfile参数" class="headerlink" title="Maven设置Dockerfile参数"></a>Maven设置Dockerfile参数</h1><p>项目中需要根据不同环境，镜像里tomct中catalina.sh里某个参数值也要不同。</p>
<p>项目中用了docker-maven-plugin插件管理docker，所以想到通过maven参数进行设置。</p>
<h2 id="pom配置"><a href="#pom配置" class="headerlink" title="pom配置"></a>pom配置</h2><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 在docker-maven-plugin插件中增加配置</span></span><br><span class="line"><span class="params">&lt;plugin&gt;</span></span><br><span class="line">	...</span><br><span class="line">	<span class="params">&lt;configuration&gt;</span></span><br><span class="line">		...</span><br><span class="line">		<span class="params">&lt;buildArgs&gt;</span></span><br><span class="line">			<span class="meta"># 标签名为key，标签值为value</span></span><br><span class="line">			<span class="params">&lt;APP_NAME&gt;</span>$&#123;appName&#125;<span class="params">&lt;/APP_NAME&gt;</span></span><br><span class="line">		<span class="params">&lt;/buildArgs&gt;</span></span><br><span class="line">		...</span><br><span class="line">	<span class="params">&lt;/configuration&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="params">&lt;/plugin&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 环境配置</span></span><br><span class="line"><span class="params">&lt;profiles&gt;</span></span><br><span class="line">	<span class="params">&lt;profile&gt;</span></span><br><span class="line">		<span class="params">&lt;id&gt;</span>ci<span class="params">&lt;/id&gt;</span></span><br><span class="line">		<span class="params">&lt;properties&gt;</span></span><br><span class="line">			<span class="params">&lt;appName&gt;</span>hello-ci<span class="params">&lt;/appName&gt;</span></span><br><span class="line">		<span class="params">&lt;/properties&gt;</span></span><br><span class="line">	<span class="params">&lt;/profile&gt;</span></span><br><span class="line">	...</span><br><span class="line"><span class="params">&lt;/profiles&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="dockerfile配置"><a href="#dockerfile配置" class="headerlink" title="dockerfile配置"></a>dockerfile配置</h2><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment"># 定义参数</span></span><br><span class="line"><span class="keyword">ARG</span> APP_NAME</span><br><span class="line"><span class="comment"># 增加CATALINA的环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> CATALINA_OPTS -DapplicationName=$APP_NAME</span><br></pre></td></tr></table></figure>

<h2 id="one-more-thing"><a href="#one-more-thing" class="headerlink" title="one more thing"></a>one more thing</h2><p>除了用docker插件，还可以是用exec插件，运行shell脚本或java文件，这种方式更自由一点。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile记录</title>
    <url>/2018/09/21/Dockerfile%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="dockerfile1"><a href="#dockerfile1" class="headerlink" title="dockerfile1"></a>dockerfile1</h1><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> hub.yun.paic.com.cn/library/tomcat:<span class="number">8.5</span>-jre8</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> USER_NAME woniu</span><br><span class="line"><span class="keyword">ENV</span> USER_UID <span class="number">789</span></span><br><span class="line"><span class="keyword">ENV</span> ADMIN_NAME admin</span><br><span class="line"><span class="keyword">ENV</span> USER_GROUP_ID <span class="number">5682</span></span><br><span class="line"><span class="keyword">ENV</span> ADMIN_GROUP_ID <span class="number">603</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> groupadd -g <span class="variable">$USER_GROUP_ID</span> <span class="variable">$USER_NAME</span> &amp;&amp; groupadd -g <span class="variable">$ADMIN_GROUP_ID</span> -u <span class="variable">$ADMIN_NAME</span> \</span></span><br><span class="line"><span class="bash">&amp;&amp; useradd -l -r <span class="variable">$USER_NAME</span> -g <span class="variable">$USER_NAME</span> -u <span class="variable">$USER_UID</span> \</span></span><br><span class="line"><span class="bash">&amp;&amp; usermod -a -G <span class="variable">$ADMIN_NAME</span>  <span class="variable">$USER_NAME</span> \</span></span><br><span class="line"><span class="bash">&amp;&amp; mkdir /usr/<span class="built_in">local</span>/tomcat/hello &amp;&amp; chown -R <span class="variable">$USER_NAME</span>:<span class="variable">$USER_NAME</span> /usr/<span class="built_in">local</span>/tomcat</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> catalina.sh /usr/<span class="built_in">local</span>/tomcat/bin/catalina.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown <span class="variable">$USER_NAME</span>:<span class="variable">$USER_NAME</span> /usr/<span class="built_in">local</span>/tomcat/bin/catalina.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod 750 /usr/<span class="built_in">local</span>/tomcat/bin/catalina.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> $USER_NAME</span><br></pre></td></tr></table></figure>

<h1 id="dockerfile2"><a href="#dockerfile2" class="headerlink" title="dockerfile2"></a>dockerfile2</h1><p>该dockerfile基于上一个，由于上一个dockerfile最后切换到用户woniu，没有mkdir权限，所以需要先切换到root用户。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> hub.yun.paic.com.cn/library/tomcat:<span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir -p /wls/wls81/agent</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> agent /wls/wls81/agent</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown -R <span class="variable">$USER_NAME</span>:<span class="variable">$USER_NAME</span> /wls/wls81</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> catalina.sh /usr/<span class="built_in">local</span>/tomcat/bin/catalina.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown <span class="variable">$USER_NAME</span>:<span class="variable">$USER_NAME</span> /usr/<span class="built_in">local</span>/tomcat/bin/catalina.sh</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod 750 /usr/<span class="built_in">local</span>/tomcat/bin/catalina.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> $USER_NAME</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>容器内权限正常，无权限创建目录</title>
    <url>/2019/12/30/Docker%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="容器内权限正常，无权限创建目录"><a href="#容器内权限正常，无权限创建目录" class="headerlink" title="容器内权限正常，无权限创建目录"></a>容器内权限正常，无权限创建目录</h1><h3 id="相关环境"><a href="#相关环境" class="headerlink" title="相关环境"></a>相关环境</h3><ol>
<li>Docker 18.09.07</li>
<li>kernel 4.4.185</li>
</ol>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>容器内用户为某特定用户，比如woniu，容器内应用要在a目录下创建新目录，a目录属主为woniu，权限750。但是在创建时报错，权限不足。</p>
<h3 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h3><ol>
<li>首先排查镜像是否正常。在其他主机run镜像，进入容器，可以成功创建目录；</li>
<li>对比两个环境的docker版本、配置等，通过调整docker配置等，还是无法解决问题，排除docker影响；</li>
<li>对比两个环境系统内核，发现内核版本不一致，分别为3.10.0 和4.4.185；</li>
</ol>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>将内核版本有4.4.185降为3.10.0，运行容器，正常。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><del>应该是docker在4.4.185上有bug，有待确认。</del></p>
<p>后来发现，貌似和tomcat版本有关，9.0版本普遍存在这个问题，跟镜像分层有关。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7.2</span>.<span class="number">1511</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> apache-tomcat-9.0.30.tar.gz /opt/</span></span><br><span class="line"><span class="comment"># 之前的dockerfile，解压与授权通过两条RUN执行，在不同层级，权限有问题</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /opt \</span></span><br><span class="line"><span class="bash">&amp;&amp; tar xvf apache-tomcat-9.0.30.tar.gz \</span></span><br><span class="line"><span class="bash">RUN groupadd -g 5666 demo &amp;&amp; useradd -l -r demo -g demo -u 666 \</span></span><br><span class="line"><span class="bash">&amp;&amp; chown -R demo:demo /opt/apache-tomcat-9.0.30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 之后的dockerfile，解压与授权在一条RUN，同一层级，正常</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /opt \</span></span><br><span class="line"><span class="bash">&amp;&amp; tar xvf apache-tomcat-9.0.30.tar.gz \</span></span><br><span class="line"><span class="bash">&amp;&amp; groupadd -g 5666 demo &amp;&amp; useradd -l -r demo -g demo -u 666 \</span></span><br><span class="line"><span class="bash">&amp;&amp; chown -R demo:demo /opt/apache-tomcat-9.0.30</span></span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/docker-library/tomcat/issues/35">https://github.com/docker-library/tomcat/issues/35</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>GDD China 2018</title>
    <url>/2018/09/19/GDD2018/</url>
    <content><![CDATA[<h2 id="活动链接"><a href="#活动链接" class="headerlink" title="活动链接"></a>活动链接</h2><p><a href="https://www.google.cn/intl/zh-CN/events/developerdays2018/">https://www.google.cn/intl/zh-CN/events/developerdays2018/</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>​    参加过GDD2017，这次感受不太一样。无论规模、人数较去年翻了几倍。光排队差不多花了30分钟。今年主推还是TensorFlow，Flutter宣传力度也比较大。2F设了体验区，因为去年参加过所以没怎么体验。</p>
]]></content>
      <categories>
        <category>活动</category>
      </categories>
      <tags>
        <tag>GDD</tag>
      </tags>
  </entry>
  <entry>
    <title>GPU安装Docker环境</title>
    <url>/2019/06/27/GPU%E5%AE%89%E8%A3%85Docker%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="nvidia驱动、cuda、cudnn、TensorFlow版本对应关系"><a href="#nvidia驱动、cuda、cudnn、TensorFlow版本对应关系" class="headerlink" title="nvidia驱动、cuda、cudnn、TensorFlow版本对应关系"></a>nvidia驱动、cuda、cudnn、TensorFlow版本对应关系</h1><p><strong>cuda、cudnn、docker、nvidia-docker版本一定看是否兼容。不同版本有兼容问题。</strong></p>
<p>nvidia驱动、cuda对应关系</p>
<p><a href="https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html">https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/index.html</a></p>
<p>cuda、cudnn对应关系</p>
<p><a href="https://developer.nvidia.com/rdp/cudnn-archive">https://developer.nvidia.com/rdp/cudnn-archive</a></p>
<p>TensorFlow、cuda、cudnn、python对应关系</p>
<p><a href="https://tensorflow.google.cn/install/source#linux">https://tensorflow.google.cn/install/source#linux</a></p>
<h2 id="升级驱动（非必须）"><a href="#升级驱动（非必须）" class="headerlink" title="升级驱动（非必须）"></a>升级驱动（非必须）</h2><p>如果已经安装低版本的驱动，需要升级，需要将所有使用nvidia的程序暂停（一般只有docker），再卸载。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先暂停docker</span></span><br><span class="line">service docker stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看有哪些nvidia模块，依次卸载</span></span><br><span class="line">lsmod | grep nvidia</span><br><span class="line">rmmod nvidia-*</span><br><span class="line">rmmod nvidia</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装nvidia-docker时，安装了一些与nvidia相关的包，一起卸载</span></span><br><span class="line">rpm -qa | grep nvidia</span><br><span class="line">rpm -e --nodeps *-nvidia-*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后安装nvidia驱动、nvidia-docker</span></span><br><span class="line"><span class="comment"># 查看驱动版本</span></span><br><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure>



<h1 id="安装Python3"><a href="#安装Python3" class="headerlink" title="安装Python3"></a>安装Python3</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/python3</span><br><span class="line">tar -zxvf Python-3.6.6.tgz</span><br><span class="line"><span class="built_in">cd</span> Python-3.6.6</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python3</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/bin/python3</span><br><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="comment"># 加入</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:/usr/<span class="built_in">local</span>/python3/bin</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">python3 -V</span><br></pre></td></tr></table></figure>

<h1 id="安装pip3"><a href="#安装pip3" class="headerlink" title="安装pip3"></a>安装pip3</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf pip-9.0.1.tgz</span><br><span class="line"><span class="built_in">cd</span> pip-9.0.1</span><br><span class="line">python3 setup.py install</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/pip /usr/bin/pip3</span><br><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>

<h1 id="安装cuda"><a href="#安装cuda" class="headerlink" title="安装cuda"></a>安装cuda</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rpm安装</span></span><br><span class="line">wget http://mirrors.*******/cuda-repo-rhel7-9-0-local-9.0.176-1.x86_64.rpm</span><br><span class="line">rpm -ivh cuda-repo-*.rpm</span><br><span class="line">yum clean expire-cache</span><br><span class="line">yum install -y cuda</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda/lib64:/usr/<span class="built_in">local</span>/cuda/extras/CUPTI/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/<span class="built_in">local</span>/cuda</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否成功：</span></span><br><span class="line">cat /usr/<span class="built_in">local</span>/cuda/version.txt 或 nvcc --version</span><br></pre></td></tr></table></figure>

<h1 id="安装cudnn"><a href="#安装cudnn" class="headerlink" title="安装cudnn"></a>安装cudnn</h1><p>直接将cudnn中相关文件，拷贝到cuda对应目录即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf cudnn-8.0-linux-x64-v6.0.tgz</span><br><span class="line"><span class="comment"># 进入cuda</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/cuda</span><br><span class="line"><span class="comment"># 拷贝cudnn相关文件</span></span><br><span class="line">cp /xxx/cuda/include/cudnn.h include/</span><br><span class="line">cp /xxx/cuda/lib64/libcudnn* lib64/</span><br><span class="line"></span><br><span class="line">chmod a+r include/cudnn.h</span><br><span class="line">chmod a+r lib64/libcudnn*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda/lib64:/usr/<span class="built_in">local</span>/cuda/extras/CUPTI/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/<span class="built_in">local</span>/cuda</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/cuda/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">cat /usr/<span class="built_in">local</span>/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2</span><br><span class="line"><span class="comment"># 查看so版本对不对</span></span><br><span class="line">ldconfig -v | grep cudnn /</span><br></pre></td></tr></table></figure>

<h1 id="升级docker到18"><a href="#升级docker到18" class="headerlink" title="升级docker到18"></a>升级docker到18</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载原来docker</span></span><br><span class="line"><span class="comment"># rpm安装，直接remove</span></span><br><span class="line">yum remove docker</span><br><span class="line"><span class="comment"># 如果是二进制文件拷贝，需要手动删除</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin</span><br><span class="line">rm -rf docker*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装docker18</span></span><br><span class="line">rpm -ivh containerd.io-1.2.2-3.el7.x86_64.rpm</span><br><span class="line">rpm -ivh container-selinux-2.74-1.el7.noarch.rpm</span><br><span class="line">rpm -ivh docker-ce-cli-18.09.5-3.el7.x86_64.rpm</span><br><span class="line">rpm -ivh docker-ce-18.09.5-3.el7.x86_64.rpm</span><br><span class="line"><span class="comment"># 默认是安装在/usr/bin目录下，根据个人需要看是否需要拷贝到/usr/local/bin</span></span><br><span class="line"><span class="built_in">cd</span> /usr/bin</span><br><span class="line">cp docker* /usr/<span class="built_in">local</span>/bin</span><br><span class="line"></span><br><span class="line">systemctl status docker.service</span><br><span class="line">docker --version</span><br></pre></td></tr></table></figure>

<h1 id="安装nvidia-docker"><a href="#安装nvidia-docker" class="headerlink" title="安装nvidia-docker"></a>安装nvidia-docker</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -ivh libnvidia-container1-1.0.2-1.x86_64.rpm</span><br><span class="line">rpm -ivh libnvidia-container-tools-1.0.2-1.x86_64.rpm</span><br><span class="line">rpm -ivh nvidia-container-runtime-hook-1.4.0-2.x86_64.rpm</span><br><span class="line">rpm -ivh nvidia-container-runtime-2.0.0-3.docker18.09.5.x86_64.rpm</span><br><span class="line">rpm -ivh nvidia-docker2-2.0.3-3.docker18.09.5.ce.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">nvidia-docker --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外修改daemon.json，使用docker run的时候默认使用nvidia-docker</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;default-runtime&quot;</span>: <span class="string">&quot;nvidia&quot;</span>,</span><br><span class="line">    <span class="string">&quot;runtimes&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;nvidia&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/usr/bin/nvidia-container-runtime&quot;</span>,</span><br><span class="line">            <span class="string">&quot;runtimeArgs&quot;</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成之后，重启docker、nvidia-docker</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习笔记</title>
    <url>/2017/07/14/Git%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="本地代码初始化到远程仓库"><a href="#本地代码初始化到远程仓库" class="headerlink" title="本地代码初始化到远程仓库"></a>本地代码初始化到远程仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//create a new repository on the <span class="built_in">command</span> line</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git remote add origin https://github.com/wonius/XXXXXX.git</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line">//push an existing repository from the <span class="built_in">command</span> line</span><br><span class="line">git remote add origin https://github.com/wonius/MySpringBootDemo.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>



<h2 id="更新代码时，本地冲突无法更新"><a href="#更新代码时，本地冲突无法更新" class="headerlink" title="更新代码时，本地冲突无法更新"></a>更新代码时，本地冲突无法更新</h2><p>错误信息：</p>
<blockquote>
<p>error: Your local changes to the following files would be overwritten by merge:</p>
<p>laravel/app/Services/ExpressService.php</p>
<p>Please commit your changes or stash them before you merge.</p>
</blockquote>
<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line"></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<p>如果希望更新时覆盖本地文件，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>



<h2 id="回退到某个历史版本"><a href="#回退到某个历史版本" class="headerlink" title="回退到某个历史版本"></a>回退到某个历史版本</h2><ol>
<li><p>首先查看要回退到哪个历史版本id：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure></li>
<li><p>回退。比如id为784dd834b250d634a7686f28a7c323d5c6402e90</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//该回退动作会将本地所有改动回退，所以一定要记得stash。</span><br><span class="line">git reset --hard 784dd834b250d634a7686f28a7c323d5c6402e90</span><br></pre></td></tr></table></figure></li>
<li><p>如果想将回退的版本推送到远程服务器，再用push。只回退本地不用此操作:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="使用git-stash命令进行代码暂存"><a href="#使用git-stash命令进行代码暂存" class="headerlink" title="使用git stash命令进行代码暂存"></a>使用git stash命令进行代码暂存</h2><p>​    当我们开发过程中，经常会遇到开发进行了一半，需要切换到另外一个分支的情况。stash命令可以将你现在所有变动进行暂存，后续切换回来时，从暂存中恢复就可以了。stash真的是很好用的工具。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//暂存</span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line">//查看所有的暂存，暂存信息中包含分支名、stash版本号(形如stash@&#123;0&#125;)</span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line">//恢复</span><br><span class="line">git stash apply  			     //恢复到最近一次stash版本</span><br><span class="line">git stash pop					//恢复到最近一次stash版本，并将栈中stash版本删掉</span><br><span class="line">git stash apply stash@&#123;0&#125; 		 //恢复到stash@&#123;0&#125;版本</span><br><span class="line">git stash pop stash@&#123;0&#125;			 //恢复到stash@&#123;0&#125;版本，并将栈中stash@&#123;0&#125;版本删掉</span><br><span class="line"></span><br><span class="line">//删除</span><br><span class="line">git stash drop stash@&#123;0&#125;		//将栈中stash@&#123;0&#125;版本删除</span><br><span class="line">git stash clear					//清楚栈中所有stash版本</span><br></pre></td></tr></table></figure>

<p>为了保持git栈的清洁，推荐大家使用git stash pop相关命令</p>
<h2 id="分支命令"><a href="#分支命令" class="headerlink" title="分支命令"></a>分支命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查看远程分支</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看本地分支</span></span><br><span class="line">git branch / git br</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建本地分支</span></span><br><span class="line">git branch <span class="built_in">test</span></span><br><span class="line"><span class="comment">#本地分支推送到远程</span></span><br><span class="line">git push origin <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建本地分支test1，并跟踪远程分支ci</span></span><br><span class="line">git checkout -b test1 origin/ci</span><br><span class="line"><span class="comment">#推送到远程仓库</span></span><br><span class="line">git push origin test1</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换分支</span></span><br><span class="line">git checkout <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除本地分支</span></span><br><span class="line">git br -d <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除远程分支</span></span><br><span class="line">git branch -r -d origin/<span class="built_in">test</span></span><br><span class="line">git push origin :<span class="built_in">test</span> </span><br></pre></td></tr></table></figure>

<h2 id="fatal-refusing-to-merge-unrelated-histories"><a href="#fatal-refusing-to-merge-unrelated-histories" class="headerlink" title="fatal: refusing to merge unrelated histories"></a>fatal: refusing to merge unrelated histories</h2><p>通常是因为本地仓库的历史记录，与远程仓库的历史记录不同，git认为是两个完全无关的项目，无法pull</p>
<p>解决办法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master ----allow-unrelated-histories</span><br></pre></td></tr></table></figure>

<h2 id="代码提交到不同仓库"><a href="#代码提交到不同仓库" class="headerlink" title="代码提交到不同仓库"></a>代码提交到不同仓库</h2><ol>
<li>手动分别推送（如果需要两个库代码不同）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 添加仓库，并设置别名</span><br><span class="line">git remote add github https://*****.git</span><br><span class="line">git remote add gitlab https://*****.git</span><br><span class="line"></span><br><span class="line">// 删除别名</span><br><span class="line">git remote remove github</span><br><span class="line"></span><br><span class="line">// 推送</span><br><span class="line">git push github master:master</span><br><span class="line">// 如果是新建的仓库，需要加-f参数</span><br><span class="line">git push -f github master:master</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>一键push所有库（两个库代码完全一样）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//将新仓库URL绑定到origin上</span><br><span class="line">git remote set-url --add origin https://*****.git</span><br><span class="line">//push</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">//查看git中配置的url</span><br><span class="line">git config -e</span><br></pre></td></tr></table></figure>

<h2 id="修改远程仓库地址"><a href="#修改远程仓库地址" class="headerlink" title="修改远程仓库地址"></a>修改远程仓库地址</h2><ol>
<li><p>命令修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin http://*****.git</span><br></pre></td></tr></table></figure></li>
<li><p>先删除再添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add origin http://*****.git</span><br></pre></td></tr></table></figure></li>
<li><p>配置文件修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ***/.git</span><br><span class="line">vim config</span><br><span class="line"><span class="comment"># 然后修改</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="rebase提交"><a href="#rebase提交" class="headerlink" title="rebase提交"></a>rebase提交</h2><p>通常我们都会拉取分支，提交代码时从自己分支往主分支上merge，当分支比较多时，分支树会显得很乱。</p>
<p>使用rebase，将自己分支每次重置为主分支记录，再提交，全程只有主分支的提交历史，比较清晰</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;*****&quot;</span></span><br><span class="line">git rebase master(主分支)</span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<h2 id="修改commit内容"><a href="#修改commit内容" class="headerlink" title="修改commit内容"></a>修改commit内容</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br><span class="line"><span class="comment"># 修改内容</span></span><br><span class="line">git push -f</span><br></pre></td></tr></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><a href="https://git-scm.com/docs">Git常用命令</a></p>
]]></content>
      <categories>
        <category>版本管理</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云+Hexo支持https协议</title>
    <url>/2018/08/23/Hexo-%E8%85%BE%E8%AE%AF%E4%BA%91%E5%BC%80%E5%90%AFhttps/</url>
    <content><![CDATA[<h1 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h1><ol>
<li>登录腾讯云管理平台；</li>
<li>打开云产品—域名与网站—SSL证书管理，点击申请证书（也可以自己制作证书。不过使用腾讯云的服务更简单一点，阿里云也有制作证书的功能）；</li>
<li>填好信息，下一步；</li>
<li>域名身份验证，支持两种方式，我用的是手动DNS验证，在域名解析添加一条解析记录就可以了；</li>
<li>等待审核，一般一个工作日就审核通过；</li>
<li>审核通过后，下载证书；</li>
</ol>
<p><em>.crt：自签名的证书</em><br><em>.csr：证书的请求(用于向证书颁发机构申请crt证书时使用，nginx配置时不会用到)</em><br><em>.key：SSL Key (分为不带口令和带口令版本)。</em><br><em>签名证书配置nginx需要的是.crt证书，和不带口令的SSL Key的.key文件。</em></p>
<h1 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h1><ol>
<li><p>将下载好的证书上传到服务器，指定目录保存；</p>
</li>
<li><p>编辑nginx解析规则，添加443端口解析（编辑前记得备份，养成良好习惯）：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">        <span class="attribute">server_name</span> _; <span class="comment">#填写绑定证书的域名</span></span><br><span class="line">        <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">ssl_certificate</span> /****/1_wonius.top_bundle.crt; <span class="comment">#证书路径</span></span><br><span class="line">        <span class="attribute">ssl_certificate_key</span> /****/2_wonius.top.key;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>; <span class="comment">#按照这个协议配置</span></span><br><span class="line">        <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;<span class="comment">#按照这个套件配置</span></span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /data/www/hexo; <span class="comment">#站点目录</span></span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>（可选）全站加密，http自动跳转https，修改80端口规则：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  _;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://$host<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>重启nginx<code>service nginx restart</code>；</p>
</li>
<li><p>然后访问，是不是就有小绿锁🔐了</p>
</li>
</ol>
<h1 id="one-more-thing"><a href="#one-more-thing" class="headerlink" title="one more thing"></a>one more thing</h1><p>开启https之后，如果内部有一些依赖服务不支持https，那这些服务将不可用。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo升级记录</title>
    <url>/2020/10/19/Hexo%E5%8D%87%E7%BA%A7%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​    最近因为某些原因，升级了本机电脑上Node，然后引发了一连串的连锁反应，其中就包括Hexo。前后也花了点时间，mark下。</p>
<h1 id="先升级Node"><a href="#先升级Node" class="headerlink" title="先升级Node"></a>先升级Node</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先安装n组件</span></span><br><span class="line">npm install -g n</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用n升级node版本。stable是最新的稳定版，latest是最新版。根据情况使用</span></span><br><span class="line">sudo n stable</span><br><span class="line">sudo n latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本验证</span></span><br><span class="line">node -v</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级npm，xx为版本号。也可以使用latest，更新最新版本</span></span><br><span class="line">sudo npm install npm@xx -g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证npm版本</span></span><br><span class="line">node -v 或者 node version</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用的一些命令</span></span><br><span class="line">npm view node versions	// 查看node所有版本</span><br><span class="line">npm view npm versions		// 查看npm所有版本</span><br><span class="line">npm view npm version		// 查看npm最新版本</span><br><span class="line">npm ls 或者 npm list		 // 查看npm所有插件，ls是list的简写</span><br><span class="line">npm ls -g --dept 0		// 查看本机安装的npm插件</span><br><span class="line">npm ls xx -g					// 查看xx相关的插件，比如hexo</span><br></pre></td></tr></table></figure>

<h1 id="再升级Hexo"><a href="#再升级Hexo" class="headerlink" title="再升级Hexo"></a>再升级Hexo</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装npm-check、npm-upgrade</span></span><br><span class="line">npm install -g npm-check</span><br><span class="line">npm install -g npm-upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查更新</span></span><br><span class="line">npm-check</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新package.json</span></span><br><span class="line">npm-upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级。如果升级某个模块，在update后面加模块名xx，不加的话全部升级</span></span><br><span class="line">npm update -g</span><br><span class="line"><span class="comment"># 保存package.json</span></span><br><span class="line">npm update --save</span><br></pre></td></tr></table></figure>

<p>如果是Mac OS，在升级过程中可能会遇到提示没有安装xcode组件的情况。</p>
<p>可以访问<a href="https://developer.apple.com/download/more/">苹果开发者下载中心</a>，搜索<code>Command Line Tools</code>，根据系统版本找到对应的安装包，下载安装就可以了。</p>
<h1 id="再修改主题"><a href="#再修改主题" class="headerlink" title="再修改主题"></a>再修改主题</h1><p>之前一直用的Next，时间久了有点审美疲劳，而且我当时的版本离最新版差别比较大，后续自己改过很多东西，升级也比较麻烦。所以干脆换了个主题。</p>
<p>发现Oranges挺清新脱俗的，就它了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入到hexo目录，安装主题</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zchengsite/hexo-theme-oranges.git themes/oranges</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后修改hexo的_config.yml中的主题</span></span><br><span class="line">theme: oranges</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新编译、部署</span></span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>hexo升级后真不是一般的快哇，真香！</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo中的Next主题常用设置</title>
    <url>/2017/07/21/Hexo%E4%B8%AD%E7%9A%84NexT%E4%B8%BB%E9%A2%98%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="设置favicon-ico（网站logo）"><a href="#设置favicon-ico（网站logo）" class="headerlink" title="设置favicon.ico（网站logo）"></a>设置favicon.ico（网站logo）</h2><p>&emsp;&emsp;使用主题为next，按照主题内_config.yml所说，将icon放到hexo-site/source/目录下，没有生效。查了些资料，终于好了，设置如下：</p>
<ol>
<li>找一副自己中意的图片，尽量简单，因为会缩成很小。利用<a href="http://tool.lu/favicon/">在线工具</a>制作icon，保存。我的大小是32*32，加载时大多时候很流畅，有时也会转啊转；</li>
<li>将保存的favicon.ico移动至hexo-site/themes/next/source/images目录下；</li>
<li>修改next配置文件_config.yml，如下：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">favicon: images/favicon.ico</span><br></pre></td></tr></table></figure></li>
<li>hexo g &amp;&amp; hexo s，就可以在本地看到效果了。调试满意后，hexo d发布；</li>
</ol>
<h2 id="利用Leancloud实现阅读统计，请求异常401"><a href="#利用Leancloud实现阅读统计，请求异常401" class="headerlink" title="利用Leancloud实现阅读统计，请求异常401"></a>利用Leancloud实现阅读统计，请求异常401</h2><p>&emsp;&emsp;如何配置leancloud在此不做赘述，next作者文档中写的已经很清晰了，可以先移步到<a href="http://theme-next.iissnan.com/getting-started.html#third-party-services">NEXT</a>看看。笔者的情况是，博客在github上，在万网买了个域名，绑定到github。</p>
<p>&emsp;&emsp;配置完成之后，发现阅读统计不能正常使用，开始以为缓存原因，过了两天，还是没好，打算解决这个问题。</p>
<p>&emsp;&emsp;分析过程：</p>
<ol>
<li>接口报错401：Unauthorized，再次检查了一下AppKey、Web安全域名配置，都正常。比较纳闷，开始研究。</li>
<li>用chrome看了下counter的请求，Request URL竟然是<a href="https://api.us.leancloud.cn/****">https://api.us.leancloud.cn/****</a>。看起来比较诡异，us不是美国吗。难道访问的url错了？</li>
<li>重新登录leancloud，发现域名是<a href="https://leancloud.cn/">https://leancloud.cn/</a>，没有us。新开tab页，访问<a href="https://us.leancloud.cn/">https://us.leancloud.cn/</a>，也可以成功登录。登录后仔细对比，才发现原来leancloud右上角有个选项，可以选择国内节点、美国节点。两个节点中的应用是相互隔离的。我的next中配置的是国内节点中应用的配置，请求到美国节点认证，所以认证不通过。明白之后，我在美国节点中也创建了应用，把next中的相关配置更新，部署，果然可以正常显示。</li>
</ol>
<p>&emsp;&emsp;个人猜测，由于github服务器在美国，所以当请求leancloud时，请求被分发到了美国节点上的服务器上。</p>
<p>补充：后来更新了NexT代码，又必须配置成国内节点才可以访问。</p>
<h2 id="增加关键字、摘要"><a href="#增加关键字、摘要" class="headerlink" title="增加关键字、摘要"></a>增加关键字、摘要</h2><p>&emsp;&emsp;建议通过在模板中增加属性的方式，添加关键字、摘要。</p>
<ol>
<li>修改next/_config.yml配置文件:<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">//开启摘要</span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">//默认文章的前150个字符作为摘要</span><br><span class="line">length: 150</span><br></pre></td></tr></table></figure></li>
<li>修改hexo-site/scaffolds/post.md文件，增加keywords、description。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories: </span><br><span class="line">keywords: </span><br><span class="line">//摘要，填写后显示该字段的值。没有该地段，自动取文章前150个字符作为摘要</span><br><span class="line">description: </span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="修改文章宽度"><a href="#修改文章宽度" class="headerlink" title="修改文章宽度"></a>修改文章宽度</h2><p>&emsp;&emsp; 修改/next/source/css/_custom/custom.styl。该文件提供给用户配置自定义的样式，用户尽量避免对源代码的改动，以免牵一发而动全身。<br>针对Mist、Muse风格，可以用如下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 修改成你期望的宽度</span><br><span class="line"><span class="variable">$content</span>-desktop = 1080px</span><br><span class="line"></span><br><span class="line">// 当视窗超过 1600px 后的宽度</span><br><span class="line"><span class="variable">$content</span>-desktop-large = 1200px</span><br></pre></td></tr></table></figure>
<p>如果是Pisces风格，则需要</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">header&#123; width: 90%; &#125;</span><br><span class="line">.container .main-inner &#123; width: 90%; &#125;</span><br><span class="line">.content-wrap &#123; width: calc(100% - 260px); &#125;</span><br></pre></td></tr></table></figure>

<h2 id="新建文章时同时建立同名目录，保存图片"><a href="#新建文章时同时建立同名目录，保存图片" class="headerlink" title="新建文章时同时建立同名目录，保存图片"></a>新建文章时同时建立同名目录，保存图片</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//编辑hexo目录下的_config.yml，修改如下配置</span><br><span class="line">post_asset_folder:<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">//新建文件</span><br><span class="line">hexo new <span class="string">&#x27;helloworld&#x27;</span></span><br><span class="line"></span><br><span class="line">//将图片移动到helloworld目录中，并且在md中引用</span><br><span class="line">&#123;% asset_img 2.JPG 这是描述 %&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改模板"><a href="#修改模板" class="headerlink" title="修改模板"></a>修改模板</h2><p>默认新建文档的模板是hexo/scaffolds/post.md，所以如果修改模板，直接在该文件中修改。</p>
<p>比如增加页脚，直接在post.md中增加。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo相关配置</title>
    <url>/2017/12/18/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="创建新文档"><a href="#创建新文档" class="headerlink" title="创建新文档"></a>创建新文档</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new filename</span><br></pre></td></tr></table></figure>

<h2 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动本地服务，然后访问http://localhost:4000/</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h2 id="重新编译并且发布"><a href="#重新编译并且发布" class="headerlink" title="重新编译并且发布"></a>重新编译并且发布</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<h2 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<h2 id="部署到vps"><a href="#部署到vps" class="headerlink" title="部署到vps"></a>部署到vps</h2><p>一般使用Hexo搭建blog，都是采用Hexo+Github的结构，但是由于Github屏蔽了百度的爬虫，所以建好的blog百度搜不到，满足不了知识分享（装逼）的需求。解决办法有很多，最简单的就是买一块vps，将blog直接推送到自己的vps上。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//安装hexo-deployer-rsync</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line"></span><br><span class="line">//修改Hexo中的_confg.xml的deploy</span><br><span class="line">- <span class="built_in">type</span>: git</span><br><span class="line">  repo:</span><br><span class="line">      github: https://github.com/XXXX/xxxx.github.io.git </span><br><span class="line">      coding: https://git.coding.net/XXXX/xxxx.git</span><br><span class="line">  branch: master</span><br><span class="line">- <span class="built_in">type</span>: rsync</span><br><span class="line">  host: 140.143.251.238</span><br><span class="line">  user: root</span><br><span class="line">  root: /data/www/hexo</span><br><span class="line">  port: 22</span><br><span class="line">  delete: <span class="literal">true</span></span><br><span class="line">  verbose: <span class="literal">true</span></span><br><span class="line">  ignore_errors: <span class="literal">false</span></span><br><span class="line">  </span><br><span class="line">//生成并部署</span><br><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>

<p>参数讲解：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td><strong>host</strong></td>
<td>远程主机的地址</td>
<td></td>
</tr>
<tr>
<td><strong>user</strong></td>
<td>使用者名称</td>
<td></td>
</tr>
<tr>
<td><strong>root</strong></td>
<td>远程主机的根目录</td>
<td></td>
</tr>
<tr>
<td><strong>port</strong></td>
<td>端口</td>
<td>22</td>
</tr>
<tr>
<td><strong>delete</strong></td>
<td>删除远程主机上的旧文件</td>
<td>true</td>
</tr>
<tr>
<td><strong>verbose</strong></td>
<td>显示调试信息</td>
<td>true</td>
</tr>
<tr>
<td><strong>ignore_errors</strong></td>
<td>忽略错误</td>
<td>true</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>IE8下，a标签触发onbeforeunload事件</title>
    <url>/2017/08/03/IE8%E4%B8%8B%EF%BC%8Ca%E6%A0%87%E7%AD%BE%E8%A7%A6%E5%8F%91onbeforeunload%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;&emsp;今天开发过程中，遇到个奇怪现象。我们系统针对onbeforeunload事件做了处理，当该事件触发时弹框提示，由用户确认退出。当点击a标签时，IE8下触发了该事件。IE11与Chrome都没有问题。好吧，又是IE的坑。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>&emsp;&emsp;网上搜索一番，原来点击a标签会以此触发如下事件</p>
<p>onclick-&gt;window.onbeforeunload-&gt;href</p>
<p>所以解决这个问题，在onclick的回调函数末尾，加 <strong>return false;</strong> ，阻止事件传递到onbeforeunload。</p>
<p>另外还有网友说，<strong>href=“###”</strong> 也可以解决该问题</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>根据 MSDN 中描述，IE 的 onbeforeunload 事件可由以下这些条件触发：</p>
<ul>
<li>关闭当前浏览器窗口。</li>
<li>导航到另一个进入一个新的地址或选择一个喜欢的位置。</li>
<li>单击后退，前进，刷新，或主页按钮。</li>
<li>点击一个链接到新页面。</li>
<li>调用 超链接的 click 方法。</li>
<li>调用 document.write 方法。</li>
<li>调用 document.open 方法。</li>
<li>调用 document.close 方法。</li>
<li>调用 window.close 方法。</li>
<li>调用 window.open 方法，窗口名称设置值为 _self。</li>
<li>调用 window.navigate 或 NavigateAndFind 方法。</li>
<li>调用 location.replace 方法。</li>
<li>调用 location.reload 方法。</li>
<li>指定一个 location.href 属性的新值。</li>
<li>使用 submit 按键提交表单，或调用 form.submit 方法。</li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>onbeforeunload</tag>
      </tags>
  </entry>
  <entry>
    <title>IE8遇到的坑</title>
    <url>/2017/08/23/IE8%E5%9D%91/</url>
    <content><![CDATA[<h2 id="new-Date"><a href="#new-Date" class="headerlink" title="new Date()"></a>new Date()</h2><p>​    当new Date()时，IE8与IE11产生的结果不同。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//IE8，date1格式为‘2017年8月23日’。当将该参数传递到rest接口时，无法绑定到date类型</span></span><br><span class="line"><span class="comment">//另外，使用oracle的to_date()方法时，to_date(&#x27;&#x27;, &#x27;yyyy&quot;年&quot;MM&quot;月&quot;dd&quot;日&quot;&#x27;)</span></span><br><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//IE11，date2格式为‘2017/8/23’</span></span><br><span class="line"><span class="keyword">var</span> date2 =<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了兼容IE8和IE11，需在前端对日期做处理</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> today = date.getFullYear()+<span class="string">&quot;-&quot;</span>+date.getMonth()+<span class="string">&quot;-&quot;</span>+date.getDay();</span><br></pre></td></tr></table></figure>

<h2 id="for-var-i-in-obj"><a href="#for-var-i-in-obj" class="headerlink" title="for(var i in obj)"></a>for(var i in obj)</h2><p>​    IE8支持JS版本较低，Array.prototype中的函数无法使用。比如forEach、indexOf等。一般为了兼容，使在IE8下也可以使用这些函数，会重写Array.prototype，加上这些函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Array</span>.prototype.forEach) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    但是，对于对象原型的操作，是很危险的事情，严重会导致导致原型链断裂。不过这次讨论的不是这个问题。</p>
<p>​    当IE8解析for in 方法时，会将forEach等添加到prototype上的方法当做变量，一起循环。所以循环体里如果对变量进行了操作，会导致报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> params) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params[i].length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    解决方法：</p>
<ol>
<li><p>在使用for..in时，使用 hasOwnProperty() 对变量进行判断：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> params) &#123;</span><br><span class="line">  <span class="keyword">if</span>(params.hasOwnProperty(params[i]))</span><br><span class="line">    <span class="built_in">console</span>.log(params[i].length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>for循环的另一种写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; params.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(params[i].length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用框架封装好的接口，_.forEach，如果不想引入框架，可以自己写一个forEach函数。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>IE8</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON类库对比</title>
    <url>/2017/08/19/JSON%E7%B1%BB%E5%BA%93%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<h1 id="json-lib（性能差）"><a href="#json-lib（性能差）" class="headerlink" title="json-lib（性能差）"></a>json-lib（性能差）</h1><p>json-lib最开始的也是应用最广泛的json解析工具，json-lib 不好的地方确实是依赖于很多第三方包，<br>包括commons-beanutils.jar，commons-collections-3.2.jar，commons-lang-2.6.jar，commons-logging-1.1.1.jar，ezmorph-1.0.6.jar，<br>对于复杂类型的转换，json-lib对于json转换成bean还有缺陷，比如一个类里面会出现另一个类的list或者map集合，json-lib从json到bean的转换就会出现问题。<br>json-lib在功能和性能上面都不能满足现在互联网化的需求。</p>
<h1 id="Jackson"><a href="#Jackson" class="headerlink" title="Jackson"></a>Jackson</h1><p>相比json-lib框架，Jackson所依赖的jar包较少，简单易用并且性能也要相对高些。<br>而且Jackson社区相对比较活跃，更新速度也比较快。<br>Jackson对于复杂类型的json转换bean会出现问题，一些集合Map，List的转换出现问题。<br>Jackson对于复杂类型的bean转换Json，转换的json格式不是标准的Json格式</p>
<h1 id="Gson"><a href="#Gson" class="headerlink" title="Gson"></a>Gson</h1><p>Gson是目前功能最全的Json解析神器，Gson当初是为因应Google公司内部需求而由Google自行研发而来，<br>但自从在2008年五月公开发布第一版后已被许多公司或用户应用。<br>Gson的应用主要为toJson与fromJson两个转换函数，无依赖，不需要例外额外的jar，能够直接跑在JDK上。<br>而在使用这种对象转换之前需先创建好对象的类型以及其成员才能成功的将JSON字符串成功转换成相对应的对象。<br>类里面只要有get和set方法，Gson完全可以将复杂类型的json到bean或bean到json的转换，是JSON解析的神器。<br>Gson在功能上面无可挑剔，但是性能上面比FastJson有所差距。</p>
<h1 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h1><p>Fastjson是一个Java语言编写的高性能的JSON处理器,由阿里巴巴公司开发。<br>无依赖，不需要例外额外的jar，能够直接跑在JDK上。<br>FastJson在复杂类型的Bean转换Json上会出现一些问题，可能会出现引用的类型，导致Json转换出错，需要制定引用。<br>FastJson采用独创的算法，将parse的速度提升到极致，超过所有json库。</p>
<p><a href="https://www.zhihu.com/question/44199956">fastjson这么快老外为啥还是热衷 jackson?</a></p>
<h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><p>选择一个合适的JSON库要从多个方面进行考虑：</p>
<ol>
<li>字符串解析成JSON性能</li>
<li>字符串解析成JavaBean性能</li>
<li>JavaBean构造JSON性能</li>
<li>集合构造JSON性能</li>
<li>易用性</li>
</ol>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><ol>
<li>字符串解析成JavaBean（反序列化）：当数据量较少时首选FastJson，数据量较大使用Jackson。但是Jackson无法堆一个对象集合进行解析，只能转成一个Map集合，这点Gson和FastJson处理的比较好。</li>
<li>字符串解析成JSON：当数据量较少时首选FastJson，数据量较大使用Jackson。</li>
<li>JavaBean构造JSON（序列化）：当数据量较少时选择Gson，数据量较大可使用Jackson。</li>
<li>集合构造JSON（序列化）：首先Jackson，其次Fastjson。</li>
</ol>
<h2 id="易用性"><a href="#易用性" class="headerlink" title="易用性"></a>易用性</h2><ol>
<li>FastJson的API设计的最简单，最方便使用，直接使用JSON的两个静态方法即可完成四种操作；</li>
<li>Gson和Jackson都需要new一个对象，虽然这个对象可以复用，但是在实际使用过程中还需要用一个全局变量来保存改变量，同时API设计的也不是很好理解，对于FastJson来说复杂的API是因为他支持流式解析，适合对JSON进行大量且复杂的操作，但是实际应用中对于JSON的操作都是简单的解析成JavaBean，然后JavaBean序列化成JSON字符串即可，复杂的操作很少；</li>
</ol>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>综上4种Json技术的比较，在项目选型的时候，如果性能没有什么要求，可以使用Jackson；</p>
<p>如果性能上有要求，可以Jackson（或Gson）与FastJson两种并行使用，使用Jackson（或Gson）将bean转换成json，使用FastJson将Json转换Bean。</p>
<h1 id="one-more-thing"><a href="#one-more-thing" class="headerlink" title="one more thing"></a>one more thing</h1><p>在使用JS的JSON.parse(data)转换时：</p>
<ol>
<li>当data为 ‘undefined’ 时，转换异常。为 ‘null’ 时，转换正常；</li>
<li>如果data不是key、value形式的字符串，是 ‘1234’ 这种只有一个值的字符串，也可以转换，转换后还是原值；</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>常用Java程序片段</title>
    <url>/2017/08/02/Java%20%E5%B8%B8%E7%94%A8Java%E7%A8%8B%E5%BA%8F%E7%89%87%E6%AE%B5/</url>
    <content><![CDATA[<h2 id="字符串-lt-gt-整型"><a href="#字符串-lt-gt-整型" class="headerlink" title="字符串 &lt;-&gt; 整型"></a>字符串 &lt;-&gt; 整型</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String a = String.valueOf(<span class="number">2</span>);		<span class="comment">//integer to numeric string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = Integer.parseInt(a);		<span class="comment">//numeric string to an int</span></span><br></pre></td></tr></table></figure>

<h2 id="字符串-gt-日期"><a href="#字符串-gt-日期" class="headerlink" title="字符串 -&gt; 日期"></a>字符串 -&gt; 日期</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Method 1</span></span><br><span class="line">java.util.Date = java.text.DateFormat.getDateInstance().parse(String date);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Method 2</span></span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(“dd.MM.yyyy”);</span><br><span class="line">Date date = sdf.parse(myString);</span><br></pre></td></tr></table></figure>

<h2 id="util-Date-gt-sql-Date"><a href="#util-Date-gt-sql-Date" class="headerlink" title="util.Date -&gt; sql.Date"></a>util.Date -&gt; sql.Date</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.Date utilDate = <span class="keyword">new</span> java.util.Date();</span><br><span class="line">java.sql.Date sqlDate = <span class="keyword">new</span> java.sql.Date(utilDate.getTime());</span><br></pre></td></tr></table></figure>

<h2 id="Array-gt-Map"><a href="#Array-gt-Map" class="headerlink" title="Array -&gt; Map"></a>Array -&gt; Map</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[][] countries = &#123;&#123; <span class="string">&quot;United States&quot;</span>, <span class="string">&quot;New York&quot;</span> &#125;, &#123; <span class="string">&quot;United Kingdom&quot;</span>, <span class="string">&quot;London&quot;</span> &#125;,  </span><br><span class="line">        &#123; <span class="string">&quot;Netherland&quot;</span>, <span class="string">&quot;Amsterdam&quot;</span> &#125;, &#123; <span class="string">&quot;Japan&quot;</span>, <span class="string">&quot;Tokyo&quot;</span> &#125;, &#123; <span class="string">&quot;France&quot;</span>, <span class="string">&quot;Paris&quot;</span> &#125;&#125;;</span><br><span class="line">        </span><br><span class="line">Map countryCapitals = ArrayUtils.toMap(countries);</span><br></pre></td></tr></table></figure>

<h2 id="向文件末尾添加内容"><a href="#向文件末尾添加内容" class="headerlink" title="向文件末尾添加内容"></a>向文件末尾添加内容</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BufferedWriter out = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	out = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(“fileName”, <span class="keyword">true</span>));</span><br><span class="line">	out.write(“aString”);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">	<span class="comment">//error processing code</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</span><br><span class="line">		out.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="得到当前方法的名字"><a href="#得到当前方法的名字" class="headerlink" title="得到当前方法的名字"></a>得到当前方法的名字</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String methodName = Thread.currentThread().getStackTrace()[<span class="number">1</span>].getMethodName();</span><br></pre></td></tr></table></figure>

<h2 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postMail</span><span class="params">( String recipients[ ], String subject, String message , String from)</span> <span class="keyword">throws</span> MessagingException  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">boolean</span> debug = <span class="keyword">false</span>;  </span><br><span class="line">  </span><br><span class="line">     <span class="comment">//Set the host smtp address  </span></span><br><span class="line">     Properties props = <span class="keyword">new</span> Properties();  </span><br><span class="line">     props.put(<span class="string">&quot;mail.smtp.host&quot;</span>, <span class="string">&quot;smtp.example.com&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// create some properties and get the default Session  </span></span><br><span class="line">    Session session = Session.getDefaultInstance(props, <span class="keyword">null</span>);  </span><br><span class="line">    session.setDebug(debug);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// create a message  </span></span><br><span class="line">    Message msg = <span class="keyword">new</span> MimeMessage(session);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// set the from and to address  </span></span><br><span class="line">    InternetAddress addressFrom = <span class="keyword">new</span> InternetAddress(from);  </span><br><span class="line">    msg.setFrom(addressFrom);  </span><br><span class="line">  </span><br><span class="line">    InternetAddress[] addressTo = <span class="keyword">new</span> InternetAddress[recipients.length];  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; recipients.length; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        addressTo[i] = <span class="keyword">new</span> InternetAddress(recipients[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    msg.setRecipients(Message.RecipientType.TO, addressTo);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Optional : You can also set your custom headers in the Email if you Want  </span></span><br><span class="line">    msg.addHeader(<span class="string">&quot;MyHeaderName&quot;</span>, <span class="string">&quot;myHeaderValue&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Setting the Subject and Content Type  </span></span><br><span class="line">    msg.setSubject(subject);  </span><br><span class="line">    msg.setContent(message, <span class="string">&quot;text/plain&quot;</span>);  </span><br><span class="line">    Transport.send(msg);  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="列出文件与目录"><a href="#列出文件与目录" class="headerlink" title="列出文件与目录"></a>列出文件与目录</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File dir = <span class="keyword">new</span> File(<span class="string">&quot;directoryName&quot;</span>);  </span><br><span class="line">  String[] children = dir.list();  </span><br><span class="line">  <span class="keyword">if</span> (children == <span class="keyword">null</span>) &#123;  </span><br><span class="line">      <span class="comment">// Either dir does not exist or is not a directory  </span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; children.length; i++) &#123;  </span><br><span class="line">          <span class="comment">// Get filename of file or directory  </span></span><br><span class="line">          String filename = children[i];  </span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// It is also possible to filter the list of returned files.  </span></span><br><span class="line">  <span class="comment">// This example does not return any files that start with `.&#x27;.  </span></span><br><span class="line">  FilenameFilter filter = <span class="keyword">new</span> FilenameFilter() &#123;  </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">return</span> !name.startsWith(<span class="string">&quot;.&quot;</span>);  </span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;;  </span><br><span class="line">  children = dir.list(filter);  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// The list of files can also be retrieved as File objects  </span></span><br><span class="line">  File[] files = dir.listFiles();  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// This filter only returns directories  </span></span><br><span class="line">  FileFilter fileFilter = <span class="keyword">new</span> FileFilter() &#123;  </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File file)</span> </span>&#123;  </span><br><span class="line">          <span class="keyword">return</span> file.isDirectory();  </span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;;  </span><br><span class="line">  files = dir.listFiles(fileFilter); </span><br></pre></td></tr></table></figure>

<h2 id="创建图片缩略图"><a href="#创建图片缩略图" class="headerlink" title="创建图片缩略图"></a>创建图片缩略图</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createThumbnail</span><span class="params">(String filename, <span class="keyword">int</span> thumbWidth, <span class="keyword">int</span> thumbHeight, <span class="keyword">int</span> quality, String outFilename)</span>  </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, FileNotFoundException, IOException  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="comment">// load image from filename  </span></span><br><span class="line">        Image image = Toolkit.getDefaultToolkit().getImage(filename);  </span><br><span class="line">        MediaTracker mediaTracker = <span class="keyword">new</span> MediaTracker(<span class="keyword">new</span> Container());  </span><br><span class="line">        mediaTracker.addImage(image, <span class="number">0</span>);  </span><br><span class="line">        mediaTracker.waitForID(<span class="number">0</span>);  </span><br><span class="line">        <span class="comment">// use this to test for errors at this point: System.out.println(mediaTracker.isErrorAny());  </span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">// determine thumbnail size from WIDTH and HEIGHT  </span></span><br><span class="line">        <span class="keyword">double</span> thumbRatio = (<span class="keyword">double</span>)thumbWidth / (<span class="keyword">double</span>)thumbHeight;  </span><br><span class="line">        <span class="keyword">int</span> imageWidth = image.getWidth(<span class="keyword">null</span>);  </span><br><span class="line">        <span class="keyword">int</span> imageHeight = image.getHeight(<span class="keyword">null</span>);  </span><br><span class="line">        <span class="keyword">double</span> imageRatio = (<span class="keyword">double</span>)imageWidth / (<span class="keyword">double</span>)imageHeight;  </span><br><span class="line">        <span class="keyword">if</span> (thumbRatio &lt; imageRatio) &#123;  </span><br><span class="line">            thumbHeight = (<span class="keyword">int</span>)(thumbWidth / imageRatio);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            thumbWidth = (<span class="keyword">int</span>)(thumbHeight * imageRatio);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// draw original image to thumbnail image object and  </span></span><br><span class="line">        <span class="comment">// scale it to the new size on-the-fly  </span></span><br><span class="line">        BufferedImage thumbImage = <span class="keyword">new</span> BufferedImage(thumbWidth, thumbHeight, BufferedImage.TYPE_INT_RGB);  </span><br><span class="line">        Graphics2D graphics2D = thumbImage.createGraphics();  </span><br><span class="line">        graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);  </span><br><span class="line">        graphics2D.drawImage(image, <span class="number">0</span>, <span class="number">0</span>, thumbWidth, thumbHeight, <span class="keyword">null</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// save thumbnail image to outFilename  </span></span><br><span class="line">        BufferedOutputStream out = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(outFilename));  </span><br><span class="line">        JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);  </span><br><span class="line">        JPEGEncodeParam param = encoder.getDefaultJPEGEncodeParam(thumbImage);  </span><br><span class="line">        quality = Math.max(<span class="number">0</span>, Math.min(quality, <span class="number">100</span>));  </span><br><span class="line">        param.setQuality((<span class="keyword">float</span>)quality / <span class="number">100.0f</span>, <span class="keyword">false</span>);  </span><br><span class="line">        encoder.setJPEGEncodeParam(param);  </span><br><span class="line">        encoder.encode(thumbImage);  </span><br><span class="line">        out.close();  </span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>

<h2 id="按照规则取目录下的文件名数组"><a href="#按照规则取目录下的文件名数组" class="headerlink" title="按照规则取目录下的文件名数组"></a>按照规则取目录下的文件名数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File rootFile = <span class="keyword">new</span> File(<span class="string">&quot;/XX/XX&quot;</span>);</span><br><span class="line">String[] dirList = rootFile.list(<span class="keyword">new</span> FilenameFilter() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//XXX开通的文件</span></span><br><span class="line">        <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;XXX&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>lombok应用</title>
    <url>/2018/08/30/Java-lombok%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>lombok的方面之处就不多说了，这里列一下使用中遇到的一些问题。</p>
<h1 id="Builder继承"><a href="#Builder继承" class="headerlink" title="@Builder继承"></a>@Builder继承</h1><p>@Builder无法继承。所以当我们同时有父类、子类，无法都使用@Builder。</p>
<p>解决方案：父类不用@Builder，子类构造函数上加@Builder</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String fatherName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Children</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String childName;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Children</span><span class="params">(String fatherName, String childName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(fatherName);</span><br><span class="line">        <span class="keyword">this</span>.childName = childName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点：</p>
<ol>
<li>父类无法使用builder()；</li>
<li>子类的构造得是全参构造；</li>
</ol>
<h1 id="Data继承"><a href="#Data继承" class="headerlink" title="@Data继承"></a>@Data继承</h1><p>子类继承时，需加@EqualsAndHashCode(callSuper=true)</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>Java常见报错</title>
    <url>/2018/03/06/Java%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h3 id="List-Arrays-asList-后add或remove出现UnsupportedOperationException"><a href="#List-Arrays-asList-后add或remove出现UnsupportedOperationException" class="headerlink" title="List(Arrays.asList)后add或remove出现UnsupportedOperationException"></a>List(Arrays.asList)后add或remove出现UnsupportedOperationException</h3><p>当使用Arrays.asList()，将Array转换为List后，如果使用List.add()、List.remove()方法，会报改错。</p>
<p>根本原因是转换后创建的对象是一个ArrayList对象，该对象集成了AbstractList，没有实现add、remove方法，所以使用的时候会报错。</p>
<p>改正：</p>
<p>new ArrayList&lt;&gt;(Arrays.asList());</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/2017/07/29/Java%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul>
<li><a href="http://blog.csdn.net/mmc_maodun/article/category/1823903">兰亭风雨|深入Java虚拟机</a></li>
<li><a href="http://blog.csdn.net/chaofanwei/article/details/19418753">星空的专栏|深入理解Java虚拟机</a></li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Jpa中使用@Scheduled报no transaction is in progress</title>
    <url>/2020/01/13/Jpa%E4%B8%AD%E4%BD%BF%E7%94%A8-Scheduled%E6%8A%A5no-transaction-is-in-progress/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>环境：springboot+jpa</p>
<p>某个接口使用@Scheduled定时调度，内部方法中使用了jpa的saveandflush方法，方法执行时报异常’no transaction in progress’。</p>
<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol>
<li>查看saveandflush实现，发现jpa内部实现都添加了事务@Trainsactional；</li>
<li>不用@Scheduled注解时，直接调用方法正常；</li>
</ol>
<p>所以基本确认通过@Scheduled创建的线程，没有继承上下文中的事务管理器。</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在@Scheduled注解的地方注入事务管理器。</p>
<p><a href="https://stackoverflow.com/questions/33248846/spring4-scheduled-transaction-throws-no-transaction-is-in-progress-at-flush-fo">https://stackoverflow.com/questions/33248846/spring4-scheduled-transaction-throws-no-transaction-is-in-progress-at-flush-fo</a></p>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>JPA</tag>
      </tags>
  </entry>
  <entry>
    <title>通过K8S传参创建Job</title>
    <url>/2019/07/25/K8S/</url>
    <content><![CDATA[<h1 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h1><p>编写Dockerfile</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的镜像是python项目，需要传参进去，设置环境变量PARAMS</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> python main.py -p <span class="variable">$PARAMS</span></span></span><br></pre></td></tr></table></figure>

<p>然后打包镜像</p>
<h1 id="编写yaml"><a href="#编写yaml" class="headerlink" title="编写yaml"></a>编写yaml</h1><p>我要跑的job是一个TensorFlow训练服务，只想跑在GPU的机子上，同时避免为了其他服务跑到GPU上</p>
<p>所以在GPU机子上打了标签、污点</p>
<p>在Job里需要选择标签、容忍</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">myJob</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">myJob</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">      <span class="comment"># 设置容忍</span></span><br><span class="line">      <span class="attr">tolerations:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;app&quot;</span></span><br><span class="line">          <span class="attr">operator:</span> <span class="string">&quot;Equal&quot;</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;GPU&quot;</span></span><br><span class="line">          <span class="attr">effect:</span> <span class="string">&quot;NoSchedule&quot;</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">myJob</span></span><br><span class="line">        <span class="comment"># 设置环境变量，传值</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PARAMS</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 镜像地址</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">hub.xxxxx/</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nas</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/nas</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nas</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/nas</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">&quot;GPU&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后运行该yaml</p>
<p><code>kubectl apply -f myJob.yaml</code></p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>K8S部署Nacos节点列表为空</title>
    <url>/2020/11/02/K8S%E9%83%A8%E7%BD%B2nacos%E8%8A%82%E7%82%B9%E5%88%97%E8%A1%A8%E4%B8%BA%E7%A9%BA/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​    最新因为项目需要，需要搭建一个配置中心，nacos相对来说教简单，而且还赠送一个注册中心，买一送一，业界良心啊，就它了。过程就不赘述了，下载<code>nacos-mysql</code>、<code>nacos-server</code>镜像，编写好helm模板后直接部署。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h2><p>​    噼里啪啦一顿操作后，输入账号登录nacos-console，体验了一下，配置中心增删改查都正常，但是集群管理中的节点列表却是空的。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><ol>
<li>第一反应是查看服务的状态与日志，<code>kubectl log xx</code>和<code>kubectl describe po xx</code>看到都是成功的状态。</li>
</ol>
<p>​    2. 先验证下配置中心吧，修改代码，加载配置中心的配置，成功。所以验证只有注册中心有问题。</p>
<p>​    3. 进入到nacos-server pod，查看日志。<code>/home/nacos/logs</code>目录下主要分2类日志，<code>config-*.log</code>和<code>naming-*.log</code>，分别对应配置中心的日志和注册中心的日志。</p>
<ol start="4">
<li><p>先看naming-raft.log，这个是选举日志，发现果然有问题。</p>
<p><code>WARN [IS LEADER] no leader is available now!</code></p>
</li>
<li><p>nacos在创建过程中，会将每个节点的地址存放在<code>/home/nacos/config/cluster.conf</code>，查看该文件，3个pod的内部域名也是正常。进到pod内部，telnet其余2台的域名、端口也是通的。</p>
</li>
</ol>
<p>到这基本验证了pod创建是成功的，且相互之间也可以访问。问题应该出在3台pod在竞选时，没有使用cluster.conf中设置的内部域名，而是通过其他方式访问，导致相互之间访问失败。这时候目标转向service。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>然后到网上搜了下，有的说将service设置为<code>ClusterIP: none</code>，改为headless service。尝试了下，果然好了。</p>
<h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>​    为什么改为headless service就好了呢？</p>
<p>​    因为默认的Service的type是ClusterIP，会在创建service的时候，为service创建ip，所有访问该service的请求，都会经过该ip然后做负载均衡。如果设置为none，就不会为该service分配ip，只能通过pod的域名访问每个pod。一般pod间需要相互访问的服务都采用这种模式，比如zk等。</p>
<p>​    通过<code>kuectl get svc</code>可以查看所有的service。也可以通过<code>kubectl describe svc xxx</code>，查看每个service的详情。</p>
<p>​    </p>
<p>​    </p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-1143.最长公共子序列</title>
    <url>/2020/12/09/LeetCode-1143-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<p>​    做这道题花了点时间，记录下。</p>
<p>注：子序列可以不连续。子串一定是连续的。</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定两个字符串 <code>text1</code> 和 <code>text2</code>，返回这两个字符串的最长公共子序列的长度。</p>
<p>一个字符串的 <em>子序列</em> 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。<br>例如，”ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。两个字符串的「公共子序列」是这两个字符串所共同拥有的子序列。</p>
<p>若这两个字符串没有公共子序列，则返回 0。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">text1</span> = <span class="string">&quot;abcde&quot;</span>, <span class="attr">text2</span> = <span class="string">&quot;ace&quot;</span> </span><br><span class="line">输出：<span class="number">3</span>  </span><br><span class="line">解释：最长公共子序列是 <span class="string">&quot;ace&quot;</span>，它的长度为 <span class="number">3</span>。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">text1</span> = <span class="string">&quot;abc&quot;</span>, <span class="attr">text2</span> = <span class="string">&quot;abc&quot;</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：最长公共子序列是 <span class="string">&quot;abc&quot;</span>，它的长度为 <span class="number">3</span>。</span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">text1</span> = <span class="string">&quot;abc&quot;</span>, <span class="attr">text2</span> = <span class="string">&quot;def&quot;</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：两个字符串没有公共子序列，返回 <span class="number">0</span>。</span><br></pre></td></tr></table></figure>

<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="Round-1（失败）"><a href="#Round-1（失败）" class="headerlink" title="Round 1（失败）"></a>Round 1（失败）</h2><p>思路：</p>
<p>既然获取公共子序列，那以短的句子为基础，遍历每个字符，判断在长句子中是否存在，如果存在则保存当前字符。最终得到公共子序列中。任意一个字符串结束都算结束。</p>
<p>乍一看这个思路没问题，实际不然。缺陷在下方也有说明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=1143 lang=java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [1143] 最长公共子序列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(text1 == <span class="keyword">null</span> || text2 == <span class="keyword">null</span></span><br><span class="line">            || text1.isEmpty() || text2.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 判断2个句子长短，以短句为基准，挨个判断每个字符是否存在长句中，如果存在，则为相同字符，保存。最后得出最长的字符组合；</span></span><br><span class="line"><span class="comment">         * 这个算法有个致命缺陷，如果短句中间某个字符恰好等于长句的最后1个字符，那对比就会提前结束，得到错误结果</span></span><br><span class="line"><span class="comment">         * 比如有2个字符串：</span></span><br><span class="line"><span class="comment">         * mhunuzqrkzsnidwbun</span></span><br><span class="line"><span class="comment">         * szulspmhwpazoxijwbq</span></span><br><span class="line"><span class="comment">         * 按照该算法，得到的结果是mhzq，但是最长的是mhziwb</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         String longString = <span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">char</span>[] array = <span class="keyword">null</span>;</span><br><span class="line">         <span class="keyword">int</span> res = <span class="number">0</span>;    <span class="comment">// 保存最终结果</span></span><br><span class="line">         <span class="keyword">int</span> tempResInt =<span class="number">0</span>;  <span class="comment">//中间过程长度</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">// 将短句拆分为数组，长句保存到longString，用于下面比对</span></span><br><span class="line">         <span class="keyword">if</span>(text1.length()&lt;text2.length()) &#123;</span><br><span class="line">             array = text1.toCharArray();</span><br><span class="line">             longString = text2;</span><br><span class="line">         &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">             array = text2.toCharArray();</span><br><span class="line">             longString = text1;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 挨个遍历短句数组中的元素</span></span><br><span class="line">         <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;array.length; i++)&#123;</span><br><span class="line">             tempResInt = <span class="number">0</span>;</span><br><span class="line">             StringBuilder tempResString = <span class="keyword">new</span> StringBuilder() ;</span><br><span class="line">             String tempString = longString;</span><br><span class="line">             <span class="comment">// 从当前字符开始</span></span><br><span class="line">             <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j&lt;array.length; j++ ) &#123;</span><br><span class="line">                 <span class="keyword">char</span> cur = array[j];</span><br><span class="line">                 <span class="comment">// 判断长句剩下的子串中是否存在当前字符，有的话计数</span></span><br><span class="line">                 <span class="keyword">if</span> (tempString.indexOf(cur) != -<span class="number">1</span>) &#123;</span><br><span class="line">                     tempResInt++;</span><br><span class="line">                     tempResString.append(cur);</span><br><span class="line">                     tempString = tempString.substring(tempString.indexOf(cur)+<span class="number">1</span>);</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             System.out.println(<span class="string">&quot;tempResInt: &quot;</span>+ tempResInt + <span class="string">&quot;, tempResString: &quot;</span>+tempResString.toString());</span><br><span class="line">             <span class="comment">// 保存最长的结果</span></span><br><span class="line">             res = Math.max(tempResInt, res);</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.println(<span class="string">&quot;length: &quot;</span>+ res + <span class="string">&quot;, tempResInt: &quot;</span>);</span><br><span class="line">         <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Round-2（递归）"><a href="#Round-2（递归）" class="headerlink" title="Round 2（递归）"></a>Round 2（递归）</h2><p>思路：</p>
<p>动态规划的思路解题。推荐看下labuladong的算法小抄。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=1143 lang=java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [1143] 最长公共子序列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(text1 == <span class="keyword">null</span> || text2 == <span class="keyword">null</span></span><br><span class="line">            || text1.isEmpty() || text2.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 2. 递归法</span></span><br><span class="line"><span class="comment">         * 关键是梳理出来递归方法，哪些状态要在递归里处理</span></span><br><span class="line"><span class="comment">         * 递归法耗时太长</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         <span class="keyword">char</span>[] arr1 = text1.toCharArray();</span><br><span class="line">         <span class="keyword">char</span>[] arr2 = text2.toCharArray();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 从尾部往前逐个字符对比。数组从0开始，所以长度减1</span></span><br><span class="line">         <span class="keyword">return</span> recursion(arr1, arr2, arr1.length-<span class="number">1</span>, arr2.length-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递归数组，状态变化体现在参数中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">recursion</span><span class="params">(<span class="keyword">char</span>[] text1, <span class="keyword">char</span>[] text2, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">         <span class="comment">// 任意字符数组遍历完，结束</span></span><br><span class="line">         <span class="keyword">if</span> (i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span>) &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 如果字符相等，同时进1。结果加1</span></span><br><span class="line">         <span class="keyword">if</span> (text1[i] == text2[j]) &#123;</span><br><span class="line">             <span class="keyword">return</span> recursion(text1, text2, i-<span class="number">1</span>, j-<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">// 不相等，一个句子往前进1，另外一个不变。2种情况取最长</span></span><br><span class="line">             <span class="keyword">return</span> Math.max(recursion(text1, text2, i-<span class="number">1</span>, j), recursion(text1, text2, i, j-<span class="number">1</span>));</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Round-3（数组存储结果）"><a href="#Round-3（数组存储结果）" class="headerlink" title="Round 3（数组存储结果）"></a>Round 3（数组存储结果）</h2><p>思路：</p>
<p>与递归法类似，区别在于，将每种情况的结果存放到数组中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=1143 lang=java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [1143] 最长公共子序列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(text1 == <span class="keyword">null</span> || text2 == <span class="keyword">null</span></span><br><span class="line">            || text1.isEmpty() || text2.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3. dp数组法</span></span><br><span class="line"><span class="comment">         * 参照递归法，将每个步骤的使用数组存储起来</span></span><br><span class="line"><span class="comment">         * 算法过程与递归相同</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] arr1 = text1.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] arr2 = text2.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> length1 = text1.length();</span><br><span class="line">        <span class="keyword">int</span> length2 = text2.length();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建dp数组，保存结果。长度多加1位，因为存在dp[0][j]、dp[i][0]的情况，这种情况值都为0</span></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length1+<span class="number">1</span>][length2+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从1开始，是因为当i、j从0开始时，i-1会小于0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length1+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; length2+<span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr1[i-<span class="number">1</span>] == arr2[j-<span class="number">1</span>]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j-<span class="number">1</span>], dp[i-<span class="number">1</span>][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回2个最长字符串的结果</span></span><br><span class="line">        <span class="keyword">return</span> dp[length1][length2];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-300.最长上升子序列</title>
    <url>/2020/12/14/LeetCode-300-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p>
<p><strong>示例:</strong></p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">10,9,2,5</span>,<span class="number">3,7,101,18</span>]</span><br><span class="line">输出: <span class="number">4</span> </span><br><span class="line">解释: 最长的上升子序列是 [<span class="number">2,3,7,101</span>]，它的长度是 <span class="number">4</span>。</span><br></pre></td></tr></table></figure>

<p><strong>说明:</strong></p>
<ul>
<li>可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。</li>
<li>你算法的时间复杂度应该为 O(<em>n2</em>) 。</li>
</ul>
<p><strong>进阶:</strong> 你能将算法的时间复杂度降低到 O(<em>n</em> log <em>n</em>) 吗?</p>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="Round-1（失败）"><a href="#Round-1（失败）" class="headerlink" title="Round 1（失败）"></a>Round 1（失败）</h2><p>思路：</p>
<p>解子序列问题要用动态规划，解动态规划先写出来递归解法，然后再转换成dp数组存储中间变量。</p>
<p>递归函数如下，可惜不对。dp(nums, i)的值，并不等于dp(nums, i-1)+1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span> &amp;&amp; nums[i]&gt;nums[i-<span class="number">1</span>]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nums[i]&gt;nums[i-<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> dp(nums, i-<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dp(nums, i-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现不对后，然后换了种思路，尝试将数组转换成矩阵的方式，即横轴、纵轴皆为这个数组，然后对比大小。但是这种也不对，比出来的大小值彼此间没有任何关联。</p>
<p>归根结底，是没有找到不同元素对应值之间的关系，即假设：y(x)=f(x)，y(x+1)=f(x+1)时，有y(x+1)=F[y(x)]，要找到F()这个函数做的事情。（f()、F()都是函数，初中数学没忘吧）</p>
<h2 id="Round-2"><a href="#Round-2" class="headerlink" title="Round 2"></a>Round 2</h2><p>解：当前元素对应的值，等于前面比当前元素小对应的值中最大的值，加1</p>
<p>即，F[y(x)]=Max{y(0),y(1)…y(x-1)}+1，所以 F[y(x)]=Max{f(0),f(1)…f(x-1)}+1</p>
<p>也就是， F[x]=Max{f(0),f(1)…f(x-1)}+1</p>
<p>x是任意值，所以f()和F()等价，得：f(x)=Max{f(0),f(1)…f(x-1)}+1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=300 lang=java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [300] 最长上升子序列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 用dp数组存储每个元素的值</span></span><br><span class="line"><span class="comment">         * 最终取最大的值</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         * 其中关键是找到当前元素对应的值，与前一个元素对应的值之间的关系</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> length = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[length+<span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算每个元素对应的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="comment">// 当前元素的值，是在前面比他小的最大值+1</span></span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            res = Math.max(res, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-34.在排序数组中查找元素的第一个和最后一个位置</title>
    <url>/2020/12/16/LeetCode-34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个按照升序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。找出给定目标值在数组中的开始位置和结束位置。</p>
<p>如果数组中不存在目标值 <code>target</code>，返回 <code>[-1, -1]</code>。</p>
<p><strong>进阶：</strong></p>
<ul>
<li>你可以设计并实现时间复杂度为 <code>O(log n)</code> 的算法解决此问题吗？</li>
</ul>
<p><strong>示例 1：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="comment">[5,7,7,8,8,10]</span>, target = 8</span><br><span class="line">输出：<span class="comment">[3,4]</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="comment">[5,7,7,8,8,10]</span>, target = 6</span><br><span class="line">输出：<span class="comment">[-1,-1]</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="comment">[]</span>, target = 0</span><br><span class="line">输出：<span class="comment">[-1,-1]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= nums.length &lt;= 105</code></li>
<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>
<li><code>nums</code> 是一个非递减数组</li>
<li><code>-109 &lt;= target &lt;= 109</code></li>
</ul>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="Round-1"><a href="#Round-1" class="headerlink" title="Round 1"></a>Round 1</h2><p>在最后把常规二分查找函数也写出来了。</p>
<p>便于对比左边界二分查找、右边界二分查找与常规二分查找的差异。</p>
<p>左边界二分查找与常规二分查找差异：</p>
<ol>
<li>当nums[mid]=target时，左边界继续循环；</li>
<li>循环结束时，左边界判断是否越界；</li>
</ol>
<p>右边界二分查找与常规二分查找差异：</p>
<ol>
<li>mid计算时多加1，mid = left+(right-left+1)/2，这样不管nums数组是奇数还是偶数个，都会向上取整；</li>
<li>当nums[mid]=target时，右边界继续循环；</li>
<li>循环结束时，右边界判断是否越界；</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=34 lang=java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [34] 在排序数组中查找元素的第一个和最后一个位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(nums.length&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> leftRes = leftBoundaryBinarySearch(nums, target);</span><br><span class="line">        <span class="keyword">int</span> rightRes = rightBoundaryBinarySearch(nums, target);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;leftRes, rightRes&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 左侧边界元素，即找到第一个匹配的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">leftBoundaryBinarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = <span class="number">0</span>, left = <span class="number">0</span>, right = nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right) &#123;</span><br><span class="line">            mid = left + (right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target&gt;nums[mid]) &#123;</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid]) &#123;</span><br><span class="line">                right = mid-<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target == nums[mid]) &#123;</span><br><span class="line">                <span class="comment">// 左侧有可能还有相等元素，设置为右闭，继续查找</span></span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检测越界、没找到值</span></span><br><span class="line">        <span class="keyword">if</span>(right&lt;<span class="number">0</span> || left&gt;=nums.length || target!=nums[left]) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 右侧边界元素，即找到最后一个匹配的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rightBoundaryBinarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=<span class="number">0</span>, left=<span class="number">0</span>, right=nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right) &#123;</span><br><span class="line">            <span class="comment">// 加1，使mid偏右，避免陷入死循环。如下标4、5的值相同时，mid一直为4</span></span><br><span class="line">            mid = left+(right-left+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target&gt;nums[mid])&#123;</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">                right = mid-<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target==nums[mid])&#123;</span><br><span class="line">                <span class="comment">// 右侧有可能还有相等元素，设置为左闭，继续查找</span></span><br><span class="line">                left=mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      	<span class="comment">// 检测越界、没找到值</span></span><br><span class="line">        <span class="keyword">if</span>(right&lt;<span class="number">0</span> || left&gt;=nums.length || target!=nums[left]) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 常规二分查找，找到即返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = <span class="number">0</span>, left = <span class="number">0</span>, right = nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left&lt;right) &#123;</span><br><span class="line">            mid = left + (right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target &lt; nums[mid]) &#123;</span><br><span class="line">                <span class="comment">// 闭区间，所以right要减1</span></span><br><span class="line">                right = mid-<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target &gt; nums[mid]) &#123;</span><br><span class="line">                <span class="comment">// 闭区间，所以left要加1</span></span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target == nums[mid]) &#123;</span><br><span class="line">                <span class="comment">// 匹配到，直接return</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只有一个元素，没有进入循环时</span></span><br><span class="line">        <span class="keyword">if</span>(nums[left] != target) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-5.最长回文子串</title>
    <url>/2020/12/17/LeetCode-5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。你可以假设 <code>s</code> 的最大长度为 1000。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">输入: <span class="string">&quot;babad&quot;</span></span><br><span class="line">输出: <span class="string">&quot;bab&quot;</span></span><br><span class="line">注意: <span class="string">&quot;aba&quot;</span> 也是一个有效答案。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">输入: <span class="string">&quot;cbbd&quot;</span></span><br><span class="line">输出: <span class="string">&quot;bb&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="Round-1（常规）"><a href="#Round-1（常规）" class="headerlink" title="Round 1（常规）"></a>Round 1（常规）</h2><p>常规解法，基本没用到算法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=5 lang=java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [5] 最长回文子串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s.length()&lt;=<span class="number">1</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">char</span>[] arr = s.toCharArray();</span><br><span class="line">        String resString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历每个字符</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">            String currString = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            String currString2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 假设当前字符左右两两回文，如abcba</span></span><br><span class="line">            <span class="comment">// 保存当前字符</span></span><br><span class="line">            currString+=arr[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="comment">// 判断左右两边字符</span></span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span>+j&lt;arr.length &amp;&amp; i-<span class="number">1</span>-j&gt;=<span class="number">0</span> &amp;&amp; arr[i+<span class="number">1</span>+j]==arr[i-<span class="number">1</span>-j])&#123;</span><br><span class="line">                    <span class="comment">// 不要使用StringBuilder的append，不然你会哭的</span></span><br><span class="line">                    <span class="comment">// 拼接左、中、右字符</span></span><br><span class="line">                    currString=arr[i+<span class="number">1</span>+j]+currString+arr[i-<span class="number">1</span>-j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果不连续，跳出</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 假设当前字符与前面一个字符两两回文，如 abba</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="comment">// </span></span><br><span class="line">                <span class="keyword">if</span>(i+j&lt;arr.length &amp;&amp; i-<span class="number">1</span>-j&gt;=<span class="number">0</span> &amp;&amp; arr[i+j]==arr[i-<span class="number">1</span>-j])&#123;</span><br><span class="line">                    <span class="comment">// 拼接左、中、右字符</span></span><br><span class="line">                    currString2=arr[i+j]+currString2+arr[i-<span class="number">1</span>-j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果不连续，跳出</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 找极大值</span></span><br><span class="line">            <span class="keyword">if</span>(currString.length()&gt;resString.length()) &#123;</span><br><span class="line">                resString = currString;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(currString2.length()&gt;resString.length()) &#123;</span><br><span class="line">                resString = currString2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

<p>中间遇到2个坑：</p>
<ol>
<li>刚开始，currString使用StringBuilder，会发现很多重复元素。原因是append()都是在原对象上操作的；</li>
<li>刚开始打算把2种情况合并到一个for循环中，调了好久发现不行，二者对的结果会相互影响。比如不连续时要跳出循环；</li>
</ol>
<h2 id="Round-2（双指针）"><a href="#Round-2（双指针）" class="headerlink" title="Round 2（双指针）"></a>Round 2（双指针）</h2><p>上面解法的着力点在单个字符，循环时以某一个字符为主，每次只移动1个字符。</p>
<p>还有一种解法是双指针，每次同时移动2个字符。这也是回文题的特点。</p>
<p>重点关注回文函数中的边界，以及最终如何截取子串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=5 lang=java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [5] 最长回文子串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 双指针，left、right2个指针同时移动</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String resString = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="comment">// 左右指针在同一位置</span></span><br><span class="line">            String leftRes = plalindrome(s, i, i);</span><br><span class="line">            <span class="comment">// right指针在left指针后</span></span><br><span class="line">            String rightRes = plalindrome(s, i, i+<span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(leftRes.length()&gt;resString.length()) &#123;</span><br><span class="line">                resString = leftRes;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(rightRes.length()&gt;resString.length()) &#123;</span><br><span class="line">                resString = rightRes;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回文函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String  <span class="title">plalindrome</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] arr = s.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断2个指针对应字符是否相等</span></span><br><span class="line">        <span class="comment">// 主要left、right的边界</span></span><br><span class="line">        <span class="keyword">while</span>(left&gt;=<span class="number">0</span> &amp;&amp; right&lt;arr.length &amp;&amp; arr[left] == arr[right])&#123;</span><br><span class="line">            left--;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// substring(headIndex, tailIndex)，注意2个入参，第二个入参只能是尾节点的下标，不是长度，而且是下一个位置的下标。比如s=&quot;abc&quot;，获取完整字符时s.substring(0, 3)，实际字符c的下标是2</span></span><br><span class="line">        <span class="comment">// 由于while先执行再判断，所以当跳出while循环时，left、right都已经越界了</span></span><br><span class="line">        <span class="comment">// 所以left需要加1，right不用减1，原因见上</span></span><br><span class="line">        <span class="keyword">if</span>(left+<span class="number">1</span> &lt; right)</span><br><span class="line">            <span class="keyword">return</span> s.substring(left+<span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-516.最长回文子序列</title>
    <url>/2020/12/21/LeetCode-516-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个字符串 <code>s</code> ，找到其中最长的回文子序列，并返回该序列的长度。可以假设 <code>s</code> 的最大长度为 <code>1000</code> 。</p>
<p><strong>示例 1:</strong><br>输入:</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;bbbab&quot;</span></span><br></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<p>一个可能的最长回文子序列为 “bbbb”。</p>
<p><strong>示例 2:</strong><br>输入:</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;cbbd&quot;</span></span><br></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<p>一个可能的最长回文子序列为 “bb”。</p>
<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= s.length &lt;= 1000</code></li>
<li><code>s</code> 只包含小写英文字母</li>
</ul>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="Round-1（失败）"><a href="#Round-1（失败）" class="headerlink" title="Round 1（失败）"></a>Round 1（失败）</h2><p>思路：</p>
<h2 id="Round-2（递归）"><a href="#Round-2（递归）" class="headerlink" title="Round 2（递归）"></a>Round 2（递归）</h2><p>复用最长回文子串的思路。区别在于回文函数。</p>
<p>时间复杂度O(N^N)，效率并不高。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @lc app=leetcode.cn id=516 lang=java</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [516] 最长回文子序列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @lc code=start</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestPalindromeSubseq</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 2. 复用最长回文子串的思路</span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">char</span>[] arr = s.toCharArray();</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> leftRes = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> rightRes = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            leftRes = plalindrome(arr, i, i);</span><br><span class="line">            rightRes = plalindrome(arr, i, i+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(leftRes&gt;res) res = leftRes;</span><br><span class="line">            <span class="keyword">if</span>(rightRes&gt;res) res = rightRes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">plalindrome</span><span class="params">(<span class="keyword">char</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 判断越界</span></span><br><span class="line">        <span class="keyword">if</span>(left&lt;<span class="number">0</span> || right&gt;arr.length-<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 字符相同时，判断是否为同一字符</span></span><br><span class="line">        <span class="keyword">if</span>(arr[left] == arr[right])&#123;</span><br><span class="line">            <span class="keyword">if</span>(left==right) </span><br><span class="line">                <span class="keyword">return</span> plalindrome(arr, left-<span class="number">1</span>, right+<span class="number">1</span>) +<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                <span class="keyword">return</span> plalindrome(arr, left-<span class="number">1</span>, right+<span class="number">1</span>) +<span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不同时，取最大</span></span><br><span class="line">            <span class="keyword">return</span> Math.max(plalindrome(arr, left-<span class="number">1</span>, right), plalindrome(arr, left, right+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @lc code=end</span></span><br></pre></td></tr></table></figure>



<h2 id="Round-3（）"><a href="#Round-3（）" class="headerlink" title="Round 3（）"></a>Round 3（）</h2>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-704.二分查找</title>
    <url>/2020/12/15/LeetCode-704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code> ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: nums = [-1,0,3,5,9,12], target = 9</span></span><br><span class="line"><span class="section">输出: 4</span></span><br><span class="line"><span class="section">解释: 9 出现在 nums 中并且下标为 4</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: nums = [-1,0,3,5,9,12], target = 2</span></span><br><span class="line"><span class="section">输出: -1</span></span><br><span class="line"><span class="section">解释: 2 不存在 nums 中因此返回 -1</span></span><br></pre></td></tr></table></figure>

<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><h2 id="Round-1（常规）"><a href="#Round-1（常规）" class="headerlink" title="Round 1（常规）"></a>Round 1（常规）</h2><p>需要注意的几个点：</p>
<ol>
<li>mid = left + (right-left)/2，等价于mid=(left+right)/2；</li>
<li>每个if条件中对比的值，及大于、小于符号；</li>
<li>mid加1、减一；</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line">				</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            mid = left + (right-left)/<span class="number">2</span>;</span><br><span class="line">          	<span class="comment">// mid加减1，因为当前元素已经对比过了。否则while条件可能会出现死循环</span></span><br><span class="line">            <span class="comment">// 比如nums = [-1,0,3,5,9,12], target = 2时</span></span><br><span class="line">            <span class="keyword">if</span> (target &gt; nums[mid]) &#123;</span><br><span class="line">                left = mid+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[mid]) &#123;</span><br><span class="line">                right = mid-<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target == nums[mid])&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums[left] != target) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2018/01/16/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//查看前1000行</span><br><span class="line">head -n 1000 filename</span><br><span class="line">//查看后1000行</span><br><span class="line">tail -n 1000 filename</span><br><span class="line">//查看1000之后</span><br><span class="line">tail -n +1000 filename</span><br><span class="line">//实时查看</span><br><span class="line">tail -f filename</span><br><span class="line"></span><br><span class="line">//查看最后1000行数据</span><br><span class="line">cat filename | tail -n 1000</span><br><span class="line">//查看1000到3000行的数据</span><br><span class="line">cat file | head -n 3000 | tail -n +1000</span><br></pre></td></tr></table></figure>
<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//匹配文件中所有foo关键字上下1000行</span><br><span class="line">grep -C 1000 foo filename</span><br><span class="line"></span><br><span class="line">//匹配文件中所有foo关键字及前1000行</span><br><span class="line">grep -B 1000 foo filename</span><br><span class="line"></span><br><span class="line">//匹配文件中所有foo关键字及后1000行</span><br><span class="line">grep -A 1000 foo filename</span><br></pre></td></tr></table></figure>
<h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//显示第1000到3000行的数据</span><br><span class="line">sed -n <span class="string">&#x27;1000,3000p&#x27;</span> filename</span><br></pre></td></tr></table></figure>

<h2 id="find-文件搜索"><a href="#find-文件搜索" class="headerlink" title="find-文件搜索"></a>find-文件搜索</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -name filename</span><br></pre></td></tr></table></figure>

<h2 id="ps-查找进程"><a href="#ps-查找进程" class="headerlink" title="ps-查找进程"></a>ps-查找进程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -ef | grep XXX</span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -9 pid</span><br></pre></td></tr></table></figure>

<h2 id="scp-跨服务器拷贝"><a href="#scp-跨服务器拷贝" class="headerlink" title="scp-跨服务器拷贝"></a>scp-跨服务器拷贝</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp file user@localhost:dir</span><br></pre></td></tr></table></figure>

<h2 id="tar-压缩、解压"><a href="#tar-压缩、解压" class="headerlink" title="tar-压缩、解压"></a>tar-压缩、解压</h2><ol>
<li>压缩</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#只打包</span></span><br><span class="line">tar -cvf file.tar file</span><br><span class="line"><span class="comment">#使用gzip压缩，再打包</span></span><br><span class="line">tar -czf file.tar.gz file</span><br><span class="line"><span class="comment">#使用bzip2压缩，再打包</span></span><br><span class="line">tar -cjf file.tar.bz2 file</span><br><span class="line"><span class="comment">#使用compress压缩，再打包</span></span><br><span class="line">tar -cZf file.tar.Z file</span><br><span class="line"></span><br><span class="line"><span class="comment">#rar压缩,需先安装rar服务</span></span><br><span class="line">rar a file.rar file</span><br><span class="line"><span class="comment">#zip压缩，需先安装zip服务</span></span><br><span class="line">zip file.zip file</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>解压</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解压常规包</span></span><br><span class="line">tar -xvf file.tar</span><br><span class="line"><span class="comment">#解压gzip包</span></span><br><span class="line">tar -xzvf file.tar.gz</span><br><span class="line"><span class="comment">#解压bzip2包</span></span><br><span class="line">tar -xjvf file.tar.bz2</span><br><span class="line"><span class="comment">#解压compress包</span></span><br><span class="line">tar -xZvf file.tar.Z</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压rar</span></span><br><span class="line">unrar e file.rar</span><br><span class="line"><span class="comment">#解压zip</span></span><br><span class="line">unzip file.zip</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>参数解析</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#必须参数，且只能选一个</span></span><br><span class="line">-c:	建立压缩文档</span><br><span class="line">-x:	解压</span><br><span class="line">-t:	查看文件</span><br><span class="line">-r:	压缩文件末尾追加文件</span><br><span class="line">-u:	更新原压缩文件中的文件</span><br><span class="line"></span><br><span class="line"><span class="comment">#可选参数，根据需要添加</span></span><br><span class="line">-z: gzip</span><br><span class="line">-j:	bz2</span><br><span class="line">-Z:	compress</span><br><span class="line">-v:	显示所有过程</span><br><span class="line">-O:	将文件解开到标准输出</span><br><span class="line"></span><br><span class="line"><span class="comment">#必选参数</span></span><br><span class="line">-f: 在所有参数最后，后面接文档名</span><br></pre></td></tr></table></figure>

<h2 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#源文件指要被链接的文件，目标文件指新建的软连接</span></span><br><span class="line">ln -s 源文件 目标文件</span><br></pre></td></tr></table></figure>

<h2 id="匹配进程并kill"><a href="#匹配进程并kill" class="headerlink" title="匹配进程并kill"></a>匹配进程并kill</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//查找hello相关进程并<span class="built_in">kill</span></span><br><span class="line">ps -ef |grep hello |awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="built_in">kill</span> -9</span><br></pre></td></tr></table></figure>

<h2 id="sed-替换文本"><a href="#sed-替换文本" class="headerlink" title="sed: 替换文本"></a>sed: 替换文本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//将book替换为books</span><br><span class="line">sed <span class="string">&#x27;s/book/books/g&#x27;</span> file</span><br></pre></td></tr></table></figure>

<h2 id="查看文件大小"><a href="#查看文件大小" class="headerlink" title="查看文件大小"></a>查看文件大小</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 磁盘使用情况</span></span><br><span class="line">df -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有文件(包含子目录)</span></span><br><span class="line">du -ah</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示/root</span></span><br><span class="line">du -ah /root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示总计</span></span><br><span class="line">du -sh *</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>文件MD5批量生成</title>
    <url>/2018/10/18/Linux%E6%96%87%E4%BB%B6MD5%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find ./ -<span class="built_in">type</span> f | xargs md5sum &gt; a.md5</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>MD5</tag>
      </tags>
  </entry>
  <entry>
    <title>ML中的Loss函数</title>
    <url>/2018/05/12/ML%E4%B8%AD%E7%9A%84Loss%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/shenxiaoming77/article/details/51614601">原文</a></p>
]]></content>
      <categories>
        <category>ML</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS定时服务、开启自启</title>
    <url>/2018/01/06/Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="加入定时任务"><a href="#加入定时任务" class="headerlink" title="加入定时任务"></a>加入定时任务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建shell脚本</span></span><br><span class="line">vim bakup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#赋予执行权限</span></span><br><span class="line">chmod -R 777 bakup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#加入定时任务</span></span><br><span class="line">vim /etc/crontab</span><br><span class="line"><span class="comment">#最后一行加入。每天凌晨1点执行</span></span><br><span class="line">0 1 * * * root /usr/bakup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启crontab服务</span></span><br><span class="line">service crond restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#常用cron表达式</span></span><br><span class="line">    每五分钟执行  */5 * * * *</span><br><span class="line"></span><br><span class="line">　　每小时执行     0 * * * *</span><br><span class="line"></span><br><span class="line">　　每天执行       0 0 * * *</span><br><span class="line"></span><br><span class="line">　　每周执行       0 0 * * 0</span><br><span class="line"></span><br><span class="line">　　每月执行       0 0 1 * *</span><br><span class="line"></span><br><span class="line">　　每年执行       0 0 1 1 *</span><br></pre></td></tr></table></figure>

<h2 id="加入自启动服务"><a href="#加入自启动服务" class="headerlink" title="加入自启动服务"></a>加入自启动服务</h2><p>主要有两种方法，chkconfig命令和修改rc.local文件</p>
<ol>
<li><p>chkconfig命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//首先查看要启动的服务是否在chkconfig列表中</span><br><span class="line">chkconfig --list</span><br><span class="line"></span><br><span class="line">//如果列表中没有，需要单服务添加到列表</span><br><span class="line">chkconfig --add XX</span><br><span class="line"></span><br><span class="line">//打开自启动</span><br><span class="line">chkconfig mysqld on</span><br><span class="line"></span><br><span class="line">//取消自启动</span><br><span class="line">chkconfig mysqld off</span><br><span class="line"></span><br><span class="line">ps:2~5为on，就是表明打开自启动开关了</span><br></pre></td></tr></table></figure></li>
<li><p>修改/etc/rc.d/rc.local</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//编辑rc.local</span><br><span class="line">vim /etc/rc.d/rc.local</span><br><span class="line"></span><br><span class="line">//添加服务</span><br><span class="line">/etc/rc.d/init.d/mysqld start</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>Linux</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS使用VS Code配置go环境</title>
    <url>/2020/11/26/MacOS%E4%BD%BF%E7%94%A8VS-Code%E9%85%8D%E7%BD%AEgo%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="安装Go"><a href="#安装Go" class="headerlink" title="安装Go"></a>安装Go</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>访问<a href="https://golang.org/dl/">官网</a>，根据需求下载。</p>
<p>我下载的是1.15.5，直接点击执行pkg文件安装就可以了。</p>
<p>默认是安装到<code>/usr/local/go</code>目录。</p>
<p><em>PS: 也可以使用brew安装的方式</em></p>
<h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>主要有2个环境变量：GOROOT、GOPATH。</p>
<p>GOROOT：go的安装路径</p>
<p>GOPATH：项目路径</p>
<p>根据情况修改配置文件。我用的是zsh，座椅在.zshrc最后追加如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br><span class="line"><span class="built_in">export</span> GOPATH=/Users/xxxx/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure>

<p>改为别忘了source刷新下，然后<code>go version</code>验证下。</p>
<h1 id="VS-Code配置"><a href="#VS-Code配置" class="headerlink" title="VS Code配置"></a>VS Code配置</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在扩展商店里搜索go，安装就可以了。</p>
<h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>安装完成后，同时按住command+shift+p，输入<code>open settings</code>，打开setting.json，加入</p>
<p><code>&quot;go.gopath&quot;: &quot;/Users/woniu/go&quot;</code></p>
<h2 id="安装go组件"><a href="#安装go组件" class="headerlink" title="安装go组件"></a>安装go组件</h2><p>按住command+shift+p，输入<code>go: install/update tools</code>，然后勾选全部组件，确定，即可开始安装。</p>
<p>如果提示连接失败，可以改下代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shell中执行</span></span><br><span class="line">go env -w GO111MODULE=on</span><br><span class="line">go env -w GOPROXY=https://goproxy.io,direct</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>VS Code</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS安装Matlab</title>
    <url>/2018/05/20/MacOS%E5%AE%89%E8%A3%85Matlab/</url>
    <content><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>​    百度网盘链接:</p>
<p>​    安装包：<a href="https://pan.baidu.com/s/1Y1llTPxRa55ojXotTkg6eQ">https://pan.baidu.com/s/1Y1llTPxRa55ojXotTkg6eQ</a> 密码: wchd</p>
<p>​    破解补丁包：<a href="https://pan.baidu.com/s/1iTrHoTXmhut-nedNSf4RZg">https://pan.baidu.com/s/1iTrHoTXmhut-nedNSf4RZg</a>  密码:b7oz</p>
<p>​    如果下载速度过慢，可参考本博客搭建Aria2，享受会员版的下载速度。</p>
<p>##安装</p>
<p>​    下载后是一个iso文件，打开，断开网络连接，双击InstallForMacOSX.app，点下一步。</p>
<p>​    选择“使用文件安装秘钥”，点击“下一步“，同意条款，然后将<code>5442240402238172080830933</code>拷贝到许可证秘钥窗口，一直”下一步“，等待安装完成。</p>
<p>​    用破解补丁包中的libmwservices.dylib替换掉/Applications/MATLAB_R2015b/bin/maci64/libmwservices.dylib。</p>
<p>​    打开Matlab_R2015b，选择离线激活方式，加载破解补丁包中的/license.lib，成功。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS搭建Aria2</title>
    <url>/2018/03/30/MacOS%E6%90%AD%E5%BB%BAAria2/</url>
    <content><![CDATA[<h2 id="安装Aria2"><a href="#安装Aria2" class="headerlink" title="安装Aria2"></a>安装Aria2</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>MacOs安装Aria2十分简单，使用homebrew安装就可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install aria2</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//创建配置目录</span><br><span class="line">mkdir ~/.aria2</span><br><span class="line"></span><br><span class="line">//编辑配置文件</span><br><span class="line">vim ~/.aria2/aria2.conf</span><br><span class="line"></span><br><span class="line">//将下面配置拷贝到aria2.conf中，并且修改dir为自己的下载目录</span><br><span class="line"><span class="comment">#用户名</span></span><br><span class="line"><span class="comment">#rpc-user=user</span></span><br><span class="line"><span class="comment">#密码</span></span><br><span class="line"><span class="comment">#rpc-passwd=passwd</span></span><br><span class="line"><span class="comment">#上面的认证方式不建议使用,建议使用下面的token方式</span></span><br><span class="line"><span class="comment">#设置加密的密钥</span></span><br><span class="line"><span class="comment">#rpc-secret=token</span></span><br><span class="line"><span class="comment">#允许rpc</span></span><br><span class="line">enable-rpc=<span class="literal">true</span></span><br><span class="line"><span class="comment">#允许所有来源, web界面跨域权限需要</span></span><br><span class="line">rpc-allow-origin-all=<span class="literal">true</span></span><br><span class="line"><span class="comment">#允许外部访问，false的话只监听本地端口</span></span><br><span class="line">rpc-listen-all=<span class="literal">true</span></span><br><span class="line"><span class="comment">#RPC端口, 仅当默认端口被占用时修改</span></span><br><span class="line"><span class="comment">#rpc-listen-port=6800</span></span><br><span class="line"><span class="comment">#最大同时下载数(任务数), 路由建议值: 3</span></span><br><span class="line">max-concurrent-downloads=5</span><br><span class="line"><span class="comment">#断点续传</span></span><br><span class="line"><span class="built_in">continue</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#同服务器连接数</span></span><br><span class="line">max-connection-per-server=5</span><br><span class="line"><span class="comment">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span></span><br><span class="line">min-split-size=10M</span><br><span class="line"><span class="comment">#单文件最大线程数, 路由建议值: 5</span></span><br><span class="line">split=10</span><br><span class="line"><span class="comment">#下载速度限制</span></span><br><span class="line">max-overall-download-limit=0</span><br><span class="line"><span class="comment">#单文件速度限制</span></span><br><span class="line">max-download-limit=0</span><br><span class="line"><span class="comment">#上传速度限制</span></span><br><span class="line">max-overall-upload-limit=0</span><br><span class="line"><span class="comment">#单文件速度限制</span></span><br><span class="line">max-upload-limit=0</span><br><span class="line"><span class="comment">#断开速度过慢的连接</span></span><br><span class="line"><span class="comment">#lowest-speed-limit=0</span></span><br><span class="line"><span class="comment">#验证用，需要1.16.1之后的release版本</span></span><br><span class="line"><span class="comment">#referer=*</span></span><br><span class="line"><span class="comment">#文件保存路径, 默认为当前启动位置</span></span><br><span class="line">dir=/Users/woniu/Downloads</span><br><span class="line"><span class="comment">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</span></span><br><span class="line"><span class="comment">#disk-cache=0</span></span><br><span class="line"><span class="comment">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)</span></span><br><span class="line"><span class="comment">#enable-mmap=true</span></span><br><span class="line"><span class="comment">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</span></span><br><span class="line"><span class="comment">#所需时间 none &lt; falloc ? trunc « prealloc, falloc和trunc需要文件系统和内核支持</span></span><br><span class="line">file-allocation=prealloc</span><br></pre></td></tr></table></figure>

<h3 id="运行aria2"><a href="#运行aria2" class="headerlink" title="运行aria2"></a>运行aria2</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">aria2c</span><br><span class="line"></span><br><span class="line">//检查是否已启动</span><br><span class="line">ps aux|grep aria2c</span><br></pre></td></tr></table></figure>

<h2 id="UI设置"><a href="#UI设置" class="headerlink" title="UI设置"></a>UI设置</h2><p>访问<a href="https://ziahamza.github.io/webui-aria2/">https://ziahamza.github.io/webui-aria2/</a></p>
<p>然后点击设置-链接设置</p>
<p>将主机修改为：localhost</p>
<p>端口：6800</p>
<p>取消ssl/ssh的勾选</p>
<h2 id="安装百度云插件"><a href="#安装百度云插件" class="headerlink" title="安装百度云插件"></a>安装百度云插件</h2><p>下载<a href="https://yalv.me/download/aria2/Exporter.zip">百度插件</a>，解压</p>
<p>在chrome浏览器中，设置-更多工具-扩展程序-开启开发者模式-加载已解压的拓展程序</p>
<p>安装之后，随便打开一个百度网盘的资源，发现多了一个导出下载的选项，里面有ARIA2 RPC，使用这个下载rpc文件，然后自动会使用aria2进行下载</p>
<h2 id="安装迅雷插件（迅雷已屏蔽）"><a href="#安装迅雷插件（迅雷已屏蔽）" class="headerlink" title="安装迅雷插件（迅雷已屏蔽）"></a><del>安装迅雷插件（迅雷已屏蔽）</del></h2><p>该方案目前已经被迅雷屏蔽</p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
        <tag>Aria2</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac初始化EasyNLP开发环境</title>
    <url>/2022/05/02/Mac%E5%88%9D%E5%A7%8B%E5%8C%96EasyNLP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">macOS Monterey 12.2.1，Apple M1 Pro版本</span><br><span class="line"></span><br><span class="line">$ python --version</span><br><span class="line">Python 3.8.9</span><br><span class="line"></span><br><span class="line">$ pip --version</span><br><span class="line">pip 22.0.4 from /Users/gavin/Library/Python/3.8/lib/python/site-packages/pip (python 3.8)</span><br></pre></td></tr></table></figure>

<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h3><p>打开<a href="https://www.yuque.com/easyx/easynlp/tepd59">官方文档</a>，创建目录，在目录中 clone 项目。</p>
<p><code>git clone https://github.com/alibaba/EasyNLP</code></p>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>执行<code>pip install -r requirements.txt</code>，不出预料，有报错。</p>
<h4 id="setuptools版本过低"><a href="#setuptools版本过低" class="headerlink" title="setuptools版本过低"></a>setuptools版本过低</h4><p>错误信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    raise VersionConflict(dist, req).with_context(dependent_req)</span><br><span class="line">pkg_resources.VersionConflict: (setuptools 49.2.1 (/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/site-packages), Requirement.parse(<span class="string">&#x27;setuptools&gt;=58.0&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>信息比较清晰，进行升级：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install --upgrade setuptools</span><br><span class="line">Defaulting to user installation because normal site-packages is not writeable</span><br><span class="line">Requirement already satisfied: setuptools <span class="keyword">in</span> /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/site-packages (49.2.1)</span><br><span class="line">Collecting setuptools</span><br><span class="line">  Using cached setuptools-62.1.0-py3-none-any.whl (1.1 MB)</span><br><span class="line">Installing collected packages: setuptools</span><br><span class="line">Successfully installed setuptools-62.1.0</span><br></pre></td></tr></table></figure>

<p>升级成功。重新执行<code>pip install -r requirements.txt</code>，不料还是报相同的错，仔细看了一下，报错路径与我安装的 setuptools 不一致，最终通过修改 site.py 解决，详细过程可参考<a href="https://wonius.top/2022/04/29/Mac%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4Python/">这篇文章</a></p>
<h4 id="tokenizers模块报错"><a href="#tokenizers模块报错" class="headerlink" title="tokenizers模块报错"></a>tokenizers模块报错</h4><p>部分报错信息如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   note: This error originates from a subprocess, and is likely not a problem with pip.</span><br><span class="line">  ERROR: Failed building wheel <span class="keyword">for</span> sentencepiece</span><br><span class="line">  Running setup.py clean <span class="keyword">for</span> sentencepiece</span><br><span class="line">  Building wheel <span class="keyword">for</span> grpcio (setup.py) ... <span class="keyword">done</span></span><br><span class="line">  Created wheel <span class="keyword">for</span> grpcio: filename=grpcio-1.45.0-cp38-cp38-macosx_10_14_arm64.whl size=7451816 sha256=5909c0fc7f0fc6fe959b5205d8fb6293404e377b651fb97aeaaf3574a8c528a0</span><br><span class="line">  Stored <span class="keyword">in</span> directory: /Users/gavin/Library/Caches/pip/wheels/bb/fe/aa/509208bd9420844c88b4a73ced4bc58f069a3db3b3a4b23336</span><br><span class="line">Successfully built grpcio</span><br><span class="line">Failed to build tokenizers sentencepiece</span><br><span class="line">ERROR: Could not build wheels <span class="keyword">for</span> tokenizers, <span class="built_in">which</span> is required to install pyproject.toml-based projects</span><br></pre></td></tr></table></figure>

<p>解决方案，安装 rust：</p>
<p><code>curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh</code></p>
<h4 id="sentencepiece模块报错"><a href="#sentencepiece模块报错" class="headerlink" title="sentencepiece模块报错"></a>sentencepiece模块报错</h4><p>重新执行<code>pip install -r requirements.txt</code>，又有新的报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Running setup.py install <span class="keyword">for</span> sentencepiece ... error</span><br><span class="line">  error: subprocess-exited-with-error</span><br><span class="line"></span><br><span class="line">  × Running setup.py install <span class="keyword">for</span> sentencepiece did not run successfully.</span><br><span class="line">  │ <span class="built_in">exit</span> code: 1</span><br><span class="line">  ╰─&gt; [25 lines of output]</span><br><span class="line">      /Users/gavin/Library/Python/3.8/lib/python/site-packages/setuptools/dist.py:757: UserWarning: Usage of dash-separated <span class="string">&#x27;description-file&#x27;</span> will not be supported <span class="keyword">in</span> future versions. Please use the underscore name <span class="string">&#x27;description_file&#x27;</span> instead</span><br><span class="line">        warnings.warn(</span><br><span class="line">      running install</span><br><span class="line">      /Users/gavin/Library/Python/3.8/lib/python/site-packages/setuptools/<span class="built_in">command</span>/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.</span><br><span class="line">        warnings.warn(</span><br><span class="line">      running build</span><br><span class="line">      running build_py</span><br><span class="line">      creating build</span><br><span class="line">      creating build/lib.macosx-10.14-arm64-cpython-38</span><br><span class="line">      creating build/lib.macosx-10.14-arm64-cpython-38/sentencepiece</span><br><span class="line">      copying src/sentencepiece/__init__.py -&gt; build/lib.macosx-10.14-arm64-cpython-38/sentencepiece</span><br><span class="line">      copying src/sentencepiece/sentencepiece_model_pb2.py -&gt; build/lib.macosx-10.14-arm64-cpython-38/sentencepiece</span><br><span class="line">      copying src/sentencepiece/sentencepiece_pb2.py -&gt; build/lib.macosx-10.14-arm64-cpython-38/sentencepiece</span><br><span class="line">      running build_ext</span><br><span class="line">      /bin/sh: pkg-config: <span class="built_in">command</span> not found</span><br><span class="line">      mkdir: bundled: File exists</span><br><span class="line">      fatal: destination path <span class="string">&#x27;sentencepiece&#x27;</span> already exists and is not an empty directory.</span><br><span class="line">      fatal: destination path <span class="string">&#x27;sentencepiece&#x27;</span> already exists and is not an empty directory.</span><br><span class="line">      mkdir: build: File exists</span><br><span class="line">      ./build_bundled.sh: line 15: cmake: <span class="built_in">command</span> not found</span><br><span class="line">      ./build_bundled.sh: line 16: nproc: <span class="built_in">command</span> not found</span><br><span class="line">      make: *** No targets specified and no makefile found.  Stop.</span><br><span class="line">      make: *** No rule to make target `install<span class="string">&#x27;.  Stop.</span></span><br><span class="line"><span class="string">      env: pkg-config: No such file or directory</span></span><br><span class="line"><span class="string">      Failed to find sentencepiece pkg-config</span></span><br><span class="line"><span class="string">      [end of output]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  note: This error originates from a subprocess, and is likely not a problem with pip.</span></span><br><span class="line"><span class="string">error: legacy-install-failure</span></span><br></pre></td></tr></table></figure>

<p>看报错是安装 sentencepiece 有异常，尝试单独安装该模块<code>pip install sentencepiece</code>，报同样的错。</p>
<p>最终通过下载安装包、修改标签名，安装成功，详细过程可参考<a href="https://wonius.top/2022/05/02/macOS%E5%AE%89%E8%A3%85sentencepiece%E6%A8%A1%E5%9D%97%E5%A4%B1%E8%B4%A5/">这篇文章</a>。</p>
<p>重新执行<code>pip install -r requirements.txt</code>，终于成功安装完依赖。</p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
        <tag>EasyNLP</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS修改Python默认配置</title>
    <url>/2022/04/29/Mac%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4Python/</url>
    <content><![CDATA[<h2 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">macOS Monterey 12.2.1，Apple M1 Pro版本</span><br><span class="line"></span><br><span class="line">$ python --version</span><br><span class="line">Python 3.8.9</span><br><span class="line"></span><br><span class="line">$ pip --version</span><br><span class="line">pip 22.0.4 from /Users/gavin/Library/Python/3.8/lib/python/site-packages/pip (python 3.8)</span><br></pre></td></tr></table></figure>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近在安装 EasyNLP 依赖的时候，报错 如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    raise VersionConflict(dist, req).with_context(dependent_req)</span><br><span class="line">pkg_resources.VersionConflict: (setuptools 49.2.1 (/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/site-packages), Requirement.parse(<span class="string">&#x27;setuptools&gt;=58.0&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>OK，setuptools 版本太低，升级：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install --upgrade setuptools</span><br><span class="line">Defaulting to user installation because normal site-packages is not writeable</span><br><span class="line">Requirement already satisfied: setuptools <span class="keyword">in</span> /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/site-packages (49.2.1)</span><br><span class="line">Collecting setuptools</span><br><span class="line">  Using cached setuptools-62.1.0-py3-none-any.whl (1.1 MB)</span><br><span class="line">Installing collected packages: setuptools</span><br><span class="line">Successfully installed setuptools-62.1.0</span><br></pre></td></tr></table></figure>

<p>升级成功，But，重新安装依赖，还是报同样的错。就离谱。</p>
<p>仔细看了下 setuptools 信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip show setuptools</span><br><span class="line">Name: setuptools</span><br><span class="line">Version: 62.1.0</span><br><span class="line">Summary: Easily download, build, install, upgrade, and uninstall Python packages</span><br><span class="line">Home-page: https://github.com/pypa/setuptools</span><br><span class="line">Author: Python Packaging Authority</span><br><span class="line">Author-email: distutils-sig@python.org</span><br><span class="line">License: UNKNOWN</span><br><span class="line">Location: /Users/gavin/Library/Python/3.8/lib/python/site-packages</span><br><span class="line">Requires:</span><br><span class="line">Required-by:</span><br></pre></td></tr></table></figure>

<p>找到原因了：</p>
<p>pip 升级 setuptools 后的路径：/Users/gavin/Library/Python/3.8/lib/python/site-packages</p>
<p>报错的路径：Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/site-packages</p>
<p>也就是说，安装依赖时查找的 site-package，并非默认的路径（site-package 是下载第三方库时在电脑中的存放路径，也就是仓库）。</p>
<h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>先查看下 Python 对应的 site 信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python -m site</span><br><span class="line">sys.path = [</span><br><span class="line">    <span class="string">&#x27;/usr/bin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python38.zip&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/lib-dynload&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/Users/gavin/Library/Python/3.8/lib/python/site-packages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/site-packages&#x27;</span>,</span><br><span class="line">]</span><br><span class="line">USER_BASE: <span class="string">&#x27;/Users/gavin/Library/Python/3.8&#x27;</span> (exists)</span><br><span class="line">USER_SITE: <span class="string">&#x27;/Users/gavin/Library/Python/3.8/lib/python/site-packages&#x27;</span> (exists)</span><br><span class="line">ENABLE_USER_SITE: True</span><br></pre></td></tr></table></figure>

<p>可以看到 sys.path 中两个路径都有，而且两个 site-package 中都有 setuptools，安装依赖时没有读取我们期望的 site-packages。</p>
<p>到这我们有 2 个解决方案，要么把系统自带的 setuptools 也升级，要么在 sys.path 中把系统的 site-packages删掉。</p>
<p>方案一不是长久之计，采用方案二。接下来就是看怎么修改 sys.path 了。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>​    网上查了半天，如果对 sys.path 进行修改，最好是能把系统默认的 site-packages 去掉，只保留我们自己的 site-packages。如果去不掉的话，至少保证我们自己的 site-packages 优先级高于系统默认。</p>
<p>修改 sys.path 的方案一般有这些：</p>
<ol>
<li>调用 sys 自带函数，比如 sys.remove() 函数，可以直接删。（该方案一般适用于代码中，临时有效，不适合我们的场景）；</li>
<li>python 在生成 sys.path 时，是通过检测.pth 文件所在的目录，以及其中的内容。所以如果想在某个路径加入到 sys.path，可以通过加.pth，或者修改.pth（该方案适合添加内容，也不适合）；</li>
<li>定义 <code>PYTHONPATH = /xxx/xxx</code>，不定义这个变量也可以，直接在 PATH 中添加。这个方案大家应该都知道。根据 bash 类型编辑.bash_profile，或者.zshrc（该方案也只能添加，也不适合）；</li>
<li>通过调整 python 的 site.py，自定义 USER_BASE、USER_SITE；</li>
</ol>
<p>最终用第四种方案解决了我们的问题，具体方法如下（奇怪的是，我明明没配置，但是 python -m site 命令返回的结果里却显示有）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 查看 site.py所在位置</span></span><br><span class="line">python -m site -<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到输出</span></span><br><span class="line">/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/site.py [--user-base] [--user-site]</span><br><span class="line"></span><br><span class="line">Without arguments <span class="built_in">print</span> some useful information</span><br><span class="line">With arguments <span class="built_in">print</span> the value of USER_BASE and/or USER_SITE separated</span><br><span class="line">by <span class="string">&#x27;:&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Exit codes with --user-base or --user-site:</span><br><span class="line">  0 - user site directory is enabled</span><br><span class="line">  1 - user site directory is disabled by user</span><br><span class="line">  2 - uses site directory is disabled by super user</span><br><span class="line">      or <span class="keyword">for</span> security reasons</span><br><span class="line"> &gt;2 - unknown error</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 2. 进入路径，备份文件、编辑文件</span></span><br><span class="line"> <span class="built_in">cd</span> /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8</span><br><span class="line"> cp site.py site_bak.py</span><br><span class="line"> sudo vim site.py</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 3. 修改配置，如下，然后保存退出 </span></span><br><span class="line"><span class="comment"># Enable per user site-packages directory</span></span><br><span class="line"><span class="comment"># set it to False to disable the feature or True to force the feature</span></span><br><span class="line">ENABLE_USER_SITE = True</span><br><span class="line"></span><br><span class="line"><span class="comment"># for distutils.commands.install</span></span><br><span class="line"><span class="comment"># These values are initialized by the getuserbase() and getusersitepackages()</span></span><br><span class="line"><span class="comment"># functions, through the main() function when Python starts.</span></span><br><span class="line">USER_SITE = <span class="string">&quot;/Users/gavin/Library/Python/3.8/lib/python/site-packages&quot;</span></span><br><span class="line">USER_BASE = <span class="string">&quot;/Users/gavin/Library/Python/3.8&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后执行安装依赖命令，可正常执行。</p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS常用命令</title>
    <url>/2017/08/15/Mac%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="查看端口号"><a href="#查看端口号" class="headerlink" title="查看端口号"></a>查看端口号</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//8080为端口号</span><br><span class="line">lsof -i :8080	</span><br><span class="line"></span><br><span class="line">//<span class="built_in">kill</span></span><br><span class="line">sudo <span class="built_in">kill</span> -9 pid</span><br></pre></td></tr></table></figure>

<h2 id="设置软件安装来源为所有来源"><a href="#设置软件安装来源为所有来源" class="headerlink" title="设置软件安装来源为所有来源"></a>设置软件安装来源为所有来源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable/--master-enable</span><br></pre></td></tr></table></figure>

<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server	//启动</span><br></pre></td></tr></table></figure>

<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql.server start	//启动</span><br></pre></td></tr></table></figure>

<h2 id="postgresql"><a href="#postgresql" class="headerlink" title="postgresql"></a>postgresql</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pg_ctl -d /usr/<span class="built_in">local</span>/var/postgres -l /usr/<span class="built_in">local</span>/var/postgres/server.log start 	//启动</span><br></pre></td></tr></table></figure>

<h2 id="远程传递文件"><a href="#远程传递文件" class="headerlink" title="远程传递文件"></a>远程传递文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp **.zip username@**.**.**.**:/目录</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven的那些事儿</title>
    <url>/2018/10/22/Maven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="lifecycle、phase、goal"><a href="#lifecycle、phase、goal" class="headerlink" title="lifecycle、phase、goal"></a>lifecycle、phase、goal</h2><ol>
<li>lifecycle由phase组成，phase由goal组成。phase可以看成小的生命周期，goal是最小的任务执行单元；</li>
<li>lifecycle总共有三个阶段，clean、default、site；每个阶段对应不同phase；</li>
<li>一个phase中可以有多个goal；</li>
</ol>
<h2 id="lifecycle"><a href="#lifecycle" class="headerlink" title="lifecycle"></a>lifecycle</h2><h3 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h3><table>
<thead>
<tr>
<th>phase</th>
<th>function</th>
</tr>
</thead>
<tbody><tr>
<td>pre-clean</td>
<td>execute processes needed prior to the actual project cleaning</td>
</tr>
<tr>
<td>clean</td>
<td>remove all files generated by the previous build</td>
</tr>
<tr>
<td>Post-clean</td>
<td>execute processes needed to finalize the project cleaning</td>
</tr>
</tbody></table>
<h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><table>
<thead>
<tr>
<th>phase</th>
<th>function</th>
</tr>
</thead>
<tbody><tr>
<td>validate</td>
<td>validate the project is correct and all necessary information is available.</td>
</tr>
<tr>
<td>initialize</td>
<td>initialize build state, e.g. set properties or create directories.</td>
</tr>
<tr>
<td>generate-sources</td>
<td>generate any source code for inclusion in compilation.</td>
</tr>
<tr>
<td>process-sources</td>
<td>process the source code, for example to filter any values.</td>
</tr>
<tr>
<td>generate-resources</td>
<td>generate resources for inclusion in the package.</td>
</tr>
<tr>
<td>process-resources</td>
<td>copy and process the resources into the destination directory, ready for packaging.</td>
</tr>
<tr>
<td>compile</td>
<td>compile the source code of the project.</td>
</tr>
<tr>
<td>process-classes</td>
<td>post-process the generated files from compilation, for example to do bytecode enhancement on Java classes.</td>
</tr>
<tr>
<td>generate-test-sources</td>
<td>generate any test source code for inclusion in compilation.</td>
</tr>
<tr>
<td>process-test-sources</td>
<td>process the test source code, for example to filter any values.</td>
</tr>
<tr>
<td>generate-test-resources</td>
<td>create resources for testing.</td>
</tr>
<tr>
<td>process-test-resources</td>
<td>copy and process the resources into the test destination directory.</td>
</tr>
<tr>
<td>test-compile</td>
<td>compile the test source code into the test destination directory</td>
</tr>
<tr>
<td>process-test-classes</td>
<td>post-process the generated files from test compilation, for example to do bytecode enhancement on Java classes. For Maven 2.0.5 and above.</td>
</tr>
<tr>
<td>test</td>
<td>run tests using a suitable unit testing framework. These tests should not require the code be packaged or deployed.</td>
</tr>
<tr>
<td>prepare-package</td>
<td>perform any operations necessary to prepare a package before the actual packaging. This often results in an unpacked, processed version of the package. (Maven 2.1 and above)</td>
</tr>
<tr>
<td>package</td>
<td>take the compiled code and package it in its distributable format, such as a JAR.</td>
</tr>
<tr>
<td>pre-integration-test perform</td>
<td>actions required before integration tests are executed. This may involve things such as setting up the required environment.</td>
</tr>
<tr>
<td>integration-test</td>
<td>process and deploy the package if necessary into an environment where integration tests can be run.</td>
</tr>
<tr>
<td>post-integration-test</td>
<td>perform actions required after integration tests have been executed. This may including cleaning up the environment.</td>
</tr>
<tr>
<td>verify</td>
<td>run any checks to verify the package is valid and meets quality criteria.</td>
</tr>
<tr>
<td>install</td>
<td>install the package into the local repository, for use as a dependency in other projects locally.</td>
</tr>
<tr>
<td>deploy</td>
<td>done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.</td>
</tr>
</tbody></table>
<h3 id="site"><a href="#site" class="headerlink" title="site"></a>site</h3><table>
<thead>
<tr>
<th>phase</th>
<th>function</th>
</tr>
</thead>
<tbody><tr>
<td>pre-site</td>
<td>execute processes needed prior to the actual project site generation</td>
</tr>
<tr>
<td>site</td>
<td>generate the project’s site documentation</td>
</tr>
<tr>
<td>post-site</td>
<td>execute processes needed to finalize the site generation, and to prepare for site deployment</td>
</tr>
<tr>
<td>site-deploy</td>
<td>deploy the generated site documentation to the specified web server</td>
</tr>
</tbody></table>
<p><a href="https://www.jianshu.com/p/fd43b3d0fdb0">https://www.jianshu.com/p/fd43b3d0fdb0</a></p>
<h2 id="插件执行顺序"><a href="#插件执行顺序" class="headerlink" title="插件执行顺序"></a>插件执行顺序</h2><ol>
<li>同一pom，按照插件配置的顺序执行；</li>
<li>超级pom与自定义pom，同一phase，超级pom先执行；</li>
</ol>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis使用association，结果返回数组</title>
    <url>/2017/10/14/Mybatis%E4%BD%BF%E7%94%A8association%EF%BC%8C%E7%BB%93%E6%9E%9C%E8%BF%94%E5%9B%9E%E6%95%B0%E7%BB%84-1/</url>
    <content><![CDATA[<p>关于association、collection标签网上很多帖子，这里就不赘述，直接讲问题。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>我DAO接口返回的数据格式为 <code>List&lt;Map&lt;String, Object&gt;&gt;</code>，Map中的数据对象为如下，Book是一个实体。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>resultMap type<span class="operator">=</span>&quot;HashMap&quot; id<span class="operator">=</span>&quot;PushInfo&quot;<span class="operator">&gt;</span></span><br><span class="line">       <span class="operator">&lt;</span><span class="keyword">result</span> <span class="keyword">column</span><span class="operator">=</span>&quot;id&quot; property<span class="operator">=</span>&quot;id&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">       <span class="operator">&lt;</span><span class="keyword">result</span> <span class="keyword">column</span><span class="operator">=</span>&quot;pushDate&quot; property<span class="operator">=</span>&quot;pushDate&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">       <span class="operator">&lt;</span>association property<span class="operator">=</span>&quot;book&quot; <span class="keyword">select</span><span class="operator">=</span>&quot;selectBookById&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;book_id&quot; javaType<span class="operator">=</span>&quot;Book&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">   <span class="operator">&lt;</span><span class="operator">/</span>resultMap<span class="operator">&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;selectBookById&quot; resultType<span class="operator">=</span>&quot;Book&quot;<span class="operator">&gt;</span></span><br><span class="line">	<span class="keyword">SELECT</span> book.<span class="operator">*</span>,user.nickName <span class="keyword">AS</span> `createUser.nickName` <span class="keyword">FROM</span> book </span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> `<span class="keyword">user</span>` <span class="keyword">ON</span> user.id <span class="operator">=</span> book.createUser</span><br><span class="line">	<span class="keyword">WHERE</span> book.id <span class="operator">=</span> #&#123;bookId&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<p>实际返回的结果，出现了格式不一致的问题:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">	&#123;</span><br><span class="line">        <span class="attr">&quot;pushDate&quot;</span>: <span class="number">1494645459000</span>,</span><br><span class="line">        <span class="attr">&quot;book&quot;</span>: &#123;			<span class="comment">//该处，book是实体对象，是正常的</span></span><br><span class="line">            <span class="attr">&quot;status&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;createUser&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">&quot;tags&quot;</span>: <span class="string">&quot;[唐家三少, 斗罗大陆, 玄幻, 网络小说, 小说, 三少的书，很经典, 奇幻, 魔幻小说]&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;imgUrl&quot;</span>: <span class="string">&quot;https://img3.doubanio.com/lpic/s6847563.jpg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;唐家三少&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;doubanScore&quot;</span>: <span class="number">7.5</span>,</span><br><span class="line">            <span class="attr">&quot;createDate&quot;</span>: <span class="number">1420038859000</span>,</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;斗罗大陆（全14卷）&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;book_id&quot;</span>: <span class="number">3249</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;pushDate&quot;</span>: <span class="number">1494571741000</span>,</span><br><span class="line">        <span class="attr">&quot;book&quot;</span>: [			<span class="comment">//此时，却变成了book实体的数组对象</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;status&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;createUser&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">                <span class="attr">&quot;tags&quot;</span>: <span class="string">&quot;[唐家三少, 斗罗大陆, 玄幻, 网络小说, 小说, 三少的书，很经典, 奇幻, 魔幻小说]&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;imgUrl&quot;</span>: <span class="string">&quot;https://img3.doubanio.com/lpic/s6847563.jpg&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;enable&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">&quot;author&quot;</span>: <span class="string">&quot;唐家三少&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;doubanScore&quot;</span>: <span class="number">7.5</span>,</span><br><span class="line">                <span class="attr">&quot;createDate&quot;</span>: <span class="number">1420038859000</span>,</span><br><span class="line">                <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;斗罗大陆（全14卷）&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;content&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;book_id&quot;</span>: <span class="number">3249</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">···········</span><br></pre></td></tr></table></figure>



<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>新建了BookPush实体类，指定book类型。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>resultMap type<span class="operator">=</span>&quot;BookPush&quot; id<span class="operator">=</span>&quot;PushInfo&quot;<span class="operator">&gt;</span></span><br><span class="line">       <span class="operator">&lt;</span><span class="keyword">result</span> <span class="keyword">column</span><span class="operator">=</span>&quot;id&quot; property<span class="operator">=</span>&quot;id&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">       <span class="operator">&lt;</span><span class="keyword">result</span> <span class="keyword">column</span><span class="operator">=</span>&quot;pushDate&quot; property<span class="operator">=</span>&quot;pushDate&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">       <span class="operator">&lt;</span>association property<span class="operator">=</span>&quot;book&quot; <span class="keyword">select</span><span class="operator">=</span>&quot;selectBookById&quot; <span class="keyword">column</span><span class="operator">=</span>&quot;book_id&quot; javaType<span class="operator">=</span>&quot;Book&quot;<span class="operator">/</span><span class="operator">&gt;</span></span><br><span class="line">   <span class="operator">&lt;</span><span class="operator">/</span>resultMap<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>仔细核查数据可以发现，当父查询返回的book_id有重复时，第二个book_id查出来的数据，返回的一定是一个数组。比如上面，book_id都为3249，第一个结果为实体，第二个结果为数组。</p>
<p>我猜测association标签在执行时，会将同一个事务中的数据缓存。先在缓存中查，发现有一个实体，所以就创建了数组，然后再执行sql，查出来的结果与缓存中的一样，所以数组中只有一个元素。</p>
<p>但是感觉跟数据类型也有关系</p>
<p>以后有空看看这部分的源码</p>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql常用操作</title>
    <url>/2017/07/30/Mysql%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="MacOs，修改root用户密码"><a href="#MacOs，修改root用户密码" class="headerlink" title="MacOs，修改root用户密码"></a>MacOs，修改root用户密码</h2><p>mysql版本：5.7.18</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//先暂停服务</span><br><span class="line">mysql.server stop</span><br><span class="line"></span><br><span class="line">//启动安全模式</span><br><span class="line">mysqld_safe --user=mysql --skip-grant-tables</span><br><span class="line"></span><br><span class="line">//进入mysql</span><br><span class="line">mysql -u root mysql</span><br><span class="line"></span><br><span class="line">//设置密码</span><br><span class="line">SET PASSWORD FOR <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> = PASSWORD(<span class="string">&#x27;新密码&#x27;</span>);</span><br><span class="line"></span><br><span class="line">//将变更刷入内存。该步骤我没有执行，也生效了</span><br><span class="line">FLUSH PRIVILEGES; </span><br><span class="line"></span><br><span class="line">//退出</span><br><span class="line">\q</span><br><span class="line"></span><br><span class="line">//重新启动服务</span><br><span class="line">mysql.server start</span><br></pre></td></tr></table></figure>
<h3 id="数据库备份、还原"><a href="#数据库备份、还原" class="headerlink" title="数据库备份、还原"></a>数据库备份、还原</h3><ol>
<li><p>备份某库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u用户名 -p密码 -h主机 数据库 a -w “sql条件” –lock-all-tables &gt; 路径</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p1234 dbname a –<span class="built_in">where</span> “tag=<span class="string">&#x27;88′” –no-create-info&gt; c:\a.sql</span></span><br><span class="line"><span class="string">mysqldump -u root -p game &gt; /tmp/game_backup.sql</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="2">
<li><p>备份某几个库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p game game2 &gt; /tmp/game_backup.sql</span><br></pre></td></tr></table></figure></li>
<li><p>备份所有库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqldump -u root -p --all-databases &gt; /tmp/all_backup.sql</span><br></pre></td></tr></table></figure></li>
<li><p>还原数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p game &lt; /tmp/game_backup.sql</span><br></pre></td></tr></table></figure></li>
<li><p>跨主机同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#前提是host2主机上已经创建targetDb数据库, -C指示主机间的数据传输使用数据压缩</span></span><br><span class="line">mysqldump --host=host1 --opt sourceDb| mysql --host=host2 -C targetDb</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE USER username IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#限定在固定地址localhost登录</span></span><br><span class="line">CREATE USER username@localhost IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#当你在服务器主机上创建用户，为了方便远程连接，通常使用%代替，如：</span></span><br><span class="line">CREATE USER username@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO user@localhost IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#授予某一些权限时</span></span><br><span class="line">GRANT select,insert ON *.* TO test1@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="查看用户拥有的权限"><a href="#查看用户拥有的权限" class="headerlink" title="查看用户拥有的权限"></a>查看用户拥有的权限</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">show grants <span class="keyword">for</span> user;</span><br></pre></td></tr></table></figure>

<h2 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">select host, user from mysql.user;</span><br></pre></td></tr></table></figure>

<h2 id="创建库"><a href="#创建库" class="headerlink" title="创建库"></a>创建库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE dbname;</span><br></pre></td></tr></table></figure>

<h2 id="删除库"><a href="#删除库" class="headerlink" title="删除库"></a>删除库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DROP DATABASE dbname；</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql常见问题</title>
    <url>/2018/01/30/Mysql%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="ERROR-1044-42000-Access-denied-for-user-‘‘-’localhost’-to-database-‘XXX’"><a href="#ERROR-1044-42000-Access-denied-for-user-‘‘-’localhost’-to-database-‘XXX’" class="headerlink" title="ERROR 1044 (42000): Access denied for user ‘‘@’localhost’ to database ‘XXX’"></a>ERROR 1044 (42000): Access denied for user ‘‘@’localhost’ to database ‘XXX’</h2><p>​    今天在DB里用普通用户做操作时，会报这个错误。主要是因为user表中有匿名用户，将匿名用户删除就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先进入mysql</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到mysql数据库</span></span><br><span class="line">user mysql;</span><br><span class="line"><span class="comment">#查看当前用户</span></span><br><span class="line">select host, user, password from user;</span><br><span class="line"><span class="comment">#删除匿名用户</span></span><br><span class="line">delete from user <span class="built_in">where</span> user=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">#写入</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line">\q</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure>

<h2 id="ERROR-1045-28000-Access-denied-for-user-‘root‘-’localhost’-using-password-YES"><a href="#ERROR-1045-28000-Access-denied-for-user-‘root‘-’localhost’-using-password-YES" class="headerlink" title="ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES)"></a>ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES)</h2><p>​    一般由于密码错误，或者有用户没有密码的情况。    可以先设置成无密码模式进入，再将有问题的用户进行调整。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改my.cnf</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="comment">#在[mysqld]中加入</span></span><br><span class="line">skip-grant-tables</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存退出后，重启mysql</span></span><br><span class="line">service mysqld restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#无需密码直接进入</span></span><br><span class="line">mysql</span><br><span class="line"><span class="comment">#先看一下用户的状态，在判断要做什么操作</span></span><br><span class="line">select user, password, host from mysql.user;</span><br><span class="line"><span class="comment">#删除不需要的用户</span></span><br><span class="line">drop from mysql.user <span class="built_in">where</span> password=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">#或者更新用户密码</span></span><br><span class="line">update mysql.user <span class="built_in">set</span> password=password(<span class="string">&quot;你的新密码&quot;</span>) <span class="built_in">where</span> user=<span class="string">&quot;XXX&quot;</span>;</span><br><span class="line"><span class="comment">#写入</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line">\q</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql迁移</title>
    <url>/2018/01/24/Mysql%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    生产环境上的Mysql服务器资源有限，需要迁移到另外一台资源更多的服务器。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>新服务器安装mysql（如果本身有Mysql，重装Mysql，一定要重启服务;</li>
<li>将mysql服务加入到开机自启列表;</li>
<li>停服，备份数据;</li>
</ol>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ol>
<li><p>目标服务器上新建Mysql用户、数据库；</p>
</li>
<li><p>传输备份脚本；</p>
<p>刚开始使用scp命令将备份脚本传输到目标服务器，使用Mysql命令恢复DB。备份脚本500多M，压缩后150多，采用这种方式实在是太慢。</p>
<p>摸索其他方式，最后通过Mysql Workbench里的Schema Transfer Wizard功能进行同步，大大缩短了同步时间。</p>
</li>
<li><p>应用连接Mysql进行验证，成功；</p>
</li>
</ol>
<h2 id="调优"><a href="#调优" class="headerlink" title="调优"></a>调优</h2><p>​    迁移到新服务器之后，检测到应用响应时间过长，主要是因为数据库返回比较慢。对Mysql进行调优，主要是开启Mysql查询缓存，应用恢复正常响应速度。下面列举一些常用配置</p>
<ol>
<li><p>查询缓存的设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看查询缓存的设置</span><br><span class="line">#如下参数都可是使用 select @@global.XXXX; 单独查询</span><br><span class="line">show variables like &#x27;%query_cache%&#x27;;</span><br><span class="line"></span><br><span class="line">hava_query_cache	查询缓存是否可用，YES/NO</span><br><span class="line"></span><br><span class="line">query_cache_limit	缓存大小，超过该值不会进行缓存，默认1M</span><br><span class="line"></span><br><span class="line">query_cache_min_res_unit 双刃剑，默认4KB，设置值大对大数据查询有好处，如果都是小数据查询，易造成内存碎片和浪费</span><br><span class="line"></span><br><span class="line">query_cache_size	缓存内存大小。</span><br><span class="line">				设置方法：set @@global.query_cache_size=1000000;</span><br><span class="line">				</span><br><span class="line">query_cache_type	查询缓存是否使用，OFF(0)/ON(1)/DEMAND(2)</span><br><span class="line">				当DEMAND时，必须使用SQL_CACHE关键字才会缓存，如select SQL_CACHE user_name from user;</span><br><span class="line">				当ON时，不想使用缓存使用sql_no_cache关键字，如select sql_no_cache user_name from user;另外，SQL中有用到mysql函数也不会缓存。</span><br><span class="line">				设置方法： set session query_cache_type=off;</span><br><span class="line">				</span><br><span class="line">query_cache_wlock_invalidate	</span><br><span class="line"></span><br><span class="line">#查看查询缓存的状态</span><br><span class="line">show status like &#x27;%Qcache%&#x27;;</span><br><span class="line">Qcache_free_blocks	目前处于空闲状态的 Query Cache中内存Block数量</span><br><span class="line">Qcache_free_memory	目前处于空闲状态的 Query Cache内存总量</span><br><span class="line">Qcache_hits		Query Cache 命中次数</span><br><span class="line">Qcache_inserts		向 Query Cache中插入新的 Query Cache的次数，即没命中的次数</span><br><span class="line">Qcache_lowmem_prunes	当 Query Cache内存容量不走，删除老的 Query Cache给新对象的次数</span><br><span class="line">Qcache_not_cached	没有被Cache的SQL数，包含无法被Cache的SQL、由于query_cache_type设置不会被Cache的SQL</span><br><span class="line">Qcache_queries_in_cache	目前 Query Cache中的SQL数量</span><br><span class="line">Qcache_total_blocks	Query Cache中总Block数量</span><br><span class="line"></span><br><span class="line">#调优</span><br><span class="line">1. query_cache_min_res_unit的设置</span><br><span class="line">query_cache_min_res_unit = (query_cache_size - Qcache_free_memory)/ Qcache_queries_in_cache</span><br><span class="line"></span><br><span class="line">2. Qcache_Lowmem_prunes值较大，说明查询缓存区较小，需调大；</span><br><span class="line"></span><br><span class="line">3. Qcache_free_blocks 较多，说明内存碎片较多，需清理，FLUSH QUERY CACHE</span><br><span class="line"></span><br><span class="line">4. 查询缓存碎片率： Qcache_free_blocks / Qcache_total_blocks * 100%</span><br><span class="line">该值超过20%，使用FLUSH QUERY CACHE整理缓存碎片，或者调小query_cache_min_res_unit</span><br><span class="line"></span><br><span class="line">5. 查询缓存利用率：(query_cache_size - Qcache_free_memory) / query_cache_size * 100%</span><br><span class="line">该值在25%以下，说明query_cache_siz设置过大，可适当减小；</span><br><span class="line">该值在80%以上，且Qcache_lowmem_prunes &gt; 50，说明query_cache_siz有点小，或者碎片太大；</span><br><span class="line"></span><br><span class="line">6. 查询缓存命中率：(Qcache_hits - Qcache_inserts) / Qcache_hits * 100%</span><br><span class="line">该值较低，说明写操作比较频繁，或者有些碎片</span><br></pre></td></tr></table></figure></li>
<li><p>其他配置</p>
<p>大部分应用，设置查询缓存的配置就可以满足需要了，如果不够可以设置其他参数</p>
<p><a href="http://blog.csdn.net/nightelve/article/details/17393631">http://blog.csdn.net/nightelve/article/details/17393631</a></p>
</li>
</ol>
<h2 id="one-more-thing"><a href="#one-more-thing" class="headerlink" title="one more thing"></a>one more thing</h2><p>还有一点需要注意，有时设置了各项参数调整之后，Mysql反应还是很慢，这时候可以查看磁盘使用情况，有可能是磁盘容量不够，限制了读写导致查询效率低。</p>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql重装后无法正常启动</title>
    <url>/2018/01/17/Mysql%E9%87%8D%E8%A3%85%E5%90%8E%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    最近在做服务器上的DB迁移，服务器上的Mysql重新安装后无法正常启动服务，查看版本信息正常。</p>
<p>​    当使用mysql -uroot -p命令登录时，报</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR 2002 (HY000): Can&#x27;t connect to local MySQL server through socket &#x27;/var/lib/mysql/mysql.sock&#x27; (2)</span><br></pre></td></tr></table></figure>



<p>​    怀疑服务没有启动，启动服务时service mysqld start，报</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL Daemon failed to start.</span><br><span class="line"></span><br><span class="line">Starting mysqld:   [FAILED]</span><br></pre></td></tr></table></figure>

<h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>​    百度了一下，有的说没有权限，需要授权，有的说需要在/etc/my.cnf中加配置。试过都不行。最后尝试将mysql所有文件删掉，杀掉所有进程重启，终于成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//删除文件、自启服务、杀掉进程</span><br><span class="line">rm -rf /var/lib/mysql/</span><br><span class="line">rm /var/lock/subsys/mysqld</span><br><span class="line">killall mysqld</span><br><span class="line"></span><br><span class="line">//启动服务</span><br><span class="line">service mysqld start</span><br></pre></td></tr></table></figure>

<h2 id="one-more-thing"><a href="#one-more-thing" class="headerlink" title="one more thing"></a>one more thing</h2><p>​    除了以上情况出现“ERROR 2002 (HY000) Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (2)”报错，还有另外一种情况，已经安装好mysql服务，然后将mysql移动到另外的目录，启动mysql时找不到mysql.sock，是因为my.cnf中配置的路径还是原来的目录，将my.cnf中的配置修改就可以了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编辑my.cnf，事先可以使用cp命令备份</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改新的目录，我的是/data1/mysql</span></span><br><span class="line">[mysqld]</span><br><span class="line">datadir=/data1/mysql</span><br><span class="line">socket=/data1/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">socket=/data1/mysql/mysql.sock</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJs安装与升级</title>
    <url>/2020/10/14/NodeJs%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="NodeJs安装"><a href="#NodeJs安装" class="headerlink" title="NodeJs安装"></a>NodeJs安装</h1><p>首先安装homebrew</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用brew安装node</span></span><br><span class="line">brew install node</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后查看版本</span></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h1 id="NodeJs升级"><a href="#NodeJs升级" class="headerlink" title="NodeJs升级"></a>NodeJs升级</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清楚node的缓存</span></span><br><span class="line">sudo npm cache clean -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装n</span></span><br><span class="line">sudo npm install -g n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用n安装最新的稳定版本</span></span><br><span class="line">sudo n stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级npm</span></span><br><span class="line">sudo npm install npm -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>其他命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># node所有版本</span></span><br><span class="line">npm view node versions </span><br><span class="line"><span class="comment"># npm所有版本</span></span><br><span class="line">npm view npm versions </span><br><span class="line"><span class="comment"># 已安装插件</span></span><br><span class="line">npm list</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx备忘录</title>
    <url>/2019/11/12/Nginx%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># centos</span></span><br><span class="line">yum install nginx</span><br><span class="line"><span class="comment"># ubuntu</span></span><br><span class="line">sudo apt-get install nginx;</span><br><span class="line"><span class="comment"># mac</span></span><br><span class="line">brew install nginx</span><br><span class="line"><span class="comment"># 或者编译源码包，不推荐。</span></span><br><span class="line"><span class="comment"># 先下载，解压</span></span><br><span class="line">./configure			<span class="comment"># 可以通过-prefix=PATH 指定安装目录</span></span><br><span class="line">make &amp; make install</span><br></pre></td></tr></table></figure>

<h1 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mac中nginx默认安装在/usr/local/Cellar/nginx，同时也会加入到/usr/local/bin，进入</span></span><br><span class="line"><span class="comment"># 启动。默认加载conf中的nginx.conf配置文件</span></span><br><span class="line">./nginx 或 ./nginx -s start</span><br><span class="line"><span class="comment"># 热启动(不down机更新配置)</span></span><br><span class="line">./nginx -s reload</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">./nginx -s stop</span><br><span class="line"><span class="comment"># 修改*.conf配置文件后，检查语法是否正常</span></span><br><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># http默认端口80</span></span><br><span class="line"><span class="comment"># https默认端口443</span></span><br></pre></td></tr></table></figure>

<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nginx目录下</span></span><br><span class="line">confg/	<span class="comment"># 配置文件目录</span></span><br><span class="line">logs/	<span class="comment"># 日志目录</span></span><br><span class="line">html/	<span class="comment"># 网站文件目录</span></span><br><span class="line">sbin/	<span class="comment"># 命令目录</span></span><br><span class="line">conf.d/	<span class="comment"># 有些安装完成之后会有这个目录，也是配置目录。nginx启动时会优先去加载config/nginx.conf，如果没有，加载该目录中的配置。</span></span><br></pre></td></tr></table></figure>

<h1 id="nginx-conf配置"><a href="#nginx-conf配置" class="headerlink" title="nginx.conf配置"></a>nginx.conf配置</h1><p>使用mac的brew安装，目录在/usr/local/etc/nginx</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">main</span></span><br><span class="line">events &#123;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  ....</span><br><span class="line">  <span class="attribute">upstream</span> myproject &#123;</span><br><span class="line">    .....</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="section">location</span> &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="section">location</span> &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>nginx配置文件主要分为六个区域：<br><code>main(全局设置)</code>、<code>events(nginx工作模式)</code>、<code>http(http设置)</code>、<br><code>sever(主机设置)</code>、<code>location(URL匹配)</code>、<code>upstream(负载均衡服务器设置)</code>。</p>
<h2 id="main模块"><a href="#main模块" class="headerlink" title="main模块"></a>main模块</h2><p>main是全局配置：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">user</span> nobody nobody;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据情况自己制定日志目录</span></span><br><span class="line"><span class="attribute">error_log</span>  /usr/local/var/nginx/error.log  <span class="literal">notice</span>;</span><br><span class="line"><span class="attribute">pid</span>        /usr/local/var/nginx/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">100000</span>;</span><br></pre></td></tr></table></figure>

<p><code>user</code> 来指定Nginx Worker进程运行用户以及用户组，默认由nobody账号运行。</p>
<p><code>worker_processes</code>来指定了Nginx要开启的子进程数。每个Nginx进程平均耗费10M~12M内存。最优值取决于许多因素，包括（但不限于）CPU核的数量、存储数据的硬盘数量及负载模式。不能确定的时候，将其设置为可用的CPU内核数将是一个好的开始（设置为“auto”将尝试自动检测它）。该值设置的是子进程worker数量，同时还有一个主进程master，比如设置值为2时，总共有3个进程。</p>
<p><code>error_log</code>用来定义全局错误日志文件。日志输出级别有debug、info、notice、warn、error、crit可供选择，其中，debug输出日志最为最详细，而crit输出日志最少。</p>
<p><code>pid</code>用来指定进程id的存储文件位置。</p>
<p><code>worker_rlimit_nofile</code>用于指定一个nginx进程可以打开的最多文件描述符数目，受限于操作系统的配置。如果你的nginx报错“too many open files”，就是操作系统的值比你设置的值小。可以通过<code>ulimit -n</code>查看操作系统的值。通过<code>ulimit -n 65535</code>修改，该命令将操作系统修改为65535。</p>
<h2 id="events模块"><a href="#events模块" class="headerlink" title="events模块"></a>events模块</h2><p>events模块来用指定nginx的工作模式和工作模式及连接数上限：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">use</span> <span class="literal">kqueue</span>; <span class="comment">#mac平台</span></span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>use</code>用来指定Nginx的工作模式。Nginx支持的工作模式有select、poll、kqueue、epoll、rtsig和/dev/poll。其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中，因为Mac基于BSD,所以Mac也得用这个模式，对于Linux系统，epoll工作模式是首选。</p>
<p><code>worker_connections</code>用于定义Nginx每个进程的最大连接数，即接收前端的最大请求数，默认是1024。最大客户端连接数由<code>worker_processes</code>和<code>worker_connections</code>决定,即<code>Max_clients=worker_processes*worker_connections</code>。在作为反向代理时，Max_clients变为：<code>Max_clients = worker_processes * worker_connections/4</code>。（关于max_clients值的计算，官方文档也没有给出明确公式，网上说法也不一。可以看下这个，我觉得还挺靠谱：<a href="https://www.cnblogs.com/tangchuanyang/p/6076725.html">Max_clients计算公式</a>）<br>进程的最大连接数受Linux系统进程的最大打开文件数限制（每个TCP连接都要创建一个socket句柄，每个socket句柄同时也是一个文件句柄），只有操作系统中的<code>ulimit -n</code>的值比worker_connections的值大，该设置才有效。</p>
<h2 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h2><p>http模块是最核心的模块，它负责HTTP服务器相关属性的配置，主要包含server和upstream子模块。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line">    <span class="attribute">log_format</span>  myFormat  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line">    <span class="attribute">access_log</span>  /usr/local/var/nginx/access.log  myFormat;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">server_tokens</span> <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span>      <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span>     <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">	······</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>include</code> 可以用来加载其他配置文件，如<code>include /etc/nginx/conf.d/*.conf</code>。上例中用来引入设定文件的mime类型，类型在配置文件目录下的mime.type文件定义，来告诉nginx来识别文件类型。</p>
<p><code>default_type</code>默认文件类型，当文件类型未定义时使用该值，值默认为<code>text/plain</code>。通常修改为<code>application/octet-stream</code>，使用二进制流的方式解析。</p>
<p><code>log_format</code>设置日志的格式，<code>myFormat</code>相当于别名，配合<code>access_log</code>使用。</p>
<p><code>access_log</code> 访问日志存放目录。nginx调优时可以关闭该功能，提高磁盘IO读写速度。</p>
<p><code>server_tokens</code> 对于性能没有优化，当访问失败时，可以隐藏nginx版本信息。</p>
<p><code>sendfile</code> 可以使用sendfile()，使文件传输更高效。传输文件涉及到将内容从磁盘读取，写到Tcp连接的过程。该项关闭时的流程是，Pre-sendfile是传送数据之前在用户空间申请数据缓冲区。之后用read()将数据从文件拷贝到内核读取缓冲区，再从内核读取缓冲区读到用户缓冲区，write()将用户缓冲区数据写到内核Socket缓冲区，再写入网络协议引擎，进行传输。sendfile()可以在任意两个文件描述符之间互相拷贝数据，而sendfile()是可以立即将数据从磁盘读，经OS缓存，写入TCP socket，不经过用户缓冲区。因为这种拷贝是在内核完成的（避免了内核缓冲区和用户缓冲区之间的数据拷贝），sendfile()要比组合read()和write()以及打开关闭丢弃缓冲更加有效。</p>
<p><code>tcp_nopush</code> 告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送。</p>
<p><code>tcp_nodelay</code> 告诉nginx不要缓存数据，而是一段一段的发送。当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。<code>tcp_nopush</code>和<code>tcp_nodelay</code>两个指令设置为on用于防止网络阻塞。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">	······</span><br><span class="line">	</span><br><span class="line">  <span class="attribute">keepalive_timeout</span>  <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">  <span class="attribute">client_header_timeout</span> <span class="number">10</span>;</span><br><span class="line">	<span class="attribute">client_body_timeout</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="attribute">reset_timedout_connection</span> <span class="literal">on</span>;</span><br><span class="line">	<span class="attribute">send_timeout</span> <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="attribute">limit_conn_zone</span> $binary_remote_addr zone=addr:<span class="number">5m</span>;</span><br><span class="line">	<span class="attribute">limit_conn</span> addr <span class="number">100</span>;</span><br><span class="line">	</span><br><span class="line">	······</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>keepalive_timeout</code>设置客户端连接保持活动的超时时间。在超过这个时间之后，服务器会关闭该连接。</p>
<p><code>client_header_timeout</code> 请求头超时时间。</p>
<p><code>client_body_timeout</code> 请求体超时时间。</p>
<p><code>reset_timeout_connection</code> 关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。</p>
<p><code>send_timeout</code>  指定客户端的响应超时时间。这个设置不会用于整个转发器，而是在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx就会关闭连接。</p>
<p><code>limit_conn_zone</code> 设置addr连接的共享内存为5m。$binary_remote_addr的长度为 4 bytes，会话信息的长度为 32 bytes，5m大约可以记录<code>5*1k*32 </code>个会话信息（一个会话占用 32 bytes。如果一个会话占用64bytes，可保存<code>5*1k*16</code>个会话）。</p>
<p><code>limit_conn</code> 设置addr的最大连接数为100，每个ip最多同时开100个连接。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">	······</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># gzip配置，可根据情况关闭</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_disable</span> <span class="string">&quot;msie6&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># gzip_static on;</span></span><br><span class="line">    <span class="attribute">gzip_proxied</span> any;</span><br><span class="line">    <span class="attribute">gzip_min_length</span> <span class="number">1000</span>;</span><br><span class="line">    <span class="attribute">gzip_comp_level</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line">	</span><br><span class="line">	······</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>gzip</code> 采用gzip压缩的形式发送数据。可以减少发送的数据量。</p>
<p><code>gzip_disable</code>为指定的客户端禁用gzip功能。我们设置成IE6或者更低版本以使我们的方案能够广泛兼容。</p>
<p><code>gzip_static</code>告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源。这要求你预先压缩你的文件（在这个例子中被注释掉了），从而允许你使用最高压缩比，这样nginx就不用再压缩这些文件了（想要更详尽的gzip_static的信息，请点击这里）。</p>
<p><code>gzip_proxied</code>允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求。</p>
<p><code>gzip_min_length</code>设置对数据启用压缩的最少字节数。如果一个请求小于1000字节，我们最好不要压缩它，因为压缩这些小的数据会降低处理此请求的所有进程的速度。</p>
<p><code>gzip_comp_level</code>设置数据的压缩等级。这个等级可以是1-9之间的任意数值，9是最慢但是压缩比最大的。我们设置为4，这是一个比较折中的设置。</p>
<p><code>gzip_types</code>设置需要压缩的数据格式。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">	······</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 文件配置，可根据情况配置，现在好多都不配置了，仅当了解吧</span></span><br><span class="line">    <span class="attribute">open_file_cache</span> max=<span class="number">100000</span> inactive=<span class="number">20s</span>; </span><br><span class="line">    <span class="attribute">open_file_cache_valid</span> <span class="number">30s</span>; </span><br><span class="line">    <span class="attribute">open_file_cache_min_uses</span> <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">open_file_cache_errors</span> <span class="literal">on</span>;</span><br><span class="line">	</span><br><span class="line">	······</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>open_file_cache</code>打开缓存的同时也指定了缓存最大数目，以及缓存的时间。我们可以设置一个相对高的最大时间，这样我们可以在它们不活动超过20秒后清除掉。</p>
<p><code>open_file_cache_valid</code> 在open_file_cache中指定检测正确信息的间隔时间。</p>
<p><code>open_file_cache_min_uses</code> 定义了open_file_cache中指令参数不活动时间期间里最小的文件数。</p>
<p><code>open_file_cache_errors</code>指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件。我们也包括了服务器模块，这些是在不同文件中定义的。如果你的服务器模块不在这些位置，你就得修改这一行来指定正确的位置。</p>
<h2 id="server模块"><a href="#server模块" class="headerlink" title="server模块"></a>server模块</h2><p>server模块是http的子模块，用来定义虚拟主机的配置。一个http中可以有多个server。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8080</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost <span class="number">127.0.0.1</span> www.xxx.com;</span><br><span class="line">        <span class="comment"># 全局定义，如果都是这一个目录，这样定义最简单。</span></span><br><span class="line">        <span class="attribute">root</span>   /Users/xxx/www;</span><br><span class="line">        <span class="attribute">index</span>  index.php index.html index.htm; </span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">        <span class="attribute">access_log</span>  usr/local/var/host.access.log  main;</span><br><span class="line">        <span class="attribute">aerror_log</span>  usr/local/var/host.<span class="literal">error</span>.log  <span class="literal">error</span>;</span><br><span class="line">        ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>listen</code>用于指定虚拟主机的服务端口。<br><code>server_name</code>用来指定IP地址或者域名，多个域名之间用空格分开。<br><code>root</code> 表示在这整个<code>server</code>虚拟主机内，全部的root web根目录。注意要和<code>locate &#123;&#125;</code>下面定义的区分开来。<br><code>index</code> 全局定义访问的默认首页地址。注意要和<code>locate &#123;&#125;</code>下面定义的区分开来。<br><code>charset</code>用于设置网页的默认编码格式。<br><code>access_log</code>用来指定此虚拟主机的访问日志存放路径，最后的main用于指定访问日志的输出格式。</p>
<h2 id="location模块"><a href="#location模块" class="headerlink" title="location模块"></a>location模块</h2><p>nginx中最核心的模块，用来配置请求的路由，以及各种页面的处理情况。支持正则表达式、条件判断，同时可以设置负载均衡、反向代理、虚拟域名等。</p>
<h3 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h3><p>location的url匹配具有一定优先级，其优先级如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> [ = | <span class="regexp">~ |</span> <span class="regexp">~* |</span><span class="regexp"> ^~</span> ]  uri  &#123; &#125;</span><br><span class="line"><span class="comment"># =开头表示精确匹配</span></span><br><span class="line"><span class="comment"># ^~ 开头表示uri以某个常规字符串开头，这个不是正则表达式</span></span><br><span class="line"><span class="comment"># ~ 开头表示区分大小写的正则匹配;</span></span><br><span class="line"><span class="comment"># ~* 开头表示不区分大小写的正则匹配</span></span><br><span class="line"><span class="comment"># / 通用匹配, 如果没有其它匹配,任何请求都会匹配到</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 优先级</span></span><br><span class="line">(<span class="attribute">location</span> =) &gt; (location 完整路径) &gt; (location<span class="regexp"> ^~</span> 路径) &gt; (location <span class="regexp">~* 正则顺序)</span> &gt; (location 部分起始路径) &gt; (/)</span><br></pre></td></tr></table></figure>

<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>语法方面，主要有：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /static &#123;</span><br><span class="line">    <span class="attribute">root</span>   /var/app/www;</span><br><span class="line">    <span class="comment"># alias  /var/app/www; </span></span><br><span class="line">    <span class="attribute">index</span>  index.php index.html index.htm;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>root</code> 用于指定当访问<code>/static</code>目录时，所对应的主机对应的目录，为<code>/var/app/www/static</code>。</p>
<p><code>alias</code> 与root类似，但是区别在于当访问<code>/static</code>时，对应的路径为<code>/var/app/www</code>。</p>
<p><code>index</code> 默认首页，按先后顺序依次查找。</p>
<p><code>try files</code> 至少两个参数，按照顺序进行访问尝试，最后一个参数最好配置为静态页面，防止死循环。</p>
<p><code>rewite</code> 将一个url重写成另一个url。</p>
<p><code>proxy_pass</code> 反向代理配置，代理请求。其具体用法：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当访问http://127.0.0.1/proxy/1.png时</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理到http://127.0.0.2/1.png</span></span><br><span class="line"><span class="attribute">location</span> /proxy/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.2/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理到http://127.0.0.2/proxy/1.png</span></span><br><span class="line"><span class="attribute">location</span> /proxy/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理到http://127.0.0.2/img/1.png</span></span><br><span class="line"><span class="attribute">location</span> /proxy/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.2/img/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理到http://127.0.0.2/img1.png</span></span><br><span class="line"><span class="attribute">location</span> /proxy/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.2/img;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="upstream模块"><a href="#upstream模块" class="headerlink" title="upstream模块"></a>upstream模块</h2><p>upstream模块负责负载均衡。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> baidu.com&#123;</span><br><span class="line">    ip_hash;	<span class="comment"># 负载算法</span></span><br><span class="line">    <span class="attribute">server</span> xx:xx:xx:<span class="number">1</span>:<span class="number">8080</span>;		<span class="comment"># server列表</span></span><br><span class="line">    <span class="attribute">server</span> xx:xx:xx:<span class="number">1</span>:<span class="number">8080</span> down;</span><br><span class="line">    <span class="attribute">server</span> xx:xx:xx:<span class="number">1</span>:<span class="number">8080</span>  max_fails=<span class="number">3</span>  fail_timeout=<span class="number">20s</span>;</span><br><span class="line">    <span class="attribute">server</span> xx:xx:xx:<span class="number">1</span>:<span class="number">8080</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5种负载算法：</strong></p>
<p><code>轮询(默认)</code> 每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，则自动剔除故障机器，使用户访问不受影响。</p>
<p><code>weight</code> 指定轮询权重，weight值越大，分配到的几率就越高，主要用于后端每台服务器性能不均衡的情况。</p>
<p><code>ip_hash</code> 每个请求按访问IP的哈希结果分配，这样每个访客固定访问一个后端服务器，可以有效的解决动态网页存在的session共享问题。</p>
<p><code>fair(第三方)</code> 更智能的一个负载均衡算法，此算法可以根据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。如果想要使用此调度算法，需要Nginx的upstream_fair模块。</p>
<p><code>url_hash(第三方)</code> 按访问URL的哈希结果来分配请求，使每个URL定向到同一台后端服务器，可以进一步提高后端缓存服务器的效率。如果想要使用此调度算法，需要Nginx的hash软件包。</p>
<p><strong>另外，每台server还可以设置不同的负载状态：</strong></p>
<p><code>down</code> 表示当前server暂时不参与负载均衡。</p>
<p><code>backup</code> 预留的备份机，当其他所有非backup机器出现故障或者繁忙的时候，才会请求backup机器，这台机器的访问压力最轻。</p>
<p><code>max_fails</code> 允许请求的失败次数，默认为1，配合fail_timeout一起使用。</p>
<p><code>fail_timeout</code> 经历max_fails次失败后，暂停服务的时间，默认为10s（某个server连接失败了max_fails次，则nginx会认为该server不工作了。同时，在接下来的 fail_timeout时间内，nginx不再将请求分发给失效的server）。</p>
<p>当负载调度算法为<strong>ip_hash</strong>时，后端服务器在负载均衡调度中的状态不能是weight和backup。</p>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">########### 每个指令必须有分号结束。#################</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置用户或者组，默认为nobody nobody。</span></span><br><span class="line"><span class="comment">#user administrator administrators; </span></span><br><span class="line"><span class="comment">#允许生成的进程数，默认为1</span></span><br><span class="line"><span class="comment">#worker_processes 2; </span></span><br><span class="line"><span class="comment">#指定nginx进程运行文件存放地址</span></span><br><span class="line"><span class="comment">#pid /nginx/pid/nginx.pid; </span></span><br><span class="line"><span class="comment">#制定错误日志路径，级别。这个设置可以放入全局块，http块，server块，级别依次为：debug|info|notice|warn|error|crit|alert|emerg</span></span><br><span class="line"><span class="attribute">error_log</span> log/error.log <span class="literal">debug</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">#工作模式及连接数上限</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="comment">#设置网路连接序列化，防止惊群现象发生，默认为on</span></span><br><span class="line">    <span class="attribute">accept_mutex</span> <span class="literal">on</span>; </span><br><span class="line">    <span class="comment">#设置一个进程是否同时接受多个网络连接，默认为off</span></span><br><span class="line">    <span class="attribute">multi_accept</span> <span class="literal">on</span>; </span><br><span class="line">    <span class="comment">#事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span></span><br><span class="line">    <span class="comment">#use epoll; </span></span><br><span class="line">    <span class="comment">#单个work进程允许的最大连接数，默认为512</span></span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#http服务器</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment">#文件扩展名与文件类型映射表。设定mime类型(邮件支持类型),类型由mime.types文件定义</span></span><br><span class="line">    <span class="comment">#include /usr/local/etc/nginx/conf/mime.types;</span></span><br><span class="line">    <span class="attribute">include</span> mime.types; </span><br><span class="line">    <span class="comment">#默认文件类型，默认为text/plain</span></span><br><span class="line">    <span class="attribute">default_type</span> application/octet-stream; </span><br><span class="line"></span><br><span class="line">    <span class="comment">#取消服务访问日志</span></span><br><span class="line">    <span class="comment">#access_log off;      </span></span><br><span class="line">    <span class="comment">#自定义日志格式</span></span><br><span class="line">    <span class="attribute">log_format</span> myFormat <span class="string">&#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;</span>; </span><br><span class="line">    <span class="comment">#设置访问日志路径和格式。&quot;log/&quot;该路径为nginx日志的相对路径，mac下是/usr/local/var/log/。combined为日志格式的默认值</span></span><br><span class="line">    <span class="attribute">access_log</span> log/access.log myFormat; </span><br><span class="line">    <span class="attribute">rewrite_log</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。（sendfile系统调用不需要将数据拷贝或者映射到应用程序地址空间中去）</span></span><br><span class="line">    <span class="attribute">sendfile</span> <span class="literal">on</span>; </span><br><span class="line">    <span class="comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span></span><br><span class="line">    <span class="attribute">sendfile_max_chunk</span> <span class="number">100k</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">#连接超时时间，默认为75s，可以在http，server，location块。</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span> <span class="number">65</span>; </span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip压缩开关</span></span><br><span class="line">    <span class="comment">#gzip on;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设定实际的服务器列表</span></span><br><span class="line">    <span class="attribute">upstream</span> mysvr1 &#123;    </span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:7878</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.10.121:3333</span> backup; <span class="comment">#热备(其它所有的非backup机器down或者忙的时候，请求backup机器))</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">upstream</span> mysvr2 &#123;</span><br><span class="line">    <span class="comment">#weigth参数表示权值，权值越高被分配到的几率越大</span></span><br><span class="line">       <span class="attribute">server</span> <span class="number">192.168.1.11:80</span> weight=<span class="number">5</span>;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">192.168.1.12:80</span> weight=<span class="number">1</span>;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">192.168.1.13:80</span> weight=<span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">upstream</span> https-svr &#123;</span><br><span class="line">    <span class="comment">#每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题</span></span><br><span class="line">       ip_hash;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">192.168.1.11:90</span>;</span><br><span class="line">       <span class="attribute">server</span> <span class="number">192.168.1.12:90</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page 404 https://www.baidu.com; #错误页</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#HTTP服务器</span></span><br><span class="line">    <span class="comment">#静态资源一般放在nginx所在主机</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>; <span class="comment">#监听HTTP端口</span></span><br><span class="line">        <span class="attribute">server_name</span> <span class="number">127.0.0.1</span>; <span class="comment">#监听地址  </span></span><br><span class="line">        <span class="attribute">keepalive_requests</span> <span class="number">120</span>; <span class="comment">#单连接请求上限次数</span></span><br><span class="line">        <span class="attribute">set</span> $doc_root_dir <span class="string">&quot;/Users/doing/IdeaProjects/edu-front-2.0&quot;</span>; <span class="comment">#设置server里全局变量</span></span><br><span class="line">        <span class="comment">#index index.html;  #定义首页索引文件的名称</span></span><br><span class="line">        <span class="attribute">location</span> ~*^.+$ &#123; <span class="comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span></span><br><span class="line">            <span class="attribute">root</span> $doc_root_dir; <span class="comment">#静态资源根目录</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://mysvr1; <span class="comment">#请求转向“mysvr1”定义的服务器列表</span></span><br><span class="line">            <span class="comment">#deny 127.0.0.1; #拒绝的ip</span></span><br><span class="line">            <span class="comment">#allow 172.18.5.54; #允许的ip              </span></span><br><span class="line">         &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#http</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> www.helloworld.com; <span class="comment">#监听基于域名的虚拟主机。可有多个，可以使用正则表达式和通配符</span></span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>; <span class="comment">#编码格式</span></span><br><span class="line">        <span class="attribute">set</span> $static_root_dir <span class="string">&quot;/Users/doing/static&quot;</span>;</span><br><span class="line">        <span class="attribute">location</span> /app1 &#123; <span class="comment">#反向代理的路径（和upstream绑定），location后面设置映射的路径 </span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://zp_server1;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="attribute">location</span> /app2 &#123;  </span><br><span class="line">            <span class="attribute">proxy_pass</span> http://zp_server2;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ ^/(images|javascript|js|css|flash|media|static)/</span> &#123;  <span class="comment">#静态文件，nginx自己处理</span></span><br><span class="line">            <span class="attribute">root</span> $static_root_dir;</span><br><span class="line">            <span class="attribute">expires</span> <span class="number">30d</span>; <span class="comment">#静态资源过时间30天</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ /\.ht</span> &#123;  <span class="comment">#禁止访问 .htxxx 文件</span></span><br><span class="line">            <span class="attribute">deny</span> all;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> = /do_not_delete.html &#123; <span class="comment">#直接简单粗暴的返回状态码及内容文本</span></span><br><span class="line">            <span class="attribute">return</span> <span class="number">200</span> <span class="string">&quot;hello.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="comment">#指定某些路径使用https访问(使用正则表达式匹配路径+重写uri路径)</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~* /http*</span> &#123; <span class="comment">#路径匹配规则：如localhost/http、localhost/httpsss等等</span></span><br><span class="line">        <span class="comment">#rewrite只能对域名后边的除去传递的参数外的字符串起作用，例如www.c.com/proxy/html/api/msg?method=1&amp;para=2只能对/proxy/html/api/msg重写。</span></span><br><span class="line">        <span class="comment">#rewrite 规则 定向路径 重写类型;</span></span><br><span class="line">        <span class="comment">#rewrite后面的参数是一个简单的正则。$1代表正则中的第一个()。</span></span><br><span class="line">        <span class="comment">#$host是nginx内置全局变量，代表请求的主机名</span></span><br><span class="line">        <span class="comment">#重写规则permanent表示返回301永久重定向</span></span><br><span class="line">            <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> https://$host/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#错误处理页面（可选择性配置）</span></span><br><span class="line">        <span class="comment">#error_page 404 /404.html;</span></span><br><span class="line">        <span class="comment">#error_page 500 502 503 504 /50x.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#以下是一些反向代理的配置(可选择性配置)</span></span><br><span class="line">        <span class="comment">#proxy_redirect off;</span></span><br><span class="line">        <span class="comment">#proxy_set_header Host $host; #proxy_set_header用于设置发送到后端服务器的request的请求头</span></span><br><span class="line">        <span class="comment">#proxy_set_header X-Real-IP $remote_addr;</span></span><br><span class="line">        <span class="comment">#proxy_set_header X-Forwarded-For $remote_addr; #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span></span><br><span class="line">        <span class="comment">#proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span></span><br><span class="line">        <span class="comment">#proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</span></span><br><span class="line">        <span class="comment">#proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span></span><br><span class="line">        <span class="comment">#proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span></span><br><span class="line">        <span class="comment">#proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span></span><br><span class="line">        <span class="comment">#proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span></span><br><span class="line">        <span class="comment">#proxy_temp_file_write_size 64k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span></span><br><span class="line">        <span class="comment">#client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数</span></span><br><span class="line">    &#125;</span><br><span class="line">         </span><br><span class="line">    <span class="comment">#https</span></span><br><span class="line">    <span class="comment">#(1)HTTPS的固定端口号是443，不同于HTTP的80端口；</span></span><br><span class="line">    <span class="comment">#(2)SSL标准需要引入安全证书，所以在 nginx.conf 中你需要指定证书和它对应的 key</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  www.hellohttps1.com www.hellohttps2.com;</span><br><span class="line">        <span class="attribute">set</span> $geek_web_root <span class="string">&quot;/Users/doing/IdeaProjects/backend-geek-web&quot;</span>;</span><br><span class="line">        <span class="attribute">ssl_certificate</span>        /usr/local/etc/nginx/ssl-key/ssl.crt; <span class="comment">#ssl证书文件位置(常见证书文件格式为：crt/pem)</span></span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  /usr/local/etc/nginx/ssl-key/ssl.key; <span class="comment">#ssl证书key位置</span></span><br><span class="line">        <span class="attribute">location</span> /passport &#123;</span><br><span class="line">            <span class="attribute">send_timeout</span> <span class="number">90</span>;</span><br><span class="line">            <span class="attribute">proxy_connect_timeout</span> <span class="number">50</span>;</span><br><span class="line">            <span class="attribute">proxy_send_timeout</span> <span class="number">90</span>;</span><br><span class="line">            <span class="attribute">proxy_read_timeout</span> <span class="number">90</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://https-svr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ ^/(res|lib)/</span> &#123;</span><br><span class="line">            <span class="attribute">root</span> $geek_web_root; </span><br><span class="line">            <span class="attribute">expires</span> <span class="number">7d</span>;</span><br><span class="line">            <span class="comment">#add_header用于为后端服务器返回的response添加请求头，这里通过add_header实现CROS跨域请求服务器</span></span><br><span class="line">            <span class="attribute">add_header</span> Access-Control-Allow-Origin *; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#ssl配置参数（选择性配置）</span></span><br><span class="line">        <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">1m</span>;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#配置访问控制：每个IP一秒钟只处理一个请求，超出的请求会被delayed</span></span><br><span class="line">    <span class="comment">#语法：limit_req_zone  $session_variable  zone=name:size  rate=rate (为session会话状态分配一个大小为size的内存存储区，限制了每秒（分、小时）只接受rate个IP的频率)</span></span><br><span class="line">    <span class="attribute">limit_req_zone</span>  $binary_remote_addr zone=req_one:<span class="number">10m</span>    rate=1r/s nodelay;</span><br><span class="line">    <span class="attribute">location</span> /pay &#123;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host $http_host;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real_IP $remote_addr;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        <span class="comment">#访问控制：limit_req zone=name [burst=number] [nodelay];</span></span><br><span class="line">        <span class="attribute">limit_req</span> zone=req_one burst=<span class="number">5</span>; <span class="comment">#burst=5表示超出的请求(被delayed)如果超过5个，那些请求会被终止（默认返回503）</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://mysvr1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#可以把子配置文件放到/usr/local/etc/nginx/servers/路径下，通过include引入</span></span><br><span class="line">    <span class="attribute">include</span> /usr/local/etc/nginx/servers/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>



<h1 id="内置全局变量"><a href="#内置全局变量" class="headerlink" title="内置全局变量"></a>内置全局变量</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$args</span> ：这个变量等于请求行中的参数，同<span class="variable">$query_string</span></span><br><span class="line"><span class="variable">$content_length</span> ： 请求头中的Content-length字段。</span><br><span class="line"><span class="variable">$content_type</span> ： 请求头中的Content-Type字段。</span><br><span class="line"><span class="variable">$document_root</span> ： 当前请求在root指令中指定的值。</span><br><span class="line"><span class="variable">$host</span> ： 请求主机头字段，否则为服务器名称。</span><br><span class="line"><span class="variable">$http_user_agent</span> ： 客户端agent信息</span><br><span class="line"><span class="variable">$http_cookie</span> ： 客户端cookie信息</span><br><span class="line"><span class="variable">$limit_rate</span> ： 这个变量可以限制连接速率。</span><br><span class="line"><span class="variable">$request_method</span> ： 客户端请求的动作，通常为GET或POST。</span><br><span class="line"><span class="variable">$remote_addr</span> ： 客户端的IP地址。</span><br><span class="line"><span class="variable">$remote_port</span> ： 客户端的端口。</span><br><span class="line"><span class="variable">$remote_user</span> ： 已经经过Auth Basic Module验证的用户名。</span><br><span class="line"><span class="variable">$request_filename</span> ： 当前请求的文件路径，由root或<span class="built_in">alias</span>指令与URI请求生成。</span><br><span class="line"><span class="variable">$scheme</span> ： HTTP方法（如http，https）。</span><br><span class="line"><span class="variable">$server_protocol</span> ： 请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class="line"><span class="variable">$server_addr</span> ： 服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class="line"><span class="variable">$server_name</span> ： 服务器名称。</span><br><span class="line"><span class="variable">$server_port</span> ： 请求到达服务器的端口号。</span><br><span class="line"><span class="variable">$request_uri</span> ： 包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class="line"><span class="variable">$uri</span> ： 不带请求参数的当前URI，<span class="variable">$uri</span>不包含主机名，如”/foo/bar.html”。</span><br><span class="line"><span class="variable">$document_uri</span> ： 与<span class="variable">$uri</span>相同。</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJs对session的处理、进程间通信</title>
    <url>/2017/08/19/NodeJs%E5%AF%B9session%E7%9A%84%E5%A4%84%E7%90%86%E3%80%81%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h2 id="对于session的处理"><a href="#对于session的处理" class="headerlink" title="对于session的处理"></a>对于session的处理</h2><p>​    最近项目中有用到NodeJs，也在学习。开发过程中发现，NodeJs对于session的处理方式与普通服务器不同。</p>
<ol>
<li>NodeJs服务器收到请求后，会为本次请求创建session，但是如果这次请求中没有对session的处理（放值等操作），在请求返回时不会做set-cookie操作，该次请求不会生成cookie。所以重复调用该请求每次都会生成一个新的session；</li>
<li>请求处理函数中对session有操作，返回时有set-cookie，生成cookie，下次请求时不会生成新的session；</li>
</ol>
<h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><p>​    Node开始时是单线程，为了有效利用资源，后来增加了child_process可以多进程。后来又封装了cluster模块，更好的处理多进程。进程间通信主要依赖于监听。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cluster = <span class="built_in">require</span>(<span class="string">&#x27;cluster&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> numCPUs = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>).cpus().length;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主进程</span></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;[master] &#x27;</span> + <span class="string">&quot;start master...&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//根据CPU数量创建子进程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;</span><br><span class="line">        cluster.fork();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//cluster监听</span></span><br><span class="line">    cluster.on(<span class="string">&#x27;listening&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">worker, address</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;[master] &#x27;</span> + <span class="string">&#x27;listening: worker&#x27;</span> + worker.id + <span class="string">&#x27;,pid:&#x27;</span> + worker.process.pid + <span class="string">&#x27;, Address:&#x27;</span> + address.address + <span class="string">&quot;:&quot;</span> + address.port);</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="built_in">Object</span>.keys(cluster.workers).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">    	<span class="comment">//监听所有的worker</span></span><br><span class="line">        cluster.workers[id].on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;[master] &#x27;</span> + <span class="string">&#x27;received msg:&#x27;</span> + msg + <span class="string">&#x27;from worker&#x27;</span> + id);</span><br><span class="line">        &#125;);</span><br><span class="line">    </span><br><span class="line">    	<span class="comment">//向子进程发送信息</span></span><br><span class="line">    	cluster.workers[id].send(<span class="string">&#x27;[master] &#x27;</span> + <span class="string">&#x27;send msg &#x27;</span> + i + <span class="string">&#x27; to worker&#x27;</span> + worker.id);</span><br><span class="line">    &#125;);</span><br><span class="line">  </span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (cluster.isWorker) &#123;	<span class="comment">//子进程</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//向父进程发送数据</span></span><br><span class="line">    process.send(data);</span><br><span class="line">  <span class="comment">//监听数据</span></span><br><span class="line">  	process.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="comment">//子进程都监听3000端口</span></span><br><span class="line">    http.createServer(app).listen(<span class="number">3000</span>) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>cluster对象</strong><br>cluster的各种属性和函数</p>
<ul>
<li>cluster.setttings:配置集群参数对象</li>
<li>cluster.isMaster:判断是不是master节点</li>
<li>cluster.isWorker:判断是不是worker节点</li>
<li>Event: ‘fork’: 监听创建worker进程事件</li>
<li>Event: ‘online’: 监听worker创建成功事件</li>
<li>Event: ‘listening’: 监听worker向master状态事件</li>
<li>Event: ‘disconnect’: 监听worker断线事件</li>
<li>Event: ‘exit’: 监听worker退出事件</li>
<li>Event: ‘setup’: 监听setupMaster事件</li>
<li>cluster.setupMaster([settings]): 设置集群参数</li>
<li>cluster.fork([env]): 创建worker进程</li>
<li>cluster.disconnect([callback]): 关闭worket进程</li>
<li>cluster.worker: 获得当前的worker对象</li>
<li>cluster.workers: 获得集群中所有存活的worker对象</li>
</ul>
<p><strong>worker对象</strong><br>worker的各种属性和函数：可以通过cluster.workers, cluster.worket获得。</p>
<ul>
<li>worker.id: 进程ID号</li>
<li>worker.process: ChildProcess对象</li>
<li>worker.suicide: 在disconnect()后，判断worker是否自杀</li>
<li>worker.send(message, [sendHandle]): master给worker发送消息。注：worker给发master发送消息要用process.send(message)</li>
<li>worker.kill([signal=’SIGTERM’]): 杀死指定的worker，别名destory()</li>
<li>worker.disconnect(): 断开worker连接，让worker自杀</li>
<li>Event: ‘message’: 监听master和worker的message事件</li>
<li>Event: ‘online’: 监听指定的worker创建成功事件</li>
<li>Event: ‘listening’: 监听master向worker状态事件</li>
<li>Event: ‘disconnect’: 监听worker断线事件</li>
<li>Event: ‘exit’: 监听worker退出事件</li>
</ul>
]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>NodeJs更换npm源</title>
    <url>/2018/03/17/NodeJs%E6%9B%B4%E6%8D%A2npm%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p>​    最近在做一些Node的应用，安装模块时官方的源不仅速度慢，很多模块无法下载（科学上网也不行）。没办法╮(╯_╰)╭，只好换成taobao源，整理了几种方法。</p>
<h2 id="使用一次"><a href="#使用一次" class="headerlink" title="使用一次"></a>使用一次</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//使用一次安装express服务</span><br><span class="line">npm --registry https://registry.npm.taobao.org install express</span><br></pre></td></tr></table></figure>

<h2 id="永久替换"><a href="#永久替换" class="headerlink" title="永久替换"></a>永久替换</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//可以先查看原来的源地址，做好备份</span><br><span class="line">npm get registry</span><br><span class="line"></span><br><span class="line">//将npm源直接替换</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">//换回官方源</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure>

<h2 id="同时使用npm、cnpm"><a href="#同时使用npm、cnpm" class="headerlink" title="同时使用npm、cnpm"></a>同时使用npm、cnpm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//安装cnpm</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">//之后可以使用cnpm安装服务，不影响npm</span><br><span class="line">cnpm install express</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Frontend</category>
      </categories>
      <tags>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle彻底删除某database</title>
    <url>/2020/05/11/Oracle%E5%BD%BB%E5%BA%95%E5%88%A0%E9%99%A4%E6%9F%90database/</url>
    <content><![CDATA[<p>环境：Oracle 12c</p>
<p>假设要删除的库名为hello，首先登陆上主机。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在shell中执行下面命令，登陆sysdba用户</span></span><br><span class="line">sqlplus <span class="operator">/</span> <span class="keyword">as</span> sysdba;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 依次执行（该操作会将所有库删除）</span></span><br><span class="line">shutdown immediate;</span><br><span class="line">startup restrict mount;</span><br><span class="line"><span class="keyword">drop</span> database;</span><br><span class="line"><span class="comment">-- 然后退出sqlplus</span></span><br><span class="line">quit;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除dbs下面的引导文件</span></span><br><span class="line">cd $ORACLE_HOME<span class="operator">/</span>dbs</span><br><span class="line"><span class="comment">-- 将名称中包含库名（hello）的都删掉</span></span><br><span class="line">rm <span class="operator">-</span>f hc_HELLO.dat</span><br><span class="line">···</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找并删除数据文件</span></span><br><span class="line">find $ORACLE_BASE<span class="operator">/</span> <span class="operator">-</span>name $ORACLE_SID</span><br><span class="line"><span class="comment">-- 将查找到文件都删除</span></span><br><span class="line">rm <span class="operator">-</span>rf xxxx</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle编码问题</title>
    <url>/2020/05/11/Oracle%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>最近被Oracle的编码问题折腾的头都大了，在这里总结一下。</p>
<p>在Oracle搭建，以及初始化脚本过程中，共有4处涉及到编码问题。</p>
<p>关于编码问题，实际上讲的是如何设置编码，保证中文不乱码。如果是仅是英文字符，不会有乱码问题的。</p>
<p>有一点需要区分，命令执行环境是在shell，还是在sqlplus。</p>
<h1 id="操作系统字符集"><a href="#操作系统字符集" class="headerlink" title="操作系统字符集"></a>操作系统字符集</h1><p>可通过locale和env | grep LANG命令查看。</p>
<p>该编码对于Oracle无影响，因为Oracle有自己的字符集，优先使用自己的字符集。</p>
<p>就算两台主机的字符集不同，只要Oracle的字符集相同，也可以正常使用。</p>
<p>只有在当前主机做调整时，才会依赖主机字符集。比如在shell中执行数据库的更新查改操作，其中涉及到主机编码与oracle编码互转的过程。如果两边编码不匹配，也会乱码。</p>
<p>需要强调的一点是，sqlplus如果本身没有设置字符集，会默认使用操作系统的字符集。所以在使用sqlplus执行脚本的时候，要注意NLS_LANG设置为AMERICAN_AMERICA.ZHS16GBK，保证中文不乱码。</p>
<h1 id="Oracle字符集"><a href="#Oracle字符集" class="headerlink" title="Oracle字符集"></a>Oracle字符集</h1><p>在建库(create database)时，可以设置该库的字符集，一般选择AL32UTF8。</p>
<p>当登入sqlplus之后，执行sql语句做插入或者更新操作时，存入的数据以该字符为准。</p>
<h1 id="脚本字符集"><a href="#脚本字符集" class="headerlink" title="脚本字符集"></a>脚本字符集</h1><p>这点指的是sql脚本文件中的编码字符集。</p>
<p>一般来讲我们常用的只有两种，UTF8或者GB2312。</p>
<p>当脚本中全英文时，任何编码都可以。</p>
<p>当脚本中涉及到中文字符时，需要保存为GB2312格式。</p>
<h1 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h1><p>常用编辑器，比如UE、Notepad++，在下方状态栏都会显示文件格式，总共有三种格式，UNIX、Dos\Windows、MAC。</p>
<p>这个编码标明该文件是在什么操作系统下编辑生成的。</p>
<p>我们的脚本直接在sqlplus中执行，已测试过使用UNIX、Dos\Windows都可以正常执行。</p>
<p>如果是在shell中执行，需要改成UNIX。之前我在win7上编写过一个Dockerfile，上传到主机执行报错，改为UNIX才正常执行。</p>
<p>在Linux主机上，可以再vim中查看、修改文件格式。输入<code>:set ff</code>查看，输入<code>:set ff=unix</code>修改。</p>
<h1 id="ssh工具编码"><a href="#ssh工具编码" class="headerlink" title="ssh工具编码"></a>ssh工具编码</h1><p>这点应该不用多说了，相信大家都有经验。不管是shell，或是sqlplus中执行命令，如果最终要展示的结果中包含中文，就算主机编码正确，如果工具编码不对，也会展示乱码。</p>
<p>同样，一般设置为UTF8。</p>
<p>为了避免工具对数据库中数据编码的影响，我一般的操作都是，将sql脚本上传到Oracle主机上，然后登陆sqlplus，使用<code>@xxx/xxx/xxx.sql</code>的方式，直接加载脚本文件执行。</p>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Python2与Python3差异</title>
    <url>/2018/05/23/Python2%E4%B8%8EPython3%E5%B7%AE%E5%BC%82/</url>
    <content><![CDATA[<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><table>
<thead>
<tr>
<th>方法</th>
<th>Python2</th>
<th>Python3</th>
</tr>
</thead>
<tbody><tr>
<td>file.write()</td>
<td>file.write(str)</td>
<td>file.write(str.encode()) # 需转为byte</td>
</tr>
<tr>
<td>self.cf.read()</td>
<td>self.cf.read(file_path)</td>
<td>self.cf.read(file_path, encoding=””) #需指定编码</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础知识</title>
    <url>/2018/05/24/Python%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="Python规范"><a href="#Python规范" class="headerlink" title="Python规范"></a>Python规范</h2><p><a href="https://blog.csdn.net/warm77/article/details/78353632">规范</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle高可用架构</title>
    <url>/2020/05/12/Oracle%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p>最近了解了一些Oracle方面的高可用架构，记录一下。</p>
<p>有时间补上架构图。</p>
<h1 id="DG架构"><a href="#DG架构" class="headerlink" title="DG架构"></a>DG架构</h1><p>该架构是传统的主备架构，也是最常用的架构，满足一般系统的要求。</p>
<p>首先，申请两台完全同构的主机，挂载相同的NAS，并安装Oracle，修改设置。一般primary机对外提供服务，其他standby机备份。</p>
<p>每台Oracle主机都是独立的主机与存储，通过同步归档日志和在线日志实现数据同步。</p>
<p>一般DG架构中每台主机都会挂载一块NAS，Oracle数据和日志存放在NAS上。</p>
<p>建tablespace时指定datafile到NAS上。</p>
<p>当异常情况时，切换备机，切换时间一般为几分钟。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 常规模式，创建名为dbdata的表空间</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space dbdata</span><br><span class="line">  logging</span><br><span class="line">  datafile <span class="string">&#x27;/xxx/xxx/data.dbf&#x27;</span> size <span class="number">500</span>m</span><br><span class="line">  autoextend <span class="keyword">on</span></span><br><span class="line">  extent management <span class="keyword">local</span> autoallocate</span><br><span class="line">  segment space management auto ;</span><br></pre></td></tr></table></figure>

<p>PS：这里讲下DG和OGG主要的区别。DG效率更高、更稳定、占用资源少，但是只支持Oracle间同步。OGG效率、稳定性、资源占用都要差一点，但是支持不同数据库间同步。</p>
<h1 id="RAC架构"><a href="#RAC架构" class="headerlink" title="RAC架构"></a>RAC架构</h1><p>DG只使用Oracle就可以完成。</p>
<p>RAC架构需要与Oracle的另外一种技术，ASM（Automatic Storage Management），结合使用。基本原理是，不同Oracle主机共享同一块存储，就不需要数据同步了，而ASM是Oracle开发的管理存储的工具。</p>
<p>该模式下需要先建立一个ASM实例，然后不同Oracle主机使用该ASM，创建表空间时指定该ASM。</p>
<p>RAC、ASM对于硬件的要求更高，且由于共享数据，基本可以实时切换。一般应用于核心系统，如支付系统等。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ASM模式，ASM实例名为+data_asm，创建名为dbdata的表空间</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space dbdata</span><br><span class="line">  datafile <span class="string">&#x27;+data_asm&#x27;</span> size <span class="number">500</span>m</span><br><span class="line">  autoextend <span class="keyword">on</span>;</span><br></pre></td></tr></table></figure>

<h1 id="多机房架构"><a href="#多机房架构" class="headerlink" title="多机房架构"></a>多机房架构</h1><p>不论是DG架构，还是RAC架构，都在单一机房。</p>
<p>当企业对于数据有更高要求时，就要考虑多机房架构了。</p>
<p>根据是否同城又有同城备份，异城备份，以及两地三备份。</p>
<p>就说两地三备份吧，总共涉及3个机房，主机房A，同城机房B，异地机房C。</p>
<p>在主机房A中Oracle可以选择DG或者RAC架构。</p>
<p>同城机房B和异地机房C，视要求搭建。不同库间使用DG同步，同步链路为A-&gt;B，A-&gt;C。</p>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
        <tag>高可用架构</tag>
      </tags>
  </entry>
  <entry>
    <title>RDBMS那点事儿之Undo-log、Redo-log和binlog</title>
    <url>/2020/03/11/RDBMS%E9%82%A3%E7%82%B9%E4%BA%8B%E5%84%BF%E4%B9%8BUndo-log%E3%80%81Redo-log%E5%92%8Cbinlog/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h2><p>当数据变更时，记录数据原始的状态。分两级策略，undo buffer和undo log。</p>
<p>undo buffer即在内存中，这种状态的数据是不稳定的，一般会立即持久化到磁盘中的file文件，即undo log。不同数据库undo log存放位置不同。对于Mysql来说，Mysql5.7后的版本最好单独创建undo表空间，避免一次更新大批量数据生成大量undo log却无法存储。</p>
<p>在事务开始之前生成。</p>
<h2 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h2><p>当数据变更时，记录数据要变更的状态。也分两级，redo buffer和redo log。</p>
<p>同undo log，redo buffer也存储在内存中，redo log持久化在磁盘上的file文件。</p>
<p>数据库收到更新请求，先查询原数据，写到内存（记为data buffer），然后生成redo buffer，持久化为redo log。之后更新data buffer，在持久化到data file。</p>
<p>在事务开始之后生成。如果事务比较大，在中间执行过程中都会生成，并不是事务提交时一次性生成。</p>
<p>同时会记录事务的状态，包括事务编号（事务开始时生成）、开始状态、结束状态。判断事务是否成功即根据该文件中事务的状态。</p>
<p>不同类型数据库存储格式不一样，有的undo log、redo log分开记录，格式如&lt;事务ID，变更项，变更前内容&gt;和&lt;事务ID，变更项，变更后内容&gt;。有些记录在同一个文件，格式如&lt;事务ID，变更项，变更前内容，变更后内容&gt;。</p>
<h2 id="binlog"><a href="#binlog" class="headerlink" title="binlog"></a>binlog</h2><p>用于mysql节点之间同步用的，基本可以做到实时同步。目前也有很多基于binlog实现的跨库同步，比如canal。</p>
<p>在事务提交时一次性写入。所以开启该功能时会一定程度上影响效率。</p>
<h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><p>再完整的梳理一下完整的执行过程，当使用事务时：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">生成事务ID -&gt; 查询原值写到data buffer -&gt; undo log（包括buffer到file）-&gt; 事务开始 -&gt; redo log（包括buffer到file）-&gt; 执行操作（update或其他，操作过程中实时写redo log）-&gt; 事务完成 -&gt; binlog写入</span><br></pre></td></tr></table></figure>

<p>中间任何环节出现问题，比如重启，以redo log中的事务状态为依据，判断是否需要回滚。</p>
<p>以上说的是单个事务的流程。但是我们知道最头疼的永远是并发的场景。</p>
<p>聊到这里了，顺便聊聊并发。</p>
<h1 id="并发情况下产生的问题"><a href="#并发情况下产生的问题" class="headerlink" title="并发情况下产生的问题"></a>并发情况下产生的问题</h1><p>假设有两个事务T1、T2在同时进行。</p>
<h2 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h2><p>当T1执行过程中，对某条数据做了update，T2读取了该数据，但是最终T1回滚，T2再读数据，发现两次数据不一致。</p>
<p>关键点在于T1没有执行成功。</p>
<p>隔离级别为<code>Read Uncommitted</code>级别会出现该问题。</p>
<p>将隔离级别设置为<code>Read Committed</code>可解决该问题。Sql Server、Oracle模式是该级别。</p>
<h2 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h2><p>T1执行过程中，先读取了某条数据，然后T2对于该数据做了update，T1再读，发现两次数据不一致。</p>
<p>关键点在于，在T1执行过程的两次读之间，T2已经做完变更了。</p>
<p>将隔离级别设置为<code>Repeatable Read</code>可解决该问题。Mysql默认是该级别。</p>
<h2 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h2><p>T1执行过程中，查询符合某些条件的一批数据，然后T2做了insert操作，T1在重新执行查询语句，发现多了一条数据。</p>
<p>幻读与不可重复读有些类似，主要区别点在于所做的操作。不可重复读仅对记录做update，所以只要锁记录就可以解决。幻读是执行的insert操作，需要对表进行控制。</p>
<p>将隔离级别设置为<code>Serializable</code>可解决该问题。该级别下事务不能并发执行，只能顺序执行，所以性能也是最差的。</p>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>DB</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-Session管理</title>
    <url>/2018/07/13/Redis-Session%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​    项目中使用redis存储session，写了个session切面用于维护session，当用户调用接口时，会先检验redis中是否有session（有效期为30min，调用接口刷新有效期），如果没有，创建session。在并发的场景下，需要用锁避免重复写。StringRedisTemplate中没有对锁的封装，所以自己简单封装了两个取锁的方法。</p>
<h1 id="tryLock"><a href="#tryLock" class="headerlink" title="tryLock"></a>tryLock</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 尝试获取锁，如果获取到，并设置过期时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> seconds</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String keyName, Long seconds)</span> </span>&#123;</span><br><span class="line">    RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">    <span class="keyword">boolean</span> lockReturn = connection.setNX(keyName.getBytes(), LOCK_TRUE.getBytes());</span><br><span class="line">    connection.close();</span><br><span class="line">    <span class="keyword">if</span> (lockReturn) &#123;</span><br><span class="line">        redisTemplate.expire(keyName, seconds, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lockReturn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="getLock"><a href="#getLock" class="headerlink" title="getLock"></a>getLock</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一定会获取到锁，并设置过期时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> seconds</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getLock</span><span class="params">(String keyName, Long seconds)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span><br><span class="line">    <span class="keyword">boolean</span> lockReturn = connection.setNX(keyName.getBytes(), LOCK_TRUE.getBytes());</span><br><span class="line">    <span class="keyword">while</span> (!lockReturn) &#123;</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        lockReturn = connection.setNX(keyName.getBytes(), LOCK_TRUE.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">    connection.expire(keyName.getBytes(), seconds);</span><br><span class="line">    connection.close();</span><br><span class="line">    <span class="keyword">return</span> lockReturn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="releaseLock"><a href="#releaseLock" class="headerlink" title="releaseLock"></a>releaseLock</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放锁</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseLock</span><span class="params">(String keyName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> redisTemplate.delete(keyName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>在投产后，发现效果并不好，实例经常会跑着跑着，突然卡死。分析原因应该是redis连接池资源耗尽，导致服务器所有线程阻塞，整台实例不可用（一般跑2、3天才会出现）。因为项目已经使用了StringRedisTemplate，本身它会管理自己的连接池。而我通过getConnection获取到的连接，相当于脱离于连接池，有可能导致与StringRedisTemplate不兼容。</p>
<p>如果有同学自己通过jedis实现了jedispool进行管理，应该没有这个问题，感兴趣的小伙伴可以试一下。jedis无法自动关闭连接，当使用完之后，别忘了手动关闭。</p>
<p>后来，发现了Redisson，专门用于解决分布式问题，也提供了锁的实现，小伙伴可以用一下。</p>
<p>顺便再吐槽下StringRedisTemplate，感觉就是对redis的命令做了简单的封装，而且开启事务时还有坑…</p>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis主备自动切换高可用方案</title>
    <url>/2020/10/14/Redis%E4%B8%BB%E5%A4%87%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​    某个客户购买了我们产品，需要到客户机房搭建高可用的redis，而且要求出现故障能够自动切换主备。考虑到节省机器，而且redis中数据也不会超过1G，决定用主从架构+keepalived实现。</p>
<h1 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h1><h2 id="所需资源"><a href="#所需资源" class="headerlink" title="所需资源"></a>所需资源</h2><ol>
<li>2台主机</li>
<li>1个vip</li>
</ol>
<h2 id="redis主从搭建"><a href="#redis主从搭建" class="headerlink" title="redis主从搭建"></a>redis主从搭建</h2><ol>
<li>2台主机分别安装reids，并设置为开机自启动</li>
<li>修改redis.conf，设置主从</li>
</ol>
<h2 id="设置keepalived"><a href="#设置keepalived" class="headerlink" title="设置keepalived"></a>设置keepalived</h2><ol>
<li>2台主机分别安装keepalived，并设置为开机自启动</li>
<li>编写监听redis的脚本、修改master状态的脚本、修改slave状态的脚本</li>
<li>修改keepalived.conf，设置vip、各脚本</li>
</ol>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><ol>
<li>先查看2台redis（A、B）的角色</li>
<li>手动将master（A）的redis关闭，然后查看slave（B）的角色是不是切换为master</li>
<li>在新的master（B）中设置一个值，比如hello</li>
<li>重新启动A，查看A的角色是否为slave，并验证A中是否将hello同步过来</li>
</ol>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redisson遇到的坑</title>
    <url>/2018/08/30/Redisson%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h1 id="WRONGTYPE-Operation-against-a-key-holding-the-wrong-kind-of-value"><a href="#WRONGTYPE-Operation-against-a-key-holding-the-wrong-kind-of-value" class="headerlink" title="WRONGTYPE Operation against a key holding the wrong kind of value"></a>WRONGTYPE Operation against a key holding the wrong kind of value</h1> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RLock lc = redisson.getLock(<span class="string">&quot;LOCK&quot;</span>); </span><br><span class="line">lc.lock(<span class="number">1000</span>,TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure>

<h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>redisson中的getLock为了保持原子性，使用Lua脚本一次提交。在设置锁时，使用hset。</p>
<p>当redis里面已经存在”LOCK”的变量，调用getLock（内部实现为hset(“LOCK”)），会报该异常。</p>
<h2 id="处理："><a href="#处理：" class="headerlink" title="处理："></a>处理：</h2><p>先确保redis中的”LOCK”参数删掉，在调用lock();</p>
<h1 id="unlock方法中的publish"><a href="#unlock方法中的publish" class="headerlink" title="unlock方法中的publish"></a>unlock方法中的publish</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RLock lc = redisson.getLock(<span class="string">&quot;LOCK&quot;</span>);</span><br><span class="line">lc.unlock();</span><br></pre></td></tr></table></figure>

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>项目中使用<code>psubscribe &quot;*&quot;</code>订阅了所有频道，在onMessage()监听处理中用到了Redisson锁，并且在函数最后有unlock()释放锁操作。</p>
<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>代码运行时，发现会一直触发onMessage()，造成了死循环。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>使用monitor实时监控redis执行的命令，发现在unlock时，会依次做下面的操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exists XXXX</span><br><span class="line">hexists XXXX ******</span><br><span class="line">hincrby XXXX ****** -1</span><br><span class="line">del XXXX</span><br><span class="line">publish redisson_lock_channel:&#123;XXXX&#125; 0</span><br></pre></td></tr></table></figure>

<p>可以看到在最后会向redisson_lock_channel:{XXXX} publish 一个0</p>
<h2 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h2><p>在onMessage()中针对自己想订阅的频道处理，否则return;</p>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis常用命令</title>
    <url>/2018/08/30/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="client-list"><a href="#client-list" class="headerlink" title="client list"></a>client list</h1><p>查看连接的客户端</p>
<h1 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h1><p>实时监控redis执行的命令</p>
<h1 id="info"><a href="#info" class="headerlink" title="info"></a>info</h1><p>redis信息</p>
<h1 id="配置密码"><a href="#配置密码" class="headerlink" title="配置密码"></a>配置密码</h1><p>找到对应的redis.conf文件，一般在/etc/目录下，然后找到requirepass，修改后面的值，并将前面的# 删掉</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># requirepass foobared</span></span><br></pre></td></tr></table></figure>

<h1 id="pub-sub"><a href="#pub-sub" class="headerlink" title="pub/sub"></a>pub/sub</h1><p>publish：发布；</p>
<p>subscribe：监听某一频道；</p>
<p>psubscribe：支持正则；</p>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis批量改名key</title>
    <url>/2018/04/13/Redis%E6%89%B9%E9%87%8F%E6%94%B9%E5%90%8Dkey/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    最近接到一个任务，需要将redis中的key进行rename。之前的结构为XXX-XXX-XXX-*，替换为XXX:XXX:XXX:*。</p>
<h2 id="思路-amp-方案"><a href="#思路-amp-方案" class="headerlink" title="思路&amp;方案"></a>思路&amp;方案</h2><p>​    第一反应想到是用正则，匹配出对应的key，然后利用redis中也有rename命令，支持重命名。尽量都在redis中处理。</p>
<p>​    后来调研了一下，redis中没有类似于find的命令😩，唯一可用的是keys命令，所以调整方案，使用keys+pattern匹配出所有对应的key，流向shell，shell中对key循环，转换key名。</p>
<p>​    其中还有一个坑，keys虽然支持正则，但是貌似只支持*，?、+、^都不支持。库中新结构、老结构的数据都有，所以只能枚举了</p>
<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//创建shell脚本</span><br><span class="line">vim rename.sh</span><br><span class="line"></span><br><span class="line">//拷贝如下内容</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">##redis主机IP</span></span><br><span class="line">host=127.0.0.1</span><br><span class="line"><span class="comment">##redis端口</span></span><br><span class="line">port=6379</span><br><span class="line"><span class="comment">##密码</span></span><br><span class="line">passwd=123456</span><br><span class="line"><span class="comment">##pattern模式</span></span><br><span class="line"><span class="comment"># patterns=(&quot;[a-zA-Z]*-[a-zA-Z0-9]*&quot; &quot;[a-zA-Z]-[a-zA-Z0-9]*-[a-zA-Z0-9]*&quot; &quot;[a-zA-Z]-[a-zA-Z0-9]*-[a-zA-Z0-9]*-*&quot;)</span></span><br><span class="line">patterns=(<span class="string">&quot;Answer-*-*-*&quot;</span> <span class="string">&quot;FaqInfo-*-*&quot;</span> <span class="string">&quot;ModelInfo-*-*&quot;</span> <span class="string">&quot;RelatedFaq-*-*-*&quot;</span> <span class="string">&quot;SensitiveWord-*&quot;</span> <span class="string">&quot;Term-*-*-*&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##备份redis</span></span><br><span class="line">redis-cli -h <span class="variable">$host</span> -p <span class="variable">$port</span> -a <span class="variable">$passwd</span> save</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;备份至=&gt;&#x27;</span></span><br><span class="line">redis-cli -h <span class="variable">$host</span> -p <span class="variable">$port</span> -a <span class="variable">$passwd</span> config get dir</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> <span class="variable">$&#123;patterns[@]&#125;</span></span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    <span class="comment">##循环获取key并删除</span></span><br><span class="line">    re=$(redis-cli -h <span class="variable">$host</span> -p <span class="variable">$port</span> -a <span class="variable">$passwd</span> --raw keys <span class="variable">$p</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$re</span></span><br><span class="line">    <span class="comment">##转成数组</span></span><br><span class="line">    arr=(<span class="variable">$re</span>)</span><br><span class="line">    <span class="comment">##打印数组长度</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;arr.len:&#x27;</span><span class="variable">$&#123;#arr[@]&#125;</span></span><br><span class="line">    <span class="comment">##循环数组</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> <span class="variable">$&#123;arr[@]&#125;</span></span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">            <span class="comment"># echo $key</span></span><br><span class="line">            <span class="comment"># echo &quot;key:&quot;$key</span></span><br><span class="line">            newKey=$(<span class="built_in">echo</span> <span class="variable">$&#123;key/\-/\:&#125;</span>)</span><br><span class="line">            newKey=$(<span class="built_in">echo</span> <span class="variable">$&#123;newKey/\-/\:&#125;</span>)</span><br><span class="line">            newKey=$(<span class="built_in">echo</span> <span class="variable">$&#123;newKey/\-/\:&#125;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$newKey</span></span><br><span class="line">            redis-cli -h <span class="variable">$host</span> -p <span class="variable">$port</span> -a <span class="variable">$passwd</span> rename <span class="variable">$key</span> <span class="variable">$newKey</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;done&#x27;</span></span><br><span class="line"></span><br><span class="line">//授执行权限</span><br><span class="line">chmod 777 rename.sh</span><br><span class="line"></span><br><span class="line">//执行</span><br><span class="line">sh rename.sh XXXX XX XX</span><br></pre></td></tr></table></figure>

<h2 id="恢复备份"><a href="#恢复备份" class="headerlink" title="恢复备份"></a>恢复备份</h2><p>​    脚本中会先将当前库中内容进行备份，备份到脚本运行目录中，文件名为dump.rdb。</p>
<p>恢复备份操作：</p>
<ol>
<li>停止Redis服务：<code>redis-cli shutdown</code>；</li>
<li>将dump.rdb文件拷贝到redis安装目录下的bin目录（我的是/usr/local/Cellar/redis/3.2.9/bin）；</li>
<li>重启redis服务 <code>redis-server &amp;</code>;</li>
</ol>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH连接保持会话</title>
    <url>/2018/02/03/SSH%E8%BF%9E%E6%8E%A5%E4%BF%9D%E6%8C%81%E4%BC%9A%E8%AF%9D/</url>
    <content><![CDATA[<h2 id="会话保持"><a href="#会话保持" class="headerlink" title="会话保持"></a>会话保持</h2><p>​    相信玩服务器的朋友都遇到过这个问题，终端里的ssh连接服务器经常超时，自动断开链接； 而又不想专门下载一个ssh客户端，一方面是因为安全问题，另一方面是觉得有些鸡肋。所以查了一下能否将ssh的会话保持住，不自动断开连接，还真有。</p>
<p>​    主要有两个参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#发送保持活跃的数据包时间间隔，单位为秒，默认300秒</span></span><br><span class="line">ServerAliveInterval 60 </span><br><span class="line"><span class="comment">#系统ssh服务维持最大的保活连接数量，默认是3</span></span><br><span class="line">ServerAliveCountMax 10 </span><br></pre></td></tr></table></figure>

<p>​    如果需要更改全部用户的设置，修改/etc/ssh/ssh_config中的文件；</p>
<p>​    如果只改某一个用户中的设置，修改~/etc/ssh/ssh_config中的文件；</p>
<p><em><strong>PS:</strong></em></p>
<p>Host * :Host后面加的是服务器ip、ip端，*代表所有服务器</p>
<h2 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h2><p>​    为经常访问的服务器设置别名，就不用每次都写全信息了。同样，还是编辑ssh_config文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//添加，后保存退出</span><br><span class="line">Host prd</span><br><span class="line">HostName 120.52.145.22</span><br><span class="line">User <span class="built_in">log</span></span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">IdentityFile  ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">//使用别名登录(如果不行重启下ssh服务:sudo service ssh reload)</span><br><span class="line">ssh prd</span><br></pre></td></tr></table></figure>

<p>其中，Host、HostName、User为必须，其他可以根据自己需要配置。各属性含义如下：</p>
<ul>
<li>Host 别名</li>
<li>HostName 指定登录的主机名或IP地址</li>
<li>Port 指定登录的端口号</li>
<li>User 登录用户名</li>
<li>IdentityFile 登录的公钥文件（如果是pem文件，可以将pem添加到ssh，ssh-add命令）</li>
<li>IdentitiesOnly 只接受SSH key 登录</li>
<li>PubkeyAuthentication</li>
</ul>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH通过Key登录服务器</title>
    <url>/2018/03/18/SSH%E9%80%9A%E8%BF%87Key%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="服务器上创建访问用户"><a href="#服务器上创建访问用户" class="headerlink" title="服务器上创建访问用户"></a>服务器上创建访问用户</h2><p>该步为可选，根据个人需要创建。不推荐直接使用root用户。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">adduser gavin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置密码</span></span><br><span class="line">passwd gavin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加sudo权限</span></span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="comment"># 添加下行</span></span><br><span class="line">gavin  ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure>

<p>通常为了增加密码复杂度，我会用<a href="http://tool.c7sky.com/password/">在线生成密码工具</a> 生成密码</p>
<h2 id="本机创建秘钥-公钥对（Key）"><a href="#本机创建秘钥-公钥对（Key）" class="headerlink" title="本机创建秘钥/公钥对（Key）"></a>本机创建秘钥/公钥对（Key）</h2><p>网上很多帖子都直接用<strong>ssh-keygen</strong>，或者<strong>ssh-keygen -t rsa</strong>，这样会生成名为id_rsa的Key（默认名），这样当你每次需要生成新的Key时，会覆盖以前的。如果你的所有认证共用一组Key，也可以，不过不推荐。</p>
<p>下为用rsa算法，在~/.ssh/下生成名为id_rsa.qcloud，注释为qcloud的Key：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># qcloud对应腾讯云，可以根据自己情况取名</span></span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa.qcloud -C <span class="string">&quot;qcloud&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后一路Enter（可以选择输入passphrase）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh/</span><br><span class="line">ll</span><br></pre></td></tr></table></figure>

<p>查看生成的<strong>id_rsa.qcloud</strong>、<strong>id_rsa.qcloud.pub</strong></p>
<h2 id="将公钥拷贝到服务器"><a href="#将公钥拷贝到服务器" class="headerlink" title="将公钥拷贝到服务器"></a>将公钥拷贝到服务器</h2><p>私钥存本地，公钥放到服务器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用gavin用户登录服务器，创建.ssh目录</span></span><br><span class="line">mkdir .ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本机拷贝到服务器</span></span><br><span class="line">scp -r ~/.ssh/id_rsa.qcloud.pub gavin@XXX.XXX.XXX.XXX:/home/gavin/.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改服务器上.ssh、authorized_keys权限，仅当前用户可操作</span></span><br><span class="line">chmod 700 .ssh</span><br><span class="line">chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure>

<h2 id="服务器开启秘钥验证"><a href="#服务器开启秘钥验证" class="headerlink" title="服务器开启秘钥验证"></a>服务器开启秘钥验证</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启秘钥验证</span></span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 另外可以关闭密码验证</span></span><br><span class="line">PasswordAuthentication no</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>

<h2 id="本机设置别名"><a href="#本机设置别名" class="headerlink" title="本机设置别名"></a>本机设置别名</h2><p>前面设置完，就可以无密码登录了。不过每次都要输入服务器ip，比较反人类。可以进一步设置别名，使体验更友好。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/ssh_config (或者~/.ssh/ssh_config)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加，保存退出</span></span><br><span class="line">Host qcloud</span><br><span class="line">HostName XXX.XXX.XXX.XXX</span><br><span class="line">User gavin</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line">IdentityFile  ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>如此设置之后，就可以直接<strong>ssh qcloud</strong>登录，方便快捷。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Solr演练</title>
    <url>/2018/09/09/Solr%E6%BC%94%E7%BB%83/</url>
    <content><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ol>
<li>访问<a href="https://www.apache.org/dyn/closer.cgi">官网</a>进行下载；</li>
<li>解压即可；</li>
</ol>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><ol>
<li>进到solr目录，执行<code>bin/solr start -e cloud</code>，多节点运行；</li>
<li>分别提示创建几个节点、第一个节点端口、第二个节点端口，按enter默认就可以；</li>
<li>输入集合名称，这里我们可以设置为techproducts；</li>
<li>然后提示创建几个分片、创建几个副本，这些默认2就可以；</li>
<li>然后选择使用哪组配置文件，总共有_default、sample_techproducts_configs两个选项，我们选后者；</li>
<li>创建完成，可以通过<code>localhost:8983</code>进入solr管理页面，在cloud中查看集合的结构；</li>
</ol>
<p><strong>如果第一步时报错：</strong></p>
<p>使用普通用户：</p>
<p><code>ERROR: Logs directory /etc/solr-7.4.0/example/cloud/node1/solr/../logs is not writable. Exiting</code></p>
<p>或者</p>
<p>使用root用户：</p>
<p><code>ERROR: Failed to start Solr using command: &quot;bin/solr&quot; start -cloud -p 8983 -s &quot;example/cloud/node1/solr&quot; Exception : org.apache.commons.exec.ExecuteException: Process exited with an error: 1 (Exit value: 1)</code></p>
<p>是因为用户访问权限不对，修改下权限就可以。我这里直接开了所有权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod -R 777 /etc/solr-7.4.0</span><br></pre></td></tr></table></figure>

<h1 id="索引数据"><a href="#索引数据" class="headerlink" title="索引数据"></a>索引数据</h1><p>Solr目录中的example提供了基础数据，我们可以把这些基础数据加载到刚才创建的techproducts集合，并建立索引：</p>
<p><code>bin/post -c techproducts example/exampledocs/*</code></p>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p>在Solr Admin中可以自己定义查询条件进行查询。</p>
<ol>
<li>先选中创建的techproducts集合，然后选择Query；</li>
<li>在q中输入自己的查询条件，默认*:*查询所有。比如<code>id:123</code>，就是查询id为123的内容；</li>
<li>多条件查询，中间用<code>+</code>连接，如：<code>+(features:&quot;CAS latency&quot;)+(id:&quot;VDBDB1A16&quot;)</code>；相反，如果希望结果中过滤掉某个属性的内容，用<code>-</code>连接，如：<code>+(features:&quot;CAS latency&quot;)-(id:&quot;VDBDB1A16&quot;)</code></li>
<li>fl对查询结果进行过滤，仅显示fl中的属性。多个属性<code>,</code>间隔；</li>
</ol>
<h1 id="Solr其他命令"><a href="#Solr其他命令" class="headerlink" title="Solr其他命令"></a>Solr其他命令</h1><h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/solr delete -c techproducts</span><br></pre></td></tr></table></figure>

<h3 id="创建新集合"><a href="#创建新集合" class="headerlink" title="创建新集合"></a>创建新集合</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/solr create -c &lt;yourCollection&gt; -s 2 -rf 2</span><br></pre></td></tr></table></figure>

<h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/solr stop -all</span><br></pre></td></tr></table></figure>

<h3 id="重新启动"><a href="#重新启动" class="headerlink" title="重新启动"></a>重新启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bin/solr start -c -p 8983 -s example/cloud/node1/solr</span><br><span class="line">bin/solr start -c -p 7574 -s example/cloud/node2/solr -z localhost:9983</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Solr</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot多台实例监控redis-key失效事件</title>
    <url>/2018/06/06/SpringBoot%E5%A4%9A%E5%AE%9E%E4%BE%8B%E7%9B%91%E6%8E%A7redis-key%E5%A4%B1%E6%95%88%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​    最近接到一个需求，redis中的变量失效时，需要记录到日志中。查了一下，可以通过订阅redis事件，java中进行处理。订阅事件会阻塞当前进程，所以需要开线程处理。后台服务是SpringBoot搭建，而且是多实例，为了确保每个事件仅消费一次，适用redis锁。</p>
<h1 id="Redis设置"><a href="#Redis设置" class="headerlink" title="Redis设置"></a>Redis设置</h1><p>​    redis中需要开启事件通知，默认是不开启的。</p>
<ol>
<li>修改redis.conf文件，设置notify-keyspace-events 为 Ex；</li>
<li>redis中执行<code>config set notify-keyspace-events Ex</code>（该方式重启redis失效）；</li>
</ol>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>K</td>
<td>键空间通知，以<code>__keyspace@&lt;db&gt;__</code>为前缀</td>
</tr>
<tr>
<td>E</td>
<td>键事件通知，以<code>__keysevent@&lt;db&gt;__</code>为前缀</td>
</tr>
<tr>
<td>g</td>
<td>del , expipre , rename 等类型无关的通用命令的通知</td>
</tr>
<tr>
<td>$</td>
<td>String命令</td>
</tr>
<tr>
<td>l</td>
<td>List命令</td>
</tr>
<tr>
<td>s</td>
<td>Set命令</td>
</tr>
<tr>
<td>h</td>
<td>Hash命令</td>
</tr>
<tr>
<td>z</td>
<td>有序集合命令</td>
</tr>
<tr>
<td>x</td>
<td>过期时间（每次key过期时生成）</td>
</tr>
<tr>
<td>e</td>
<td>去住时间（当key在内存存满了被清除时生成）</td>
</tr>
<tr>
<td>A</td>
<td>g$lshzxe的别名，因此“AKE”意味着所有事件</td>
</tr>
</tbody></table>
<h1 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h1><h2 id="设置JedisPool"><a href="#设置JedisPool" class="headerlink" title="设置JedisPool"></a>设置JedisPool</h2><h3 id="增加jedis依赖"><a href="#增加jedis依赖" class="headerlink" title="增加jedis依赖"></a>增加jedis依赖</h3><p>pom文件增加：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="yml中增加配置"><a href="#yml中增加配置" class="headerlink" title="yml中增加配置"></a>yml中增加配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jedis:</span></span><br><span class="line">  <span class="attr">max:</span></span><br><span class="line">    <span class="attr">total:</span> <span class="number">100</span></span><br><span class="line">    <span class="attr">idle:</span> <span class="number">10</span></span><br><span class="line">    <span class="attr">waitmillis:</span> <span class="number">10000</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">10000</span></span><br><span class="line">  <span class="attr">testOnBorrow:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<h3 id="实例化JedisPool"><a href="#实例化JedisPool" class="headerlink" title="实例化JedisPool"></a>实例化JedisPool</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请编写注释</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/6/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span></span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jedis.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jedis.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jedis.max.total&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxTotal;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jedis.max.idle&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxIdle;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jedis.max.waitmillis&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long maxWaitMillis;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jedis.max.timeout&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jedis.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisPool <span class="title">redisPoolFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        jedisPoolConfig.setMaxIdle(maxIdle);</span><br><span class="line">        jedisPoolConfig.setMaxWaitMillis(maxWaitMillis);</span><br><span class="line">        JedisPool jedisPool = <span class="keyword">new</span> JedisPool(jedisPoolConfig, host, port, timeout, password);</span><br><span class="line">        <span class="keyword">return</span> jedisPool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建监听类"><a href="#创建监听类" class="headerlink" title="创建监听类"></a>创建监听类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.springboot.util.ApplicationContextUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPubSub;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请编写注释</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/6/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisListener</span> <span class="keyword">extends</span> <span class="title">JedisPubSub</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INSTANCE_LOCK = <span class="string">&quot;INSTANCE_LOCK&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JedisPool jedisPool;</span><br><span class="line">    Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPMessage</span><span class="params">(String pattern, String channel, String message)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 线程中无法通过注解获取注入对象，在ApplicationContext中获取</span></span><br><span class="line">        jedisPool = ApplicationContextUtil.getBean(JedisPool.class);</span><br><span class="line">        jedis = jedisPool.getResource();</span><br><span class="line"></span><br><span class="line">	    <span class="comment">// 加锁。setnx是原子性操作，设置成功返回1，否则返回0</span></span><br><span class="line">        Long lock = jedis.setnx(INSTANCE_LOCK, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (lock == <span class="number">0</span>) &#123;</span><br><span class="line">        	jedis.close();</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">	    <span class="comment">// 写处理逻辑，可以做其他操作，也可以入库</span></span><br><span class="line">        System.out.println(pattern + <span class="string">&quot;=&quot;</span> + channel + <span class="string">&quot;=&quot;</span> + message);</span><br><span class="line">        </span><br><span class="line">        jedis.del(INSTANCE_LOCK);</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">// 订阅事件，使用线程中操作，否则阻塞当前进程</span></span><br><span class="line">        SubThread subThread = <span class="keyword">new</span> SubThread(jedisPool);</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(subThread);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一开始的方案，实例共用一个锁，实际发现可能会有实例A处理完，实例B才开始处理，导致处理多次的情况。</p>
<p>然后优化为将锁时间加长的方案。</p>
<p>而如果将锁时间加长，会导致多台实例处理是阻塞，进而优化为每个Key加锁、并延长锁时间的方案。</p>
<p>修改后如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPMessage</span><span class="params">(String pattern, String channel, String message)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.startsWith(message, KEYS_LOCK)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    jedisPool = ApplicationContextUtil.getBean(JedisPool.class);</span><br><span class="line">    jedis = jedisPool.getResource();</span><br><span class="line"></span><br><span class="line">    Long lock = jedis.setnx(KEYS_LOCK + message, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    jedis.expire(KEYS_LOCK + message, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (lock == <span class="number">0</span>) &#123;</span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(pattern + <span class="string">&quot;=&quot;</span> + channel + <span class="string">&quot;=&quot;</span> + message);</span><br><span class="line">    jedis.del(KEYS_LOCK);</span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建线程类"><a href="#创建线程类" class="headerlink" title="创建线程类"></a>创建线程类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请编写注释</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/6/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JedisPool jedisPool;</span><br><span class="line"><span class="comment">//	经测试，仅能通过 * 正则匹配，如果加前缀，匹配不到</span></span><br><span class="line">    String pattern = <span class="string">&quot;*&quot;</span>;</span><br><span class="line"><span class="comment">//    String pattern0 = &quot;keyspace@0:SessionID_*&quot;;</span></span><br><span class="line"><span class="comment">//    String pattern1 = &quot;__key*__:*&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//	可以监听某一特定channel的事件</span></span><br><span class="line"><span class="comment">//    String pattern2 = &quot;__keyevent@0__:*&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//	入参可以为String数组</span></span><br><span class="line"><span class="comment">//    String[] patterns = new String[]&#123;&quot;SessionID_*&quot;&#125;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubThread</span><span class="params">(JedisPool jedisPool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jedisPool = jedisPool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    	<span class="comment">//如果线程中出现问题，线程直接挂掉。</span></span><br><span class="line">    	<span class="comment">//使用while，重启线程</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            Jedis jedis = jedisPool.getResource();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                jedis.psubscribe(<span class="keyword">new</span> RedisListener(), pattern);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                jedis.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="创建ApplicationContextUtil类"><a href="#创建ApplicationContextUtil类" class="headerlink" title="创建ApplicationContextUtil类"></a>创建ApplicationContextUtil类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请编写注释</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yangfan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2018/6/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextUtil</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ApplicationContextUtil.applicationContext == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ApplicationContextUtil.applicationContext = applicationContext;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ApplicationContextUtil.getApplicationContext().getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt;<span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ApplicationContextUtil.getApplicationContext().getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt;<span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ApplicationContextUtil.getApplicationContext().getBean(name, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot常见报错</title>
    <url>/2018/04/18/SpringBoot%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h2 id="Whitelabel-Error-Page"><a href="#Whitelabel-Error-Page" class="headerlink" title="Whitelabel Error Page"></a>Whitelabel Error Page</h2><p>这种情况一般是配置不对，仔细检查下。</p>
<p>另外，新手常犯的错误就是，使用<code>@SpringBootApplication</code>注解的Application类，需要与controller同级目录。因为默认从Application类当前目录向下的子目录里扫描。</p>
<h2 id="Detected-both-xxx-jar-and-bound-xxx-jar-on-the-class-path"><a href="#Detected-both-xxx-jar-and-bound-xxx-jar-on-the-class-path" class="headerlink" title="Detected both xxx.jar and bound xxx.jar on the class path"></a>Detected both xxx.jar and bound xxx.jar on the class path</h2><p>jar包冲突，根据情况删除其中一个jar包。</p>
<p>由于springboot中很多包打包在一起，下面教大家如何看项目中的包分别包含哪些包：</p>
<p>1、使用idea中的<code>Show Dependencies</code></p>
<p>打开<code>View - Tool Windows - Maven Projects</code></p>
<img data-src="/2018/04/18/SpringBoot%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99/idea_maven_jar.png" class="">

<p>点击后，生成包依赖视图</p>
<img data-src="/2018/04/18/SpringBoot%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99/maven_jar.png" class="">

<p>2、 如果你的idea没有这个功能，可以使用maven命令显示结构，是一个树状图</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn dependency:tree</span><br><span class="line"></span><br><span class="line">//生成结构如下：</span><br><span class="line">[INFO] com.springboot:myspringbootdemo:jar:0.0.1-SNAPSHOT</span><br><span class="line">[INFO] +- org.springframework.boot:spring-boot-starter-jdbc:jar:2.0.1.RELEASE:compile</span><br><span class="line">[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:2.0.1.RELEASE:compile</span><br><span class="line">[INFO] |  |  +- org.springframework.boot:spring-boot:jar:2.0.1.RELEASE:compile</span><br><span class="line">[INFO] |  |  +- org.springframework.boot:spring-boot-autoconfigure:jar:2.0.1.RELEASE:compile</span><br><span class="line">[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:2.0.1.RELEASE:compile</span><br><span class="line">[INFO] |  |  |  +- ch.qos.logback:logback-classic:jar:1.2.3:compile</span><br><span class="line">[INFO] |  |  |  |  \- ch.qos.logback:logback-core:jar:1.2.3:compile</span><br><span class="line">[INFO] |  |  |  +- org.apache.logging.log4j:log4j-to-slf4j:jar:2.10.0:compile</span><br><span class="line">[INFO] |  |  |  |  \- org.apache.logging.log4j:log4j-api:jar:2.10.0:compile</span><br><span class="line">[INFO] |  |  |  \- org.slf4j:jul-to-slf4j:jar:1.7.25:compile</span><br><span class="line">[INFO] |  |  +- javax.annotation:javax.annotation-api:jar:1.3.2:compile</span><br><span class="line">[INFO] |  |  \- org.yaml:snakeyaml:jar:1.19:runtime</span><br><span class="line">[INFO] |  +- com.zaxxer:HikariCP:jar:2.7.8:compile</span><br><span class="line">[INFO] |  \- org.springframework:spring-jdbc:jar:5.0.5.RELEASE:compile</span><br><span class="line">[INFO] |     +- org.springframework:spring-beans:jar:5.0.5.RELEASE:compile</span><br><span class="line">[INFO] |     \- org.springframework:spring-tx:jar:5.0.5.RELEASE:compile</span><br><span class="line">[INFO] +- org.springframework.boot:spring-boot-starter-web:jar:2.0.1.RELEASE:compile</span><br><span class="line">[INFO] |  +- org.springframework.boot:spring-boot-starter-json:jar:2.0.1.RELEASE:compile</span><br><span class="line">[INFO] |  |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.9.5:compile</span><br><span class="line">[INFO] |  |  |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.9.0:compile</span><br><span class="line">[INFO] |  |  |  \- com.fasterxml.jackson.core:jackson-core:jar:2.9.5:compile</span><br><span class="line">[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jdk8:jar:2.9.5:compile</span><br><span class="line">[INFO] |  |  +- com.fasterxml.jackson.datatype:jackson-datatype-jsr310:jar:2.9.5:compile</span><br><span class="line">[INFO] |  |  \- com.fasterxml.jackson.module:jackson-module-parameter-names:jar:2.9.5:compile</span><br><span class="line">[INFO] |  +- org.springframework.boot:spring-boot-starter-tomcat:jar:2.0.1.RELEASE:compile</span><br><span class="line">[INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-core:jar:8.5.29:compile</span><br><span class="line">[INFO] |  |  +- org.apache.tomcat.embed:tomcat-embed-el:jar:8.5.29:compile</span><br><span class="line">[INFO] |  |  \- org.apache.tomcat.embed:tomcat-embed-websocket:jar:8.5.29:compile</span><br><span class="line">[INFO] |  +- org.hibernate.validator:hibernate-validator:jar:6.0.9.Final:compile</span><br><span class="line">[INFO] |  |  +- javax.validation:validation-api:jar:2.0.1.Final:compile</span><br><span class="line">[INFO] |  |  +- org.jboss.logging:jboss-logging:jar:3.3.2.Final:compile</span><br><span class="line">[INFO] |  |  \- com.fasterxml:classmate:jar:1.3.4:compile</span><br><span class="line">[INFO] |  +- org.springframework:spring-web:jar:5.0.5.RELEASE:compile</span><br><span class="line">[INFO] |  \- org.springframework:spring-webmvc:jar:5.0.5.RELEASE:compile</span><br><span class="line">[INFO] |     +- org.springframework:spring-aop:jar:5.0.5.RELEASE:compile</span><br><span class="line">[INFO] |     +- org.springframework:spring-context:jar:5.0.5.RELEASE:compile</span><br><span class="line">[INFO] |     \- org.springframework:spring-expression:jar:5.0.5.RELEASE:compile</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot相关资料</title>
    <url>/2017/07/29/SpringBoot%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul>
<li><a href="http://blog.didispace.com/categories/Spring-Boot/">程序员DD-翟永超</a></li>
<li><a href="http://www.ityouknow.com/spring-boot">纯洁的微笑</a></li>
<li><a href="http://blog.csdn.net/liaokailin/article/category/5765237">liaokailin的专栏</a></li>
<li><a href="http://blog.720ui.com/columns/springboot_all/">Spring Boot 揭秘与实战 系列</a></li>
<li><a href="http://blog.csdn.net/column/details/spring-boot.html">catoop的专栏</a></li>
<li><a href="http://blog.csdn.net/column/details/15397.html">方志朋 Spring Boot 专栏</a></li>
<li><a href="http://lihao312.iteye.com/">Spring-boot集成</a></li>
</ul>
<h3 id="Website"><a href="#Website" class="headerlink" title="Website"></a>Website</h3><ul>
<li><a href="http://projects.spring.io/spring-boot/">Spring Boot 官网</a></li>
<li><a href="https://qbgbook.gitbooks.io/spring-boot-reference-guide-zh/content/">Spring Boot参考指南-中文版</a></li>
<li><a href="https://dongchuan.gitbooks.io/gradle-user-guide-/content/tutorials/">Gradle 中文参考指南</a></li>
<li><a href="http://www.imooc.com/learn/767">慕课网视频</a></li>
<li><a href="http://www.mkyong.com/tutorials/spring-boot-tutorials/">spring-boot-tutorials</a></li>
</ul>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ul>
<li><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples">spring boot官方例子</a></li>
<li><a href="https://github.com/ityouknow/spring-boot-examples">spring-boot-starter</a></li>
<li><a href="https://github.com/dyc87112/SpringBoot-Learning">SpringBoot-Learning</a></li>
<li><a href="https://github.com/cloudfavorites/favorites-web">favorites-web</a></li>
<li><a href="https://github.com/JeffLi1993/springboot-learning-example">springboot-learning-example</a></li>
<li><a href="https://github.com/leelance/spring-boot-all">spring-boot-all</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成MockServer</title>
    <url>/2018/04/25/SpringBoot%E9%9B%86%E6%88%90MockServer/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近项目中在引入Mock，其中有一项是屏蔽掉外部依赖，包括关联系统的REST接口。做了下技术调研，打算使用MockServer对外部接口进行mock</p>
<h2 id="插件集成"><a href="#插件集成" class="headerlink" title="插件集成"></a>插件集成</h2><ol>
<li><p>在pom文件中增加mockserver的maven插件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mock-server<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockserver-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">serverPort</span>&gt;</span>1080<span class="tag">&lt;/<span class="name">serverPort</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可根据情况是否设置porxyPort。我没设置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">proxyPort</span>&gt;</span>1090<span class="tag">&lt;/<span class="name">proxyPort</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logLevel</span>&gt;</span>DEBUG<span class="tag">&lt;/<span class="name">logLevel</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 该类为初始化类，按照自己的文件配置，即下一步中的类 --&gt;</span>        <span class="tag">&lt;<span class="name">initializationClass</span>&gt;</span>org.mockserver.maven.ExampleInitializationClass<span class="tag">&lt;/<span class="name">initializationClass</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">        	<span class="comment">&lt;!-- 指定在该生命周期时调用该插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>process-test-classes<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-test-classes<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>start<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>stop<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建自己的MockServerInitializer类（<strong>类名一定不要定义为<code>MockServerInitializer</code>，官方有这个类</strong>），实现ExpectationInitializer接口：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> HttpMockServerInitializer implements ExpectationInitializer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void initialize<span class="constructor">Expectations(MockServerClient <span class="params">mockServerClient</span>)</span> &#123;</span><br><span class="line">        mockServerClient.<span class="keyword">when</span>(<span class="module-access"><span class="module"><span class="identifier">HttpRequest</span>.</span></span>request<span class="literal">()</span>.<span class="keyword">with</span><span class="constructor">Method(<span class="string">&quot;POST&quot;</span>)</span>.<span class="keyword">with</span><span class="constructor">Path(<span class="string">&quot;/test&quot;</span>)</span>)</span><br><span class="line">                .respond(<span class="module-access"><span class="module"><span class="identifier">HttpResponse</span>.</span></span>response<span class="literal">()</span>.<span class="keyword">with</span><span class="constructor">StatusCode(200)</span>.<span class="keyword">with</span><span class="constructor">Body(<span class="string">&quot;success&quot;</span>)</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>PS：如果你在用idea编辑器，一定要打开idea的自动编译功能，默认该功能是不开启的。打开方式</em></p>
</li>
<li><p>运行mockserver服务：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">mvn mockserver:<span class="built_in">run</span></span><br></pre></td></tr></table></figure>

<p>然后就可以使用postman请求，得到预设的返回。</p>
</li>
</ol>
<h2 id="代码手动创建"><a href="#代码手动创建" class="headerlink" title="代码手动创建"></a>代码手动创建</h2><p>插件集成比较方便，不过有些场景无法满足。比如需要在MockServer中注入Spring容器中的对象，当运行MockServer时，由于没有初始化Spring容器，导致注入失败。</p>
<p>这种情况就需要手动创建MockServer。</p>
<ol>
<li><p>编辑pom.xml，导入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mock-server<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockserver-netty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 成文时最新版本，可以到官网查询目前最新版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建mockServer，proxy可不设：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入类</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockserver.integration.ClientAndProxy.startClientAndProxy;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockserver.integration.ClientAndServer.startClientAndServer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用<span class="doctag">@Service</span>将该类注入spring，方便管理</span></span><br><span class="line"><span class="comment"> * 实现InitializingBean接口，初始化类对象时，实例化mockServer对象</span></span><br><span class="line"><span class="comment"> * 实现DisposableBean接口，销毁类对象时，关闭服务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpMockServerManual</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    <span class="keyword">private</span> ClientAndProxy proxy;</span><br><span class="line">    <span class="keyword">private</span> ClientAndServer mockServer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//别忘了关闭服务</span></span><br><span class="line">        proxy.stop();</span><br><span class="line">        mockServer.stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//实例化对象</span></span><br><span class="line">        mockServer = startClientAndServer(<span class="number">1080</span>);</span><br><span class="line">        proxy = startClientAndProxy(<span class="number">1090</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>mock相关http接口：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">mockServer.<span class="keyword">when</span>(<span class="module-access"><span class="module"><span class="identifier">HttpRequest</span>.</span></span>request<span class="literal">()</span>.<span class="keyword">with</span><span class="constructor">Method(<span class="string">&quot;POST&quot;</span>)</span>.<span class="keyword">with</span><span class="constructor">Path(<span class="string">&quot;/test&quot;</span>)</span>)</span><br><span class="line">                .respond(<span class="module-access"><span class="module"><span class="identifier">HttpResponse</span>.</span></span>response<span class="literal">()</span>.<span class="keyword">with</span><span class="constructor">StatusCode(200)</span>.<span class="keyword">with</span><span class="constructor">Body(<span class="string">&quot;success&quot;</span>)</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="更多详情参见官网"><a href="#更多详情参见官网" class="headerlink" title="更多详情参见官网"></a>更多详情参见官网</h2><p>本文只提供了java实现。官网还有JS等实现，请戳<a href="http://mock-server.com/#what-is-mockserver">MockServer官网</a>了解。</p>
]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>MockServer</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成Swagger2</title>
    <url>/2018/04/27/SpringBoot%E9%9B%86%E6%88%90Swagger2/</url>
    <content><![CDATA[<h2 id="增加denpendency"><a href="#增加denpendency" class="headerlink" title="增加denpendency"></a>增加denpendency</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="创建Swagger2配置类"><a href="#创建Swagger2配置类" class="headerlink" title="创建Swagger2配置类"></a>创建Swagger2配置类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.springboot.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;SpringBoot中使用Swagger2构建RESTful APIS&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;更多SpringBoot相关文章请关注：http://wonius.top&quot;</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;http://wonius.top&quot;</span>)</span><br><span class="line">                .contact(<span class="string">&quot;Gavin&#x27;s Notes&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="🌰"><a href="#🌰" class="headerlink" title="🌰"></a>🌰</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/users&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControllerWithSwagger2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;Long, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long, User&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;获取用户列表&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/getUsers&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;创建用户&quot;, notes = &quot;根据User对象创建用户&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;user&quot;, value = &quot;用户实体User&quot;, required = true, dataType = &quot;User&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/postUser&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;获取用户信息&quot;, notes = &quot;根据id获取用户信息&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户id&quot;, required = true, dataType = &quot;Long&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/getUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;更新用户详细信息&quot;, notes = &quot;根据id更新对应user&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户id&quot;, required = true, dataType = &quot;Long&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;user&quot;, value = &quot;用户实体user&quot;, required = true, dataType = &quot;User&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/putUser&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id, <span class="meta">@RequestBody</span> User user)</span> </span>&#123;</span><br><span class="line">        User u = users.get(id);</span><br><span class="line">        u.setHost(user.getHost());</span><br><span class="line">        u.setName(user.getName());</span><br><span class="line">        users.put(id, u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;删除用户&quot;, notes = &quot;根据id删除用户&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParam(name = &quot;id&quot;, value = &quot;用户id&quot;, required = true, dataType = &quot;Long&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/deleteUser&quot;, method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之后访问<a href="http://localhost:8080/swagger-ui.html%E5%8A%A0%E8%BD%BD%E3%80%82">http://localhost:8080/swagger-ui.html加载。</a></p>
<p><strong>PS: method一定要写，不然swagger2会将该方法的所有method枚举一遍</strong></p>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="Api-用在请求的类上，说明该类的作用"><a href="#Api-用在请求的类上，说明该类的作用" class="headerlink" title="@Api 用在请求的类上，说明该类的作用"></a><code>@Api</code> <em>用在请求的类上，说明该类的作用</em></h3><p>tags=”说明该类的作用”<br>value=”该参数没什么意义，所以不需要配置”</p>
<h3 id="ApiOperation用在请求的方法上，说明方法的作用"><a href="#ApiOperation用在请求的方法上，说明方法的作用" class="headerlink" title="@ApiOperation用在请求的方法上，说明方法的作用"></a><code>@ApiOperation</code><em>用在请求的方法上，说明方法的作用</em></h3><p>value=”说明方法的作用”</p>
<p>notes=”方法的备注说明”</p>
<h3 id="ApiImplicitParams-ApiImplicitParam-用在请求的方法上，请求参数说明"><a href="#ApiImplicitParams-ApiImplicitParam-用在请求的方法上，请求参数说明" class="headerlink" title="@ApiImplicitParams/@ApiImplicitParam 用在请求的方法上，请求参数说明"></a><code>@ApiImplicitParams/@ApiImplicitParam</code> <em>用在请求的方法上，请求参数说明</em></h3><p>@ApiImplicitParams：用在请求的方法上，包含一组参数说明<br>​    @ApiImplicitParam：用在 @ApiImplicitParams 注解中，指定一个请求参数的配置信息<br>​        name：参数名<br>​        value：参数的汉字说明、解释<br>​        required：参数是否必须传<br>​        paramType：参数放在哪个地方<br>​            · header –&gt; 请求参数的获取：@RequestHeader<br>​            · query –&gt; 请求参数的获取：@RequestParam<br>​            · path（用于restful接口）–&gt; 请求参数的获取：@PathVariable<br>​            · body（不常用）<br>​            · form（不常用）<br>​        dataType：参数类型，默认String，其它值dataType=”Integer”<br>​        defaultValue：参数的默认值</p>
<h3 id="ApiResponses-ApiResponse用在请求的方法上，响应参数说明"><a href="#ApiResponses-ApiResponse用在请求的方法上，响应参数说明" class="headerlink" title="@ApiResponses/@ApiResponse用在请求的方法上，响应参数说明"></a><code>@ApiResponses/@ApiResponse</code><em>用在请求的方法上，响应参数说明</em></h3><p>@ApiResponses：用于请求的方法上，表示一组响应<br>​    @ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息<br>​        code：数字，例如400<br>​        message：信息，例如”请求参数没填好”<br>​        response：抛出异常的类</p>
<h3 id="ApiModel-ApiModelProperty用在响应类上，表示响应数据的信息"><a href="#ApiModel-ApiModelProperty用在响应类上，表示响应数据的信息" class="headerlink" title="@ApiModel/@ApiModelProperty用在响应类上，表示响应数据的信息"></a><code>@ApiModel/@ApiModelProperty</code><em>用在响应类上，表示响应数据的信息</em></h3><p>@ApiModel：用于响应类上，表示一个返回响应数据的信息<br>​            （这种一般用在post创建的时候，使用@RequestBody这样的场景，<br>​            请求参数无法使用@ApiImplicitParam注解进行描述的时候）<br>​    @ApiModelProperty：用在属性上，描述响应类的属性</p>
]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Swagger2</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud相关资料</title>
    <url>/2017/07/29/SpringCloud%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<h2 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring Cloud"></a>Spring Cloud</h2><h3 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h3><ul>
<li><a href="http://blog.didispace.com/categories/Spring-Cloud/">程序员DD-翟永超</a></li>
<li><a href="http://www.ityouknow.com/spring-cloud">纯洁的微笑</a></li>
<li><a href="http://blog.csdn.net/liaokailin/article/category/6212338">liaokailin的专栏</a></li>
<li><a href="http://www.itmuch.com/categories/Spring-Cloud/">周立|Spring Cloud</a></li>
<li><a href="http://blog.csdn.net/column/details/15197.html">方志朋 Spring Cloud 专栏</a></li>
<li><a href="http://xujin.org/categories/%E8%B7%9F%E6%88%91%E5%AD%A6Spring-Cloud/">许进 跟我学Spring Cloud</a></li>
</ul>
<h3 id="Website"><a href="#Website" class="headerlink" title="Website"></a>Website</h3><ul>
<li><a href="http://projects.spring.io/spring-cloud/">Spring Cloud 官网</a></li>
<li><a href="https://springcloud.cc/">Spring Cloud中文网</a></li>
</ul>
<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ul>
<li><a href="https://github.com/ityouknow/spring-cloud-examples">spring-cloud-starter</a></li>
<li><a href="https://github.com/dyc87112/SpringCloud-Learning">SpringCloud-Learning</a></li>
</ul>
]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成TestNG</title>
    <url>/2018/04/27/SpringBoot%E9%9B%86%E6%88%90TestNG/</url>
    <content><![CDATA[<h2 id="增加dependency"><a href="#增加dependency" class="headerlink" title="增加dependency"></a>增加dependency</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.testng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>testng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置maven-surefire-plugin"><a href="#配置maven-surefire-plugin" class="headerlink" title="配置maven-surefire-plugin"></a>配置maven-surefire-plugin</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">suiteXmlFiles</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">suiteXmlFile</span>&gt;</span>$&#123;basedir&#125;/src/test/resources/MyTestNG.xml<span class="tag">&lt;/<span class="name">suiteXmlFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">suiteXmlFiles</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不单独开线程启动test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">forkMode</span>&gt;</span>never<span class="tag">&lt;/<span class="name">forkMode</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="增加MyTestNG-xml"><a href="#增加MyTestNG-xml" class="headerlink" title="增加MyTestNG.xml"></a>增加MyTestNG.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">suite</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://testng.org/testng-1.0.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">suite</span> <span class="attr">name</span>=<span class="string">&quot;Suite&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">&quot;test1&quot;</span> <span class="attr">verbose</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">classes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;com.springboot.testng.FirstTest&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">methods</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">methods</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">classes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">&quot;test2&quot;</span> <span class="attr">verbose</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groups</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">run</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span> <span class="attr">name</span>=<span class="string">&quot;testGroup&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">groups</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">suite</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>增加对应的类</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>常用注解就那么几个，可以见下面的文章</p>
<p><a href="https://blog.csdn.net/dragonpeng2008/article/details/70820902">https://blog.csdn.net/dragonpeng2008/article/details/70820902</a></p>
]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>TestNG</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud概述</title>
    <url>/2018/05/29/SpringCloud%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p><img data-src="../SpringCloud%E6%A6%82%E8%BF%B0/SpringCloud.png" alt="组件关系图"></p>
<h1 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h1><p><strong>Zuul 是在云平台上提供动态路由,监控,弹性,安全等边缘服务的框架。Zuul 相当于是设备和 Netflix 流应用的 Web 网站后端所有请求的前门。</strong></p>
<p>​    服务网关是微服务架构中一个不可或缺的部分。通过服务网关统一向外系统提供REST API的过程中，除了具备服务路由、均衡负载功能之外，它还具备了权限控制等功能。Spring Cloud Netflix中的Zuul就担任了这样的一个角色，为微服务架构提供了前门保护的作用，同时将权限控制这些较重的非业务逻辑内容迁移到服务路由层面，使得服务集群主体能够具备更高的可复用性和可测试性。</p>
<h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><p><strong>云端服务发现，一个基于 REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移。</strong></p>
<p><img data-src="../SpringCloud%E6%A6%82%E8%BF%B0/Eureka.png" alt="Eureka"></p>
<p><strong>三部分</strong>：服务注册中心、服务提供者、服务消费者；</p>
<p><strong>两功能</strong>：服务注册、服务发现；</p>
<p><strong>运行流程</strong>：</p>
<ol>
<li>两台<code>Eureka服务注册中心</code>组成主从注册中心集群（防止一台挂掉整个服务挂掉）；</li>
<li><code>服务提供者</code>向<code>Eureka服务注册中心</code>进行注册、续约、下线服务等操作；</li>
<li><code>服务消费者</code>从<code>Eureka服务注册中心</code>拉取服务列表，并维护在本地（这是客户端发现模式的机制体现）；</li>
<li><code>服务消费者</code>根据服务列表找到对应服务提供者，进行消费；</li>
</ol>
<p><strong>注意</strong>：</p>
<ol>
<li><p>服务续约任务调用时间间隔，默认30s；</p>
</li>
<li><p>服务缓存清单更新机制，次/30s；</p>
</li>
<li><p>服务时效时间，默认90s；</p>
</li>
<li><p>默认每60s将当前清单中超过90s（没有续约）的服务踢出去；</p>
</li>
<li><p>自我保护机制，工作机制是如果15min内超过85%的客户端节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，Eureka Server自动进入自我保护机制。<em>（Eureka自我保护机制，通过配置eureka.server.enable-self-preservation，默认为打开状态，建议生产环境打开此配置）</em></p>
<ul>
<li>Eureka Server不再从注册列表中移除因为长时间没收到心跳检测的<code>过期服务</code>；</li>
</ul>
<ul>
<li>Eureka Server仍然能够接受新服务的注册、查询请求，但是不会同步到其他节点上，保证当前节点依然可用；</li>
<li>当网络稳定时，当前Eureka Server新的注册信息会被同步到其他节点上；</li>
</ul>
</li>
</ol>
<h1 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h1><p><strong>提供云端负载均衡，有多种负载均衡策略可供选择，可配合服务发现和断路器使用。</strong></p>
<p><code>服务消费者</code>根据服务列表中的服务提供者，找到实际的<code>服务生产者</code>，通过Spring Cloud Ribbon实现。</p>
<p><strong>负载均衡策略</strong>：</p>
<ul>
<li>RandomRule：从实例列表随机选取。选择逻辑在一个while(server == null)循环内，正常情况下会返回一个服务实例。如果出现死循环，取不到服务实例，则有可能存在并发的bug；</li>
<li>RoundRobinRule（默认）：按照线性轮询选择一个实例。随机次数超过10次，结束尝试；</li>
<li>WeightedResponseTimeRule：基于RoundRobinRule，增加了根据实例的运行情况计算权重，然后根据权重挑选实例。主要有三个核心内容：<ul>
<li>定时任务<ul>
<li>每30s执行一次权重计算；</li>
</ul>
</li>
<li>权重计算<ul>
<li>记录每个实例的统计信息，累加所有实例的平均响应时间，得到总平均响应时间，totalResponseTime；</li>
<li>循环所有的实例，计算其权重，weightSoFar+=totalResponseTime - 实例平均响应时间，其中weightSoFar初始值为0。每个实例权重结果，保存到ArrayList currentWeights中；</li>
</ul>
</li>
<li>实例选择<ul>
<li>判断最后一个实例的权重，是否 &lt; 0.001d，若是，采用RoundRobbinRule策略；</li>
<li>生成一个[0, 最大权重值) 区间内的随机数；</li>
<li>遍历权重清单currentWeights，若权重 &gt;= 随机得到的数值，就选择这个实例；</li>
</ul>
</li>
</ul>
</li>
<li>其他策略还有BestAvailableRule、AvaliablityFilteringRule、ZoneAvoidanceRule、RetryRule</li>
</ul>
<h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><p><strong>Feign是一种声明式、模板化的HTTP客户端。</strong></p>
<p>​    Spring Cloud Feign 是一个声明web服务客户端，这使得编写Web服务客户端更容易，使用Feign 创建一个接口并对它进行注解，它具有可插拔的注解支持包括Feign注解与JAX-RS注解，Feign还支持可插拔的编码器与解码器，Spring Cloud 增加了对 Spring MVC的注解，Spring Web 默认使用了HttpMessageConverters, Spring Cloud 集成 Ribbon 和 Eureka 提供的负载均衡的HTTP客户端 Feign。</p>
<h1 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h1><p><strong>熔断器，容错管理工具，旨在通过熔断机制控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。</strong></p>
<p>​    在分布式架构中，当某个服务单元发生故障（类似电器发生短路）之后，通过断路器的故障监控（类似熔断保险丝）， 想调用方返回一个错误响应，而不是长时间等待，这样就不会使得线程因调用故障服务被长时间占用不放，避免了故障在分布式系统中的蔓延<br>​    针对这一机制，Spring Cloud Hystrix实现了断路器，线程隔离等一系列服务保护功能。它也是基于Netfix的开源框架Hystrix实现的，该框架的目标在于通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。</p>
<p>Hystrix具有：</p>
<ul>
<li><p>服务降级</p>
</li>
<li><p>服务熔断</p>
<ul>
<li>请求总数（默认20）</li>
<li>错误百分比（默认50）</li>
</ul>
</li>
<li><p>线程和信号隔离</p>
</li>
<li><p>请求缓存</p>
</li>
<li><p>请求合并</p>
</li>
<li><p>服务监控</p>
<p><img data-src="../img/Hystrix.png" alt="Hystrix"></p>
</li>
<li><p>集群监控（Turbine）</p>
</li>
</ul>
<h1 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h1><p><strong>配置管理工具包，让你可以把配置放到远程服务器，集中化管理集群配置，目前支持本地存储、Git以及Subversion。</strong></p>
<p>​    分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所以需要分布式配置中心组件。    在Spring Cloud中，有分布式配置中心组件Spring Cloud Config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库中。在Cpring Cloud Config 组件中，分两个角色，一是Config Server，二是Config Client。</p>
<p>​    Config Server用于配置属性的存储，存储的位置可以为Git仓库、SVN仓库、本地文件等，Config Client用于服务属性的读取。</p>
<h1 id="Bus"><a href="#Bus" class="headerlink" title="Bus"></a>Bus</h1><p><strong>事件、消息总线，用于在集群（例如，配置变化事件）中传播状态变化，可与Spring Cloud Config联合实现热部署。</strong></p>
<p>​    在Spring Cloud Config中，我们知道的配置文件可以通过Config Server存储到Git等地方，通过Config Client进行读取，但是我们的配置文件不可能是一直不变的，当我们的配置文件放生变化的时候如何进行更新哪？</p>
<p>​    一种最简单的方式重新一下Config Client进行重新获取，但Spring Cloud绝对不会让你这样做的，Spring Cloud Bus正是提供一种操作使得我们在不关闭服务的情况下更新我们的配置。</p>
<p>​    Spring Cloud Bus官方意义：消息总线。</p>
<p>​    当然动态更新服务配置只是消息总线的一个用处，还有很多其他用处。</p>
<p>应用场景：</p>
<ul>
<li>将消息路由到一个或多个目的地；</li>
<li>消息转换为其他的表现形式；</li>
<li>执行消息聚焦、消息分解，并将结果发送到其他的目的地，然后重新组合响应返回给消息用户；</li>
<li>调用web服务来检索数据；</li>
<li>响应错误时间；</li>
<li>使用发布-订阅模式来提供内容，或基于主题的消息路由</li>
</ul>
<p><img data-src="../SpringCloud%E6%A6%82%E8%BF%B0/Bus.png" alt="Bus"></p>
<p>两个消息组件：</p>
<p>kafka：</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>spring.cloud.stream.kafka.binder.brokers</td>
<td>Kafka的服务端列表</td>
<td>localhost</td>
</tr>
<tr>
<td>spring.cloud.stream.kafka.binder.defaultBrokerPort</td>
<td>Kafka服务端的端口。当brokers中没有配置端口时，默认使用这个端口</td>
<td>9092</td>
</tr>
<tr>
<td>spring.cloud.stream.kafka.binder.zkNodes</td>
<td>Kafka服务端连接的Zookeeper节点列表</td>
<td>localhost</td>
</tr>
<tr>
<td>spring.cloud.stream.kafka.binder.defaultZkPort</td>
<td>Zookeeper节点的默认端口。当zkNodes中没有配置端口时，默认使用这个端口</td>
<td>2181</td>
</tr>
</tbody></table>
<p>RabbitMQ：</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>spring.rabbitmq.host</td>
<td>RabbitMQ的服务地址</td>
<td>localhost</td>
</tr>
<tr>
<td>spring.rabbitmq.port</td>
<td>RabbitMQ的服务端口</td>
<td>5672</td>
</tr>
<tr>
<td>spring.rabbitmq.username</td>
<td></td>
<td></td>
</tr>
<tr>
<td>spring.rabbitmq.password</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>#总结</p>
<p>前面介绍了很多Spring Cloud的组件，本篇按照自己的角度来做一次归纳。</p>
<p>Spring Cloud技术应用从场景上可以分为两大类：润物无声类和独挑大梁类。</p>
<p>润物无声，融合在每个微服务中、依赖其它组件并为其提供服务。</p>
<p>Ribbon，客户端负载均衡，特性有区域亲和、重试机制。</p>
<p>Hystrix，客户端容错保护，特性有服务降级、服务熔断、请求缓存、请求合并、依赖隔离。</p>
<p>Feign，声明式服务调用，本质上就是Ribbon+Hystrix</p>
<p>Stream，消息驱动，有Sink、Source、Processor三种通道，特性有订阅发布、消费组、消息分区。</p>
<p>Bus，消息总线，配合Config仓库修改的一种Stream实现，</p>
<p>Sleuth，分布式服务追踪，需要搞清楚TraceID和SpanID以及抽样，如何与ELK整合。</p>
<p>独挑大梁，独自启动不需要依赖其它组件。</p>
<p>Eureka，服务注册中心，特性有失效剔除、服务保护。</p>
<p>Dashboard，Hystrix仪表盘，监控集群模式和单点模式，其中集群模式需要收集器Turbine配合。</p>
<p>Zuul，API服务网关，功能有路由分发和过滤。</p>
<p>Config，分布式配置中心，支持本地仓库、SVN、Git、Jar包内配置等模式，</p>
<p>每个组件都不是平白无故的产生的，是为了解决某一特定的问题而存在。</p>
<p>Eureka和Ribbon，是最基础的组件，一个注册服务，一个消费服务。</p>
<p>Hystrix为了优化Ribbon、防止整个微服务架构因为某个服务节点的问题导致崩溃，是个保险丝的作用。</p>
<p>Dashboard给Hystrix统计和展示用的，而且监控服务节点的整体压力和健康情况。</p>
<p>Turbine是集群收集器，服务于Dashboard的。</p>
<p>Feign是方便我们程序员些更优美的代码的。</p>
<p>Zuul是加在整个微服务最前沿的防火墙和代理器，隐藏微服务结点IP端口信息，加强安全保护的。</p>
<p>Config是为了解决所有微服务各自维护各自的配置，设置一个同意的配置中心，方便修改配置的。</p>
<p>Bus是因为config修改完配置后各个结点都要refresh才能生效实在太麻烦，所以交给bus来通知服务节点刷新配置的。</p>
<p>Stream是为了简化研发人员对MQ使用的复杂度，弱化MQ的差异性，达到程序和MQ松耦合。</p>
<p>Sleuth是因为单次请求在微服务节点中跳转无法追溯，解决任务链日志追踪问题的。</p>
<p>特殊成员Zipkin，之所以特殊是因为从jar包和包名来看它不属于Spring Cloud的一员，但是它与Spring Cloud Sleuth的抽样日志结合的天衣无缝。乍一看它与Hystrix的Dashboard作用有重叠的部分，但是他们的侧重点完全不同。Dashboard侧重的是单个服务的统计和是否可用，Zipkin侧重的监控环节时长。简言之，Dashboard侧重故障诊断，Zipkin侧重性能优化。</p>
<p>内容参考：</p>
<p><a href="https://blog.csdn.net/yejingtao703/article/details/78331442">https://blog.csdn.net/yejingtao703/article/details/78331442</a></p>
<p><a href="https://blog.csdn.net/xlgen157387/article/details/77773908">https://blog.csdn.net/xlgen157387/article/details/77773908</a></p>
<p><a href="https://blog.csdn.net/tudou201601/article/details/79123912">https://blog.csdn.net/tudou201601/article/details/79123912</a></p>
]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud项目搭建</title>
    <url>/2018/05/31/SpringCloud%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>为了便于管理，将所有项目放在一个工程中维护。</p>
<h1 id="创建parent工程"><a href="#创建parent工程" class="headerlink" title="创建parent工程"></a>创建parent工程</h1><p>首先，new一个Project，选择maven，注意不要勾选<code>create from archetype</code>，填写GroupId、ArtifactId、Project name。创建完成后，将src目录删除。</p>
<p><img data-src="../SpringCloud%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/parent.png" alt="parent工程"></p>
<p>配置pom文件，添加SpringCloud依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Finchley.RC2<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--各个子项目共用的一些依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--test--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--springboot--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>spring-milestones<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Spring Milestones<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.spring.io/milestone<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="创建Eureka注册中心"><a href="#创建Eureka注册中心" class="headerlink" title="创建Eureka注册中心"></a>创建Eureka注册中心</h1><p>创建一个新的Module，选择Spring Initializr，填写GroupId、ArtifactId、Name，选择Cloud Discovery - Eureka Server，命名Module Name，完成。</p>
<p><img data-src="../SpringCloud%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/eureka.png" alt="创建Eureka"></p>
<p>创建后会自动在<code>parent</code>的pom中添加模块，如果没有，手动添加，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>service<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编辑该模块中的pom文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.woniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>Eureka-Server<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应Application类添加注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServersApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(EurekaServersApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编辑application.yml配置文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8081</span></span><br><span class="line">eureka:</span><br><span class="line">  instance:</span><br><span class="line">    hostname: localhost</span><br><span class="line"># 该server默认同时也是client</span><br><span class="line">  client:</span><br><span class="line">    registerWithEureka: <span class="keyword">false</span></span><br><span class="line">    fetchRegistry: <span class="keyword">false</span></span><br><span class="line">    serviceUrl:</span><br><span class="line">      defaultZone: http:<span class="comment">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br></pre></td></tr></table></figure>

<h1 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h1><p>创建一个新的Module，仍然选择Maven，勾选<code>create from archetype</code>，并选择quickstart，填写ArtifactId、Module Name，创建完成。</p>
<p><img data-src="../SpringCloud%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/service.png" alt="创建service"></p>
<p>修改pom文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springcloud-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.woniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>service<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在main下面创建resources目录，该目录下创建application.yml文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">service</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8081/eureka/</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure>

<p>在对应Application类添加注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceApplication</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">service</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SpringApplication.run(ServiceApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后依次启动eureka-server、service服务，访问localhost:8081，访问成功。</p>
<p><img data-src="../SpringCloud%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/run.png" alt="run"></p>
<p><em>@EnableDiscoveryClient、@EnableEurekaClient区别：</em></p>
<p><em>@EnableDiscoveryClient基于spring-cloud-commons，其discovery service有多种实现，Eureka、Consul、Zookeeper等。而@EnableEurekaClient只针对spring-cloud-netflix服务；</em></p>
<p><em>@EnableEurekaClient实现中包含@EnableDiscoveryClient；</em></p>
]]></content>
      <categories>
        <category>Spring</category>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringRedisData中事务的坑</title>
    <url>/2018/09/07/SpringRedisData%E4%B8%AD%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    项目中使用redis存储会话，考虑到并发场景，在对session进行管理的时候需要加锁。我们项目中使用了StringRedisTemplate，故而打算用它实现一个分布式锁。</p>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><h3 id="version-1"><a href="#version-1" class="headerlink" title="version 1"></a>version 1</h3><p>​    首先，使用setnx达到锁的效果，为了防止系统异常出现死锁，还需要为每个锁设置过期时间。由于这些都是非原子性操作，所以使用redis事务进行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getLock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  stringRedisTemplate.multi();</span><br><span class="line">  stringRedisTemplate.opsForValue().set(<span class="string">&quot;SessionLock&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">  stringRedisTemplate.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    然而发现事务并没起作用，后来查看源码发现，如果没有是使用<code>@Transactional</code>注解，stringRedisTemplate的每个操作都会新建一个连接，不同连接没有实现multi的特性。</p>
<h3 id="version-2"><a href="#version-2" class="headerlink" title="version 2"></a>version 2</h3><p>​    发现问题继而加上注解</p>
<p><a href="https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/index.html">https://www.ibm.com/developerworks/cn/java/j-master-spring-transactional-use/index.html</a></p>
<p><a href="https://blog.csdn.net/weixin_38399962/article/details/82753763">https://blog.csdn.net/weixin_38399962/article/details/82753763</a></p>
<p><a href="https://juejin.im/post/5ce5638ef265da1b91636a56">https://juejin.im/post/5ce5638ef265da1b91636a56</a></p>
<p><a href="https://www.jianshu.com/p/d72e8526bea1">https://www.jianshu.com/p/d72e8526bea1</a></p>
<p><a href="https://www.cnblogs.com/toutou/p/redis_lock.html">https://www.cnblogs.com/toutou/p/redis_lock.html</a></p>
<p><a href="https://blog.csdn.net/liuhanfanshuang/article/details/52136438">https://blog.csdn.net/liuhanfanshuang/article/details/52136438</a></p>
<p><a href="https://blog.csdn.net/qq_34021712/article/details/79606551?depth_1-utm_source=distribute.pc_relevant_right.none-task&amp;utm_source=distribute.pc_relevant_right.none-task">https://blog.csdn.net/qq_34021712/article/details/79606551?depth_1-utm_source=distribute.pc_relevant_right.none-task&amp;utm_source=distribute.pc_relevant_right.none-task</a></p>
<p><a href="https://blog.csdn.net/congcong68/article/details/52734735">https://blog.csdn.net/congcong68/article/details/52734735</a></p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注入static变量</title>
    <url>/2018/07/26/Spring%E6%B3%A8%E5%85%A5static%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<h1 id="使用setter方法"><a href="#使用setter方法" class="headerlink" title="使用setter方法"></a>使用setter方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String hello;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;hello.value&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHello</span><span class="params">(String hello)</span> </span>&#123;</span><br><span class="line">        hello = hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="在spring容器中注入对象时赋值"><a href="#在spring容器中注入对象时赋值" class="headerlink" title="在spring容器中注入对象时赋值"></a>在spring容器中注入对象时赋值</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String hello;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;hello.value&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String pHello;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        hello = pHello;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring集成HanLP分词</title>
    <url>/2018/06/15/Spring%E9%9B%86%E6%88%90HanLP%E5%88%86%E8%AF%8D/</url>
    <content><![CDATA[<h1 id="配置pom文件"><a href="#配置pom文件" class="headerlink" title="配置pom文件"></a>配置pom文件</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hankcs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hanlp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>portable-1.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当前最新版本为1.6.4。可以在<a href="https://github.com/hankcs/HanLP">这里</a>查看最新版本。</p>
<h1 id="添加自定义字典文件"><a href="#添加自定义字典文件" class="headerlink" title="添加自定义字典文件"></a>添加自定义字典文件</h1><p>在resources下面建立目录，存放自定义字典。</p>
<p>我的目录是resources/hanlp/custom/CustomDic.txt</p>
<h1 id="编写Java类"><a href="#编写Java类" class="headerlink" title="编写Java类"></a>编写Java类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CUSTOM_DICTIONARY_PATH = <span class="string">&quot;/hanlp/custom/CustomDic.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYNONYM_WORD_PATH = <span class="string">&quot;/hanlp/synonym/SynonDic.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Term&gt; list;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Segment segment;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map synonymMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        refreshDictionary();</span></span><br><span class="line">        segmentSentence(<span class="string">&quot;你是柴犬狗狗吧&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新用户自定义词典</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">refreshDictionary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HanLP.Config.CustomDictionaryPath = <span class="keyword">new</span> String[] &#123;</span><br><span class="line">                WordUtil.class.getResource(CUSTOM_DICTIONARY_PATH).getPath()</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        CustomDictionary.reload();</span><br><span class="line">        segment = HanLP.newSegment().enableCustomDictionary(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">segmentSentence</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">        segment = HanLP.newSegment().enableCustomDictionary(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        list = segment.seg(text);</span><br><span class="line">        String result = list.get(<span class="number">0</span>).word;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            result+=<span class="string">&quot; &quot;</span>+list.get(i).word;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新同义词字典</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">refreshSynonym</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String path = WordUtil.class.getResource(SYNONYM_WORD_PATH).getPath();</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        BufferedReader reader;</span><br><span class="line">        synonymMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                String[] words = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (String word: words) &#123;</span><br><span class="line">                    synonymMap.put(word, words[<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取同义词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> word</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSynonym</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) synonymMap.get(word);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了提高效率，HanLP会将字典文件转义成bin文件，每次从bin文件中读取单词。</p>
<p>所以当字典更新时，需要删除bin文件，重新生成，官方提供reload方法，但是需要指定自定义字典的位置。</p>
<p>当调用segment()方法时会先从对应的bin文件中读取，如果没有bin文件，先重新生成bin文件，再读取。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>分词</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql优化</title>
    <url>/2017/08/13/Sql%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="什么情况下可以全表扫"><a href="#什么情况下可以全表扫" class="headerlink" title="什么情况下可以全表扫"></a>什么情况下可以全表扫</h2><p>公司这边的要求是，Sql的查询数据小于50M时，可以全表扫。</p>
<p>假如一条数据大小为100B，50M对应的数据量为：</p>
<p>$50<em>1024</em>1024/100=524288$, 约50w条数据。所以当表中数据量小于50w时，可以全表扫。</p>
<h2 id="Oracle分页"><a href="#Oracle分页" class="headerlink" title="Oracle分页"></a>Oracle分页</h2><p>众所周知，Oracle分页的写法比较麻烦，需要用嵌套查询的方式。举个🌰：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line">	<span class="keyword">select</span> rownum rowno, t.<span class="operator">*</span> </span><br><span class="line">	<span class="keyword">from</span></span><br><span class="line">  	(<span class="keyword">select</span> id,</span><br><span class="line">     		name,</span><br><span class="line">     		salary</span><br><span class="line">     	 <span class="keyword">from</span> worker</span><br><span class="line">     	 <span class="keyword">order</span> <span class="keyword">by</span> name <span class="keyword">desc</span>) t		<span class="operator">/</span><span class="operator">/</span>如果分页时需要排序，一定要在子查询里排序完成后，再分页</span><br><span class="line">  	<span class="keyword">where</span> rownum <span class="operator">&lt;=</span> <span class="number">10</span>				<span class="operator">/</span><span class="operator">/</span><span class="operator">&lt;</span> 一定在子查询中。因为rownum是查询出数据之后再给rownum赋值。否则从第<span class="number">2</span>页开始查询结果都为空</span><br><span class="line">) <span class="keyword">where</span> rowno <span class="operator">&gt;</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>另外还有一种写法，使用between：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> rownum, w.<span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> worker w</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">rownum <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>这种格式更加简单，不过效率可能会有不同。具体还是要看执行计划，选择最优。</p>
<h2 id="批量更新时，如果参数不固定，造成硬解析"><a href="#批量更新时，如果参数不固定，造成硬解析" class="headerlink" title="批量更新时，如果参数不固定，造成硬解析"></a>批量更新时，如果参数不固定，造成硬解析</h2><p>比如我们有个场景，需要根据id批量更新某个值。一般都是会将id放到list中，将list作为参数传入。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update worker</span><br><span class="line"><span class="keyword">set</span> status <span class="operator">=</span> &quot;Y&quot;</span><br><span class="line"><span class="keyword">where</span> id <span class="keyword">in</span></span><br><span class="line"><span class="operator">&lt;</span>iterator <span class="keyword">open</span><span class="operator">=</span>&quot;(&quot; <span class="keyword">close</span><span class="operator">=</span>&quot;)&quot; conjunction<span class="operator">=</span>&quot;,&quot;<span class="operator">&gt;</span></span><br><span class="line">	#list[]#</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>iterator<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为入参是list，长度不固定，生成的sql也会不同，数据库在执行时每次都要生成新的执行计划，导致硬解析。</p>
<p>针对这种情况，我能想到的有如下两种方式处理：</p>
<ol>
<li><p><strong>将list长度固定</strong></p>
<p>将大批量分成若干小批次，比如每批次更新100条，list定长为100，当最后的批次长度不够100时，后面的数据设置为空。这样生成的sql就是固定的，执行计划相同。</p>
</li>
<li><p><strong>将整个sql循环</strong></p>
<p>将整个sql循环，而不是参数。例如入参是有100个参数的list，循环创建出100条update语句，参数固定为一个，形式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span>foreach collection<span class="operator">=</span>list item<span class="operator">=</span>&quot;item&quot; index<span class="operator">=</span>&quot;index&quot; <span class="keyword">open</span><span class="operator">=</span>&quot;begin&quot; <span class="keyword">close</span><span class="operator">=</span>&quot;;end;&quot; separator<span class="operator">=</span>&quot;;&quot;<span class="operator">&gt;</span></span><br><span class="line">update worker </span><br><span class="line"><span class="keyword">set</span> status <span class="operator">=</span> &quot;Y&quot;</span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span> #&#123;item.id&#125;</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>foreach<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Sql</tag>
      </tags>
  </entry>
  <entry>
    <title>TensorFlow-API</title>
    <url>/2018/05/11/TensorFlow-API/</url>
    <content><![CDATA[<h2 id="tf-constant"><a href="#tf-constant" class="headerlink" title="tf.constant"></a>tf.constant</h2><p><strong>根据value的值，生成一个shape维度的张量常量</strong></p>
<h3 id="Define"><a href="#Define" class="headerlink" title="Define"></a>Define</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">constant(value, dtype=<span class="literal">None</span>, shape=<span class="literal">None</span>, name=<span class="string">&#x27;Const&#x27;</span>, verify_shape=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>必须</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>Y</td>
<td>常量、list</td>
<td>张量的值</td>
</tr>
<tr>
<td>dtype</td>
<td>N</td>
<td>dtype</td>
<td>张量的元素类型</td>
</tr>
<tr>
<td>shape</td>
<td>N</td>
<td>1维整型张量、array</td>
<td>张量的维度</td>
</tr>
<tr>
<td>name</td>
<td>N</td>
<td>string</td>
<td>张量的名称</td>
</tr>
<tr>
<td>verify_shape</td>
<td>N</td>
<td>boolean</td>
<td>检测shape是否和value的shape一致。<br />若值为False，当不一致时，会用最后一个元素将shape补全</td>
</tr>
</tbody></table>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@version: ??</span></span><br><span class="line"><span class="string">@author: Gavin</span></span><br><span class="line"><span class="string">@license: Apache Licence </span></span><br><span class="line"><span class="string">@contact: woniuyf@gmail.com</span></span><br><span class="line"><span class="string">@site: https://wonius.top/</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: constant.py</span></span><br><span class="line"><span class="string">@time: 2018/5/11 10:00</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">a = tf.constant([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], shape=[<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b = tf.constant(-<span class="number">1</span>, shape=[<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line">c = tf.matmul(a,b)</span><br><span class="line"></span><br><span class="line">e = tf.constant(np.arange(<span class="number">1</span>,<span class="number">13</span>,dtype=np.int32), shape=[<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">f = tf.constant(np.arange(<span class="number">13</span>,<span class="number">25</span>, dtype=np.int32), shape=[<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line">g = tf.matmul(e,f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;-----------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (a.get_shape())</span><br><span class="line">    <span class="built_in">print</span> (sess.run(a))</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;-----------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (b.get_shape())</span><br><span class="line">    <span class="built_in">print</span> (sess.run(b))</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;-----------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (c.get_shape())</span><br><span class="line">    <span class="built_in">print</span> (sess.run(c))</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;-----------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (e.get_shape())</span><br><span class="line">    <span class="built_in">print</span> (sess.run(e))</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;-----------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (f.get_shape())</span><br><span class="line">    <span class="built_in">print</span> (sess.run(f))</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;-----------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (g.get_shape())</span><br><span class="line">    <span class="built_in">print</span> (sess.run(g))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="comment"># -----------------</span></span><br><span class="line"><span class="comment"># (2, 3)</span></span><br><span class="line"><span class="comment"># [[1 2 3]</span></span><br><span class="line"><span class="comment">#  [4 5 6]]</span></span><br><span class="line"><span class="comment"># -----------------</span></span><br><span class="line"><span class="comment"># (3, 2)</span></span><br><span class="line"><span class="comment"># [[-1 -1]</span></span><br><span class="line"><span class="comment">#  [-1 -1]</span></span><br><span class="line"><span class="comment">#  [-1 -1]]</span></span><br><span class="line"><span class="comment"># -----------------</span></span><br><span class="line"><span class="comment"># (2, 2)</span></span><br><span class="line"><span class="comment"># [[ -6  -6]</span></span><br><span class="line"><span class="comment">#  [-15 -15]]</span></span><br><span class="line"><span class="comment"># -----------------</span></span><br><span class="line"><span class="comment"># (2, 2, 3)</span></span><br><span class="line"><span class="comment"># [[[ 1  2  3]</span></span><br><span class="line"><span class="comment">#   [ 4  5  6]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  [[ 7  8  9]</span></span><br><span class="line"><span class="comment">#   [10 11 12]]]</span></span><br><span class="line"><span class="comment"># -----------------</span></span><br><span class="line"><span class="comment"># (2, 3, 2)</span></span><br><span class="line"><span class="comment"># [[[13 14]</span></span><br><span class="line"><span class="comment">#   [15 16]</span></span><br><span class="line"><span class="comment">#   [17 18]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  [[19 20]</span></span><br><span class="line"><span class="comment">#   [21 22]</span></span><br><span class="line"><span class="comment">#   [23 24]]]</span></span><br><span class="line"><span class="comment"># -----------------</span></span><br><span class="line"><span class="comment"># (2, 2, 2)</span></span><br><span class="line"><span class="comment"># [[[ 94 100]</span></span><br><span class="line"><span class="comment">#   [229 244]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  [[508 532]</span></span><br><span class="line"><span class="comment">#   [697 730]]]</span></span><br></pre></td></tr></table></figure>

<h2 id="tf-placeholder"><a href="#tf-placeholder" class="headerlink" title="tf.placeholder"></a>tf.placeholder</h2><p><strong>一种占位符，在执行时填入具体值</strong></p>
<p>###Define</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">placeholder(dtype, shape=<span class="literal">None</span>, name=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Parameter-1"><a href="#Parameter-1" class="headerlink" title="Parameter"></a>Parameter</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>dtype</td>
<td>Y</td>
<td>dtype</td>
<td>占位符的数据类型</td>
</tr>
<tr>
<td>shape</td>
<td>N</td>
<td>1维整型张量、array</td>
<td>占位符的维度</td>
</tr>
<tr>
<td>name</td>
<td>N</td>
<td>string</td>
<td>占位符的名称</td>
</tr>
</tbody></table>
<h3 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@version: ??</span></span><br><span class="line"><span class="string">@author: Gavin</span></span><br><span class="line"><span class="string">@license: Apache Licence </span></span><br><span class="line"><span class="string">@contact: woniuyf@gmail.com</span></span><br><span class="line"><span class="string">@site: https://wonius.top/</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: placeholder.py</span></span><br><span class="line"><span class="string">@time: 2018/5/11 10:57</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">x = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">3</span>])</span><br><span class="line">y = tf.matmul(x, x)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    rand_array = np.random.rand(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(y, feed_dict=&#123;x:rand_array&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果</span></span><br><span class="line"><span class="comment"># [[ 0.88505751  0.79640609  0.46087515]</span></span><br><span class="line"><span class="comment">#  [ 0.36539319  0.41709256  0.16832483]</span></span><br><span class="line"><span class="comment">#  [ 0.75206953  0.90277183  0.37584797]]</span></span><br></pre></td></tr></table></figure>



<h2 id="tf-nn-conv2d"><a href="#tf-nn-conv2d" class="headerlink" title="tf.nn.conv2d"></a>tf.nn.conv2d</h2><p><strong>卷积运算</strong></p>
<h3 id="Define-1"><a href="#Define-1" class="headerlink" title="Define"></a>Define</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conv2d(<span class="built_in">input</span>, <span class="built_in">filter</span>, strides, padding, </span><br><span class="line">		use_cudnn_on_gpu=<span class="literal">True</span>, data_format=<span class="string">&#x27;NHWC&#x27;</span>, name=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Parameter-2"><a href="#Parameter-2" class="headerlink" title="Parameter"></a>Parameter</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>input</td>
<td>Y</td>
<td>tensor</td>
<td>4维的tensor，即[batch, in_height, in_width, in_channels]<br />(若input是图像，即[训练时一个batch的图片数量，图片高度，图片宽度，图片的通道数])<br />类型需为float32、float64</td>
</tr>
<tr>
<td>filter</td>
<td>Y</td>
<td>tensor</td>
<td>4维的tensor，即[filter_height, filter_width, in_channels, out_channels]<br />(若input是图像，即[卷积核的高度，卷积核的宽度，图像通道数，卷积核个数])<br />filter的in_channels必须与input的in_channels相等</td>
</tr>
<tr>
<td>strides</td>
<td>Y</td>
<td>list</td>
<td>长度为4的list，卷积时在input上每一维的步长，一般strides[0]=strides[3]=1</td>
</tr>
<tr>
<td>padding</td>
<td>Y</td>
<td>string</td>
<td>卷积方式，只能为”SAME”、”VALID”其中之一。SAME：补全方式；VALID：丢弃方式</td>
</tr>
<tr>
<td>use_cudnn_on_gpu</td>
<td>N</td>
<td>boolean</td>
<td>是否使用cudnn加速，默认为true</td>
</tr>
<tr>
<td>data_format</td>
<td>N</td>
<td>string</td>
<td>只能为”NHWC”、”NCHW”，默认”NHWC”</td>
</tr>
<tr>
<td>Name</td>
<td>N</td>
<td>string</td>
<td>运算名称</td>
</tr>
</tbody></table>
<h3 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@version: ??</span></span><br><span class="line"><span class="string">@author: Gavin</span></span><br><span class="line"><span class="string">@license: Apache Licence </span></span><br><span class="line"><span class="string">@contact: woniuyf@gmail.com</span></span><br><span class="line"><span class="string">@site: https://wonius.top/</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: conv2d.py</span></span><br><span class="line"><span class="string">@time: 2018/5/9 20:48</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">a = tf.constant([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],dtype=tf.float32,shape=[<span class="number">1</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>])</span><br><span class="line">b = tf.constant([<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],dtype=tf.float32,shape=[<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">c = tf.nn.conv2d(a,b,strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],padding=<span class="string">&#x27;VALID&#x27;</span>)</span><br><span class="line">d = tf.nn.conv2d(a,b,strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>],padding=<span class="string">&#x27;SAME&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;c shape:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (c.get_shape())</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;c value:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(c))</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;d shape:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (d.get_shape())</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;d value:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(d))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算结果</span></span><br><span class="line"><span class="comment"># c shape:</span></span><br><span class="line"><span class="comment"># (1, 2, 2, 1)</span></span><br><span class="line"><span class="comment"># c value:</span></span><br><span class="line"><span class="comment"># [[[[ 4.]</span></span><br><span class="line"><span class="comment">#    [ 4.]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   [[ 2.]</span></span><br><span class="line"><span class="comment">#    [ 4.]]]]</span></span><br><span class="line"><span class="comment"># d shape:</span></span><br><span class="line"><span class="comment"># (1, 3, 3, 1)</span></span><br><span class="line"><span class="comment"># d value:</span></span><br><span class="line"><span class="comment"># [[[[ 2.]</span></span><br><span class="line"><span class="comment">#    [ 3.]</span></span><br><span class="line"><span class="comment">#    [ 1.]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   [[ 1.]</span></span><br><span class="line"><span class="comment">#    [ 4.]</span></span><br><span class="line"><span class="comment">#    [ 3.]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   [[ 0.]</span></span><br><span class="line"><span class="comment">#    [ 2.]</span></span><br><span class="line"><span class="comment">#    [ 1.]]]]</span></span><br></pre></td></tr></table></figure>

<h2 id="tf-nn-relu"><a href="#tf-nn-relu" class="headerlink" title="tf.nn.relu"></a>tf.nn.relu</h2><p><strong>激活函数</strong></p>
<h3 id="Define-2"><a href="#Define-2" class="headerlink" title="Define"></a>Define</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">relu(features, name=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Parameter-3"><a href="#Parameter-3" class="headerlink" title="Parameter"></a>Parameter</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>features</td>
<td>Y</td>
<td>tensor</td>
<td>float32、float64、int8、int16、int32、int64、uint8、unit16、half</td>
</tr>
<tr>
<td>name</td>
<td>N</td>
<td>string</td>
<td>运算名称</td>
</tr>
</tbody></table>
<h3 id="Demo-3"><a href="#Demo-3" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@version: ??</span></span><br><span class="line"><span class="string">@author: Gavin</span></span><br><span class="line"><span class="string">@license: Apache Licence </span></span><br><span class="line"><span class="string">@contact: woniuyf@gmail.com</span></span><br><span class="line"><span class="string">@site: https://wonius.top/</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: relu.py</span></span><br><span class="line"><span class="string">@time: 2018/5/9 21:30</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">a = tf.constant([<span class="number">1</span>,-<span class="number">2</span>,<span class="number">0</span>,<span class="number">4</span>,-<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line">b = tf.nn.relu(a)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span> (sess.run(b))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算结果</span></span><br><span class="line"><span class="comment"># [1 0 0 4 0 6]</span></span><br></pre></td></tr></table></figure>

<h2 id="tf-nn-max-pool"><a href="#tf-nn-max-pool" class="headerlink" title="tf.nn.max_pool"></a>tf.nn.max_pool</h2><p><strong>池化</strong></p>
<h3 id="Define-3"><a href="#Define-3" class="headerlink" title="Define"></a>Define</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">max_pool(value, ksize, strides, padding,</span><br><span class="line">		data_format=<span class="string">&#x27;NHWC&#x27;</span>, name=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Parameter-4"><a href="#Parameter-4" class="headerlink" title="Parameter"></a>Parameter</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>Y</td>
<td>tensor</td>
<td>4维的张量，即[batch, height, width, channels]，类型为tf.float32</td>
</tr>
<tr>
<td>ksize</td>
<td>Y</td>
<td>list</td>
<td>池化窗口的大小，长度为4的list，一般是[1，height，width，1]，因为不在batch和channels上做池化，所以第一个和最后一个维度为1</td>
</tr>
<tr>
<td>strides</td>
<td>Y</td>
<td>list</td>
<td>池化窗口在每一个维度上的步长。一般strides[0]=strides[3]=1</td>
</tr>
<tr>
<td>padding</td>
<td>Y</td>
<td>string</td>
<td>只能为”VALID”、”SAME”其中之一，这个值决定了不同的池化方式。VALID：丢弃方式；SAME：补全方式</td>
</tr>
<tr>
<td>data_format</td>
<td>N</td>
<td>string</td>
<td>只能为”NHWC”、”NCHW”。默认”NHWC”</td>
</tr>
<tr>
<td>name</td>
<td>N</td>
<td>string</td>
<td>运算名称</td>
</tr>
</tbody></table>
<h3 id="Demo-4"><a href="#Demo-4" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@version: ??</span></span><br><span class="line"><span class="string">@author: Gavin</span></span><br><span class="line"><span class="string">@license: Apache Licence </span></span><br><span class="line"><span class="string">@contact: woniuyf@gmail.com</span></span><br><span class="line"><span class="string">@site: https://wonius.top/</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: max_pool.py</span></span><br><span class="line"><span class="string">@time: 2018/5/10 20:38</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">a = tf.constant([<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span>], dtype=tf.float32, shape=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">1</span>])</span><br><span class="line">b = tf.nn.max_pool(a, ksize=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], strides=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], padding=<span class="string">&#x27;SAME&#x27;</span>)</span><br><span class="line">c = tf.nn.max_pool(a, ksize=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], strides=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], padding=<span class="string">&#x27;VALID&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;b.shape&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (b.get_shape())</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;b.value&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(b))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;c.shape&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (c.get_shape())</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;c.value&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(c))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算结果</span></span><br><span class="line"><span class="comment"># b.shape</span></span><br><span class="line"><span class="comment"># (1, 2, 2, 1)</span></span><br><span class="line"><span class="comment"># b.value</span></span><br><span class="line"><span class="comment"># [[[[ 9.]</span></span><br><span class="line"><span class="comment">#    [ 2.]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   [[ 6.]</span></span><br><span class="line"><span class="comment">#    [ 3.]]]]</span></span><br><span class="line"><span class="comment"># c.shape</span></span><br><span class="line"><span class="comment"># (1, 2, 2, 1)</span></span><br><span class="line"><span class="comment"># c.value</span></span><br><span class="line"><span class="comment"># [[[[ 9.]</span></span><br><span class="line"><span class="comment">#    [ 2.]]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   [[ 6.]</span></span><br><span class="line"><span class="comment">#    [ 3.]]]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="tf-nn-dropout"><a href="#tf-nn-dropout" class="headerlink" title="tf.nn.dropout"></a>tf.nn.dropout</h2><p><strong>丢弃函数。在训练过程中，按照一定概率将一部分神经网络单元暂时从网络中丢弃，相当于从原始网络中找到一个更瘦的网络</strong></p>
<h3 id="Define-4"><a href="#Define-4" class="headerlink" title="Define"></a>Define</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dropout(x, keep_prob, noise_shape=<span class="literal">None</span>, seed=<span class="literal">None</span>, name=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Parameter-5"><a href="#Parameter-5" class="headerlink" title="Parameter"></a>Parameter</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>x</td>
<td>Y</td>
<td>tensor</td>
<td>x中keep_prob概率的元素，除以keep_prob。或者为0</td>
</tr>
<tr>
<td>keep_prob</td>
<td>Y</td>
<td>scalar</td>
<td>dropout的概率，一般先用占位符</td>
</tr>
<tr>
<td>noise_shape</td>
<td>N</td>
<td>tensor</td>
<td>默认情况下，每个元素是否dropout是相互独立的。<br />如果noise_shape[i]==shape(x)[i]，该维度元素相互独立；<br />如果noise_shape[i]!=shape(x)[i]，该维度元素不相互独立，即要么一起dropout，要么一起保留</td>
</tr>
<tr>
<td>seed</td>
<td>N</td>
<td>数值</td>
<td>如果指定该值，每次dropout结果相同</td>
</tr>
<tr>
<td>name</td>
<td>N</td>
<td>string</td>
<td>运算名称</td>
</tr>
</tbody></table>
<h3 id="Demo-5"><a href="#Demo-5" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@version: ??</span></span><br><span class="line"><span class="string">@author: Gavin</span></span><br><span class="line"><span class="string">@license: Apache Licence </span></span><br><span class="line"><span class="string">@contact: woniuyf@gmail.com</span></span><br><span class="line"><span class="string">@site: https://wonius.top/</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: dropout.py</span></span><br><span class="line"><span class="string">@time: 2018/5/10 20:58</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">a = tf.constant([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], shape=[<span class="number">2</span>,<span class="number">3</span>], dtype=tf.float32)</span><br><span class="line">b = tf.placeholder(tf.float32)</span><br><span class="line">c = tf.nn.dropout(a, b, [<span class="number">2</span>,<span class="number">1</span>], <span class="number">1</span>)</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(tf.global_variables_initializer())</span><br><span class="line">    <span class="built_in">print</span> (sess.run(c, feed_dict=&#123;b:<span class="number">0.75</span>&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算结果</span></span><br><span class="line"><span class="comment"># [[ 0.          0.          0.        ]</span></span><br><span class="line"><span class="comment">#  [ 5.33333349  6.66666651  8.        ]]</span></span><br></pre></td></tr></table></figure>

<h2 id="tf-nn-sigmoid-cross-entropy-with-logits"><a href="#tf-nn-sigmoid-cross-entropy-with-logits" class="headerlink" title="tf.nn.sigmoid_cross_entropy_with_logits"></a>tf.nn.sigmoid_cross_entropy_with_logits</h2><p><strong>计算交叉熵函数。先对 logits 进行 sigmoid 计算，再计算交叉熵</strong></p>
<p>交叉熵：Loss函数的一种。常见的Loss函数为均方平方差；</p>
<p>sigmoid：激活函数的一种；</p>
<p>另外除了tf.nn.sigmoid_cross_entropy_with_logits以外，还有</p>
<p>tf.nn.softmax_cross_entropy_with_logits（参数logits必须为未经缩放的，函数中会对logits进行sigmoid运算）</p>
<p>tf.nn.sparse_softmax_cross_entropy_with_logits</p>
<p>tf.nn.weighted_cross_entropy_with_logits三种交叉熵函数</p>
<h3 id="Define-5"><a href="#Define-5" class="headerlink" title="Define"></a>Define</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sigmoid_cross_entropy_with_logits(_sentinel=<span class="literal">None</span>, labels=<span class="literal">None</span>, logits=<span class="literal">None</span>, name=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Parameter-6"><a href="#Parameter-6" class="headerlink" title="Parameter"></a>Parameter</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>_sentinel</td>
<td>N</td>
<td>None</td>
<td>一般不使用</td>
</tr>
<tr>
<td>logits</td>
<td>N</td>
<td>tensor</td>
<td>float32、float64</td>
</tr>
<tr>
<td>labels</td>
<td>N</td>
<td>tensor</td>
<td>shape与logits相同</td>
</tr>
<tr>
<td>name</td>
<td>N</td>
<td>string</td>
<td>运算名称</td>
</tr>
</tbody></table>
<h3 id="Demo-6"><a href="#Demo-6" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@version: ??</span></span><br><span class="line"><span class="string">@author: Gavin</span></span><br><span class="line"><span class="string">@license: Apache Licence </span></span><br><span class="line"><span class="string">@contact: woniuyf@gmail.com</span></span><br><span class="line"><span class="string">@site: https://wonius.top/</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: sigmod_cross_entropy_with_logits.py.py</span></span><br><span class="line"><span class="string">@time: 2018/5/11 09:27</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">x = tf.constant([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>], dtype=tf.float64)</span><br><span class="line">y = tf.constant([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>], dtype=tf.float64)</span><br><span class="line">loss = tf.nn.sigmoid_cross_entropy_with_logits(logits=x, labels=y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span> (sess.run(loss))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算结果</span></span><br><span class="line"><span class="comment"># [3.13261688e-01   1.26928011e-01   4.85873516e-02   4.01814993e+00</span></span><br><span class="line"><span class="comment">#  5.00671535e+00   2.47568514e-03   7.00091147e+00]</span></span><br></pre></td></tr></table></figure>
<p><strong>该函数返回值是一个向量，并不是一个数。</strong></p>
<p><strong>如果要求交叉熵，需要进一步做tf.reduce_sum操作，即对向量里所有元素求和；</strong></p>
<p><strong>如果要求Loss（常见），需要进一步做tf.reduce_mean操作，对向量求平均值；</strong></p>
<h2 id="tf-nn-bias-add"><a href="#tf-nn-bias-add" class="headerlink" title="tf.nn.bias_add"></a>tf.nn.bias_add</h2><p><strong>将偏差项 bias 加到 value 上面，可以看做是 tf.add 的一个特例。其中 bias 必须是一维的，并且维度和 value 的最后一维相同，数据类型必须和 value 相同</strong></p>
<h3 id="Define-6"><a href="#Define-6" class="headerlink" title="Define"></a>Define</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bias_add(value, bias, data_format=<span class="literal">None</span>, name=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Parameter-7"><a href="#Parameter-7" class="headerlink" title="Parameter"></a>Parameter</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>Y</td>
<td>tensor</td>
<td>Float、double、int64、int32、int16、int8、uint8、complex64、complex128</td>
</tr>
<tr>
<td>bias</td>
<td>Y</td>
<td>1维tensor</td>
<td>维度必须和value最后一维维度相等</td>
</tr>
<tr>
<td>data_format</td>
<td>N</td>
<td>string</td>
<td>支持”NHWC”、”NCHW”</td>
</tr>
<tr>
<td>name</td>
<td>N</td>
<td>string</td>
<td>运算名称</td>
</tr>
</tbody></table>
<h3 id="Demo-7"><a href="#Demo-7" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@version: ??</span></span><br><span class="line"><span class="string">@author: Gavin</span></span><br><span class="line"><span class="string">@license: Apache Licence </span></span><br><span class="line"><span class="string">@contact: woniuyf@gmail.com</span></span><br><span class="line"><span class="string">@site: https://wonius.top/</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: bias_add.py</span></span><br><span class="line"><span class="string">@time: 2018/5/11 11:45</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">a = tf.constant([[<span class="number">1.0</span>, <span class="number">2.0</span>],[<span class="number">1.0</span>, <span class="number">2.0</span>],[<span class="number">1.0</span>, <span class="number">2.0</span>]])</span><br><span class="line">b = tf.constant([<span class="number">2.0</span>,<span class="number">1.0</span>])</span><br><span class="line">c = tf.constant([<span class="number">1.0</span>])</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;bias_add(a, b)&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(tf.nn.bias_add(a, b)))</span><br><span class="line">    <span class="comment"># print (sess.run(tf.nn.bias_add(a, c))) error</span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;-----------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;tf.add(a, b)&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(tf.add(a, b)))</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;-----------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;tf.add(a, c&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(tf.add(a, c)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># bias_add(a, b)</span></span><br><span class="line"><span class="comment"># [[ 3.  3.]</span></span><br><span class="line"><span class="comment">#  [ 3.  3.]</span></span><br><span class="line"><span class="comment">#  [ 3.  3.]]</span></span><br><span class="line"><span class="comment"># -----------------</span></span><br><span class="line"><span class="comment"># tf.add(a, b)</span></span><br><span class="line"><span class="comment"># [[ 3.  3.]</span></span><br><span class="line"><span class="comment">#  [ 3.  3.]</span></span><br><span class="line"><span class="comment">#  [ 3.  3.]]</span></span><br><span class="line"><span class="comment"># -----------------</span></span><br><span class="line"><span class="comment"># tf.add(a, c</span></span><br><span class="line"><span class="comment"># [[ 2.  3.]</span></span><br><span class="line"><span class="comment">#  [ 2.  3.]</span></span><br><span class="line"><span class="comment">#  [ 2.  3.]]</span></span><br></pre></td></tr></table></figure>

<h2 id="tf-truncated-normal"><a href="#tf-truncated-normal" class="headerlink" title="tf.truncated_normal"></a>tf.truncated_normal</h2><p><strong>在截断的正态分布中输出随机数，取值范围[ mean - 2 * stddev, mean + 2 * stddev ]</strong></p>
<h3 id="Define-7"><a href="#Define-7" class="headerlink" title="Define"></a>Define</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">truncated_normal(shape, mean=<span class="number">0.0</span>, stddev=<span class="number">1.0</span>, dtype=tf.float32, seed=<span class="literal">None</span>, name=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Parameter-8"><a href="#Parameter-8" class="headerlink" title="Parameter"></a>Parameter</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>shape</td>
<td>Y</td>
<td>1维整型张量、array</td>
<td>输出张量的维度</td>
</tr>
<tr>
<td>mean</td>
<td>N</td>
<td>0维张量、数值</td>
<td>均值</td>
</tr>
<tr>
<td>stddev</td>
<td>N</td>
<td>0维张量、数值</td>
<td>标准差</td>
</tr>
<tr>
<td>dtype</td>
<td>N</td>
<td>dtype</td>
<td>输出类型</td>
</tr>
<tr>
<td>seed</td>
<td>N</td>
<td>数值</td>
<td>随机种子，若seed复制，每次产生相同随机数</td>
</tr>
<tr>
<td>name</td>
<td>N</td>
<td>string</td>
<td>运算名称</td>
</tr>
</tbody></table>
<h3 id="Demo-8"><a href="#Demo-8" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@version: ??</span></span><br><span class="line"><span class="string">@author: Gavin</span></span><br><span class="line"><span class="string">@license: Apache Licence </span></span><br><span class="line"><span class="string">@contact: woniuyf@gmail.com</span></span><br><span class="line"><span class="string">@site: https://wonius.top/</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: truncated_nomal.py</span></span><br><span class="line"><span class="string">@time: 2018/5/11 09:52</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">initial = tf.truncated_normal(shape=[<span class="number">3</span>,<span class="number">3</span>], mean=<span class="number">0</span>, stddev=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span> (tf.Session().run(initial))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算结果</span></span><br><span class="line"><span class="comment"># [[-0.49039015  0.67874366  1.00580561]</span></span><br><span class="line"><span class="comment">#  [ 0.97545707  0.15845388 -0.73228759]</span></span><br><span class="line"><span class="comment">#  [-0.60446167 -0.87802863  0.24452373]]</span></span><br></pre></td></tr></table></figure>

<h2 id="tf-reduce-mean"><a href="#tf-reduce-mean" class="headerlink" title="tf.reduce_mean"></a>tf.reduce_mean</h2><p><strong>计算张量input_tensor的平均值</strong></p>
<h3 id="Define-8"><a href="#Define-8" class="headerlink" title="Define"></a>Define</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reduce_mean(input_tensor, axis=<span class="literal">None</span>, keep_dims=<span class="literal">False</span>, name=<span class="literal">None</span>, reduction_indices=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Parameter-9"><a href="#Parameter-9" class="headerlink" title="Parameter"></a>Parameter</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>input_tensor</td>
<td>Y</td>
<td>张量</td>
<td>待求平均值的张量</td>
</tr>
<tr>
<td>axis</td>
<td>N</td>
<td>None、0、1</td>
<td>None：全局球平均值<br />0：求每一列平均值<br />1：求每一行平均值</td>
</tr>
<tr>
<td>keep_dims</td>
<td>N</td>
<td>boolean</td>
<td>保留原来的维度（例如不会从二维矩阵降为一维）</td>
</tr>
<tr>
<td>name</td>
<td>N</td>
<td>string</td>
<td>运算名称</td>
</tr>
<tr>
<td>reduction_indices</td>
<td>N</td>
<td>None</td>
<td>和axis等价，已弃用</td>
</tr>
</tbody></table>
<h3 id="Demo-9"><a href="#Demo-9" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@version: ??</span></span><br><span class="line"><span class="string">@author: Gavin</span></span><br><span class="line"><span class="string">@license: Apache Licence </span></span><br><span class="line"><span class="string">@contact: woniuyf@gmail.com</span></span><br><span class="line"><span class="string">@site: https://wonius.top/</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: reduce_mean.py</span></span><br><span class="line"><span class="string">@time: 2018/5/11 13:46</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">initial = [[<span class="number">1.</span>,<span class="number">1.</span>],[<span class="number">2.</span>,<span class="number">2.</span>]]</span><br><span class="line">x = tf.Variable(initial, dtype=tf.float32)</span><br><span class="line">init_op = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(tf.reduce_mean(x)))</span><br><span class="line">    <span class="built_in">print</span> (sess.run(tf.reduce_mean(x, <span class="number">0</span>)))  <span class="comment">#column</span></span><br><span class="line">    <span class="built_in">print</span> (sess.run(tf.reduce_mean(x, <span class="number">1</span>)))  <span class="comment">#row</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算结果</span></span><br><span class="line"><span class="comment"># 1.5</span></span><br><span class="line"><span class="comment"># [ 1.5  1.5]</span></span><br><span class="line"><span class="comment"># [ 1.  2.]</span></span><br></pre></td></tr></table></figure>

<h2 id="tf-square"><a href="#tf-square" class="headerlink" title="tf.square"></a>tf.square</h2><p><strong>计算张量对应元素的平方</strong></p>
<h3 id="Define-9"><a href="#Define-9" class="headerlink" title="Define"></a>Define</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">square(x, name=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Parameter-10"><a href="#Parameter-10" class="headerlink" title="Parameter"></a>Parameter</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>x</td>
<td>Y</td>
<td>tensor</td>
<td>half、float32、float64、int32、int64、complex64、complex128</td>
</tr>
<tr>
<td>name</td>
<td>N</td>
<td>string</td>
<td>运算名称</td>
</tr>
</tbody></table>
<h3 id="Demo-10"><a href="#Demo-10" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@version: ??</span></span><br><span class="line"><span class="string">@author: Gavin</span></span><br><span class="line"><span class="string">@license: Apache Licence </span></span><br><span class="line"><span class="string">@contact: woniuyf@gmail.com</span></span><br><span class="line"><span class="string">@site: https://wonius.top/</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: square.py</span></span><br><span class="line"><span class="string">@time: 2018/5/11 13:59</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">initial_x = [[<span class="number">1.</span>,<span class="number">1.</span>], [<span class="number">2.</span>,<span class="number">2.</span>]]</span><br><span class="line">x = tf.Variable(initial_x, dtype=tf.float32)</span><br><span class="line">x_2 = tf.square(initial_x)</span><br><span class="line"></span><br><span class="line">init_op = tf.global_variables_initializer()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(x_2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算结果</span></span><br><span class="line"><span class="comment"># [[ 1.  1.]</span></span><br><span class="line"><span class="comment">#  [ 4.  4.]]</span></span><br></pre></td></tr></table></figure>

<h2 id="tf-squared-difference"><a href="#tf-squared-difference" class="headerlink" title="tf.squared_difference"></a>tf.squared_difference</h2><p><strong>计算张量x、y对应元素差平方</strong></p>
<h3 id="Define-10"><a href="#Define-10" class="headerlink" title="Define"></a>Define</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">squared_difference(x, y, name=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Parameter-11"><a href="#Parameter-11" class="headerlink" title="Parameter"></a>Parameter</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>必选</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>x</td>
<td>Y</td>
<td>tensor</td>
<td>half、float32、float64、int32、int64、complex64、complex128</td>
</tr>
<tr>
<td>y</td>
<td>Y</td>
<td>tensor</td>
<td>half、float32、float64、int32、int64、complex64、complex128</td>
</tr>
<tr>
<td>name</td>
<td>N</td>
<td>string</td>
<td>运算名称</td>
</tr>
</tbody></table>
<h3 id="Demo-11"><a href="#Demo-11" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@version: ??</span></span><br><span class="line"><span class="string">@author: Gavin</span></span><br><span class="line"><span class="string">@license: Apache Licence </span></span><br><span class="line"><span class="string">@contact: woniuyf@gmail.com</span></span><br><span class="line"><span class="string">@site: https://wonius.top/</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: squared_difference.py</span></span><br><span class="line"><span class="string">@time: 2018/5/11 13:54</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">initial_x = [[<span class="number">1.</span>,<span class="number">1.</span>], [<span class="number">2.</span>,<span class="number">2.</span>]]</span><br><span class="line">x = tf.Variable(initial_x, dtype=tf.float32)</span><br><span class="line">initial_y = [[<span class="number">3.</span>,<span class="number">3.</span>], [<span class="number">4.</span>,<span class="number">4.</span>]]</span><br><span class="line">y = tf.Variable(initial_y, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">diff = tf.squared_difference(x, y)</span><br><span class="line">init_op = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(diff))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算名称</span></span><br><span class="line"><span class="comment"># [[ 4.  4.]</span></span><br><span class="line"><span class="comment">#  [ 4.  4.]]</span></span><br></pre></td></tr></table></figure>

<h2 id="tf-Variable"><a href="#tf-Variable" class="headerlink" title="tf.Variable"></a>tf.Variable</h2><p><strong>类，维护图在执行过程中的状态信息，例如神经网络权重值的变化</strong></p>
<h3 id="Define-11"><a href="#Define-11" class="headerlink" title="Define"></a>Define</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__init__(initial_value=<span class="literal">None</span>, trainable=<span class="literal">True</span>, collections=<span class="literal">None</span>, validate_shape=<span class="literal">True</span>,</span><br><span class="line">		caching_device=<span class="literal">None</span>, name=<span class="literal">None</span>, variable_def=<span class="literal">None</span>, dtype=<span class="literal">None</span>, expected_shape=<span class="literal">None</span>,</span><br><span class="line">		import_scope=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Parameter-12"><a href="#Parameter-12" class="headerlink" title="Parameter"></a>Parameter</h3><table>
<thead>
<tr>
<th>参数名</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>initial_value</td>
<td>tensor</td>
<td>Variable类的初始值。这个张量必须制定shape信息，否则后面validate_shape需设为False</td>
</tr>
<tr>
<td>trainable</td>
<td>boolean</td>
<td>是否把变量添加到 GraphKeys.TRAINABLE_VARIABLES中。<br />（ collection 是一种全局存储，不受变量名生存空间影响，一处保存，到处可取）</td>
</tr>
<tr>
<td>collections</td>
<td>Graph collections</td>
<td>全局存储，默认是 GraphKeys.GLOBAL_VARIABLES</td>
</tr>
<tr>
<td>validate_shape</td>
<td>boolean</td>
<td>是否允许被位置维度的initial_value初始化</td>
</tr>
<tr>
<td>caching_device</td>
<td>string</td>
<td>指明哪个device用来缓存变量</td>
</tr>
<tr>
<td>name</td>
<td>string</td>
<td>变量名</td>
</tr>
<tr>
<td>dtype</td>
<td>dtype</td>
<td>如果设置，初始化的值按照该类型初始化</td>
</tr>
<tr>
<td>expected_shape</td>
<td>tensorShape</td>
<td>要是设置了，那么初始的值会是这种维度</td>
</tr>
</tbody></table>
<h3 id="Demo-12"><a href="#Demo-12" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@version: ??</span></span><br><span class="line"><span class="string">@author: Gavin</span></span><br><span class="line"><span class="string">@license: Apache Licence </span></span><br><span class="line"><span class="string">@contact: woniuyf@gmail.com</span></span><br><span class="line"><span class="string">@site: https://wonius.top/</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@file: Variable.py</span></span><br><span class="line"><span class="string">@time: 2018/5/11 14:46</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">initial = tf.truncated_normal(shape=[<span class="number">10</span>, <span class="number">10</span>], mean=<span class="number">0</span>, stddev=<span class="number">1</span>)</span><br><span class="line">W = tf.Variable(initial)</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [[<span class="number">1.</span>,<span class="number">1.</span>], [<span class="number">2.</span>,<span class="number">2.</span>]]</span><br><span class="line">X = tf.Variable(<span class="built_in">list</span>, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line">init_op = tf.global_variables_initializer()</span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;------------------------------------------------------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(W))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;------------------------------------------------------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(W[:<span class="number">2</span>,:<span class="number">2</span>]))</span><br><span class="line">    op = W[:<span class="number">2</span>,:<span class="number">2</span>].assign(<span class="number">22.</span>*tf.ones((<span class="number">2</span>,<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;------------------------------------------------------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(op))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;------------------------------------------------------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (W.<span class="built_in">eval</span>(sess)) <span class="comment"># computes and returns the value of this variable</span></span><br><span class="line">    <span class="built_in">print</span> (W.<span class="built_in">eval</span>())    <span class="comment"># user with the default session</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;------------------------------------------------------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (W.dtype)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(W.initial_value))</span><br><span class="line">    <span class="built_in">print</span> (sess.run(W.op))</span><br><span class="line">    <span class="built_in">print</span> (W.shape)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;------------------------------------------------------------&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (sess.run(X))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运算结果</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># [[ -1.36460924e+00  -8.78410161e-01   1.87626636e+00   1.27253577e-01</span></span><br><span class="line"><span class="comment">#     1.77748889e-01  -2.79777735e-01  -1.29324961e+00   1.18464601e+00</span></span><br><span class="line"><span class="comment">#     5.91014000e-03   3.91639054e-01]</span></span><br><span class="line"><span class="comment">#  [  1.09924674e+00  -1.08868659e+00  -1.12289786e+00  -6.78496242e-01</span></span><br><span class="line"><span class="comment">#     4.25694019e-01   1.06920172e-02   8.05350840e-01  -7.63205171e-01</span></span><br><span class="line"><span class="comment">#     3.23375136e-01   4.49576497e-01]</span></span><br><span class="line"><span class="comment">#  [ -1.05841234e-01  -2.85442650e-01   1.01552248e+00  -1.69130695e+00</span></span><br><span class="line"><span class="comment">#    -1.15725782e-03   1.47837210e+00   6.69513494e-02   4.84152675e-01</span></span><br><span class="line"><span class="comment">#    -3.82478178e-01  -1.20722222e+00]</span></span><br><span class="line"><span class="comment">#  [  3.09620090e-02  -7.98057988e-02   5.60789108e-01  -1.78828037e+00</span></span><br><span class="line"><span class="comment">#     1.95968688e-01  -2.27404922e-01  -1.72476351e+00  -1.23355138e+00</span></span><br><span class="line"><span class="comment">#    -9.63081241e-01  -1.60457373e+00]</span></span><br><span class="line"><span class="comment">#  [  3.23699638e-02  -5.90677261e-01  -1.92470342e-01  -4.10615206e-01</span></span><br><span class="line"><span class="comment">#     3.35628651e-02  -1.41288012e-01  -3.40104014e-01   1.13289797e+00</span></span><br><span class="line"><span class="comment">#     6.52421772e-01   9.17639136e-01]</span></span><br><span class="line"><span class="comment">#  [  5.11528432e-01   1.64260656e-01  -7.84879684e-01  -2.26418376e-01</span></span><br><span class="line"><span class="comment">#    -8.90385628e-01  -3.38358462e-01   1.96581781e+00  -7.17314780e-02</span></span><br><span class="line"><span class="comment">#     1.23814851e-01   7.64766455e-01]</span></span><br><span class="line"><span class="comment">#  [  2.22003132e-01  -1.70102561e+00  -1.60155982e-01   1.10927892e+00</span></span><br><span class="line"><span class="comment">#    -1.14349496e+00  -6.86953589e-02  -3.56495827e-01  -5.14335275e-01</span></span><br><span class="line"><span class="comment">#     1.98457405e-01  -2.56361932e-01]</span></span><br><span class="line"><span class="comment">#  [ -6.98417068e-01  -1.91254735e-01   2.43045017e-01   1.62485635e+00</span></span><br><span class="line"><span class="comment">#     1.34399071e-01   4.48576242e-01   9.65317804e-03   2.63324082e-01</span></span><br><span class="line"><span class="comment">#     1.71964037e+00   1.81242809e-01]</span></span><br><span class="line"><span class="comment">#  [ -3.06579232e-01   6.82186067e-01  -1.34259194e-01   8.21067274e-01</span></span><br><span class="line"><span class="comment">#     2.75264233e-01   2.36507237e-01  -5.18465579e-01   2.66540438e-01</span></span><br><span class="line"><span class="comment">#    -4.08049405e-01   4.00008321e-01]</span></span><br><span class="line"><span class="comment">#  [  6.39303386e-01  -3.73077720e-01  -3.93441260e-01   1.44391823e+00</span></span><br><span class="line"><span class="comment">#    -4.43163812e-01  -2.28796184e-01  -9.21004534e-01  -6.29425883e-01</span></span><br><span class="line"><span class="comment">#    -1.04850844e-01   5.76163709e-01]]</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># [[-1.36460924 -0.87841016]</span></span><br><span class="line"><span class="comment">#  [ 1.09924674 -1.08868659]]</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># [[  2.20000000e+01   2.20000000e+01   1.87626636e+00   1.27253577e-01</span></span><br><span class="line"><span class="comment">#     1.77748889e-01  -2.79777735e-01  -1.29324961e+00   1.18464601e+00</span></span><br><span class="line"><span class="comment">#     5.91014000e-03   3.91639054e-01]</span></span><br><span class="line"><span class="comment">#  [  2.20000000e+01   2.20000000e+01  -1.12289786e+00  -6.78496242e-01</span></span><br><span class="line"><span class="comment">#     4.25694019e-01   1.06920172e-02   8.05350840e-01  -7.63205171e-01</span></span><br><span class="line"><span class="comment">#     3.23375136e-01   4.49576497e-01]</span></span><br><span class="line"><span class="comment">#  [ -1.05841234e-01  -2.85442650e-01   1.01552248e+00  -1.69130695e+00</span></span><br><span class="line"><span class="comment">#    -1.15725782e-03   1.47837210e+00   6.69513494e-02   4.84152675e-01</span></span><br><span class="line"><span class="comment">#    -3.82478178e-01  -1.20722222e+00]</span></span><br><span class="line"><span class="comment">#  [  3.09620090e-02  -7.98057988e-02   5.60789108e-01  -1.78828037e+00</span></span><br><span class="line"><span class="comment">#     1.95968688e-01  -2.27404922e-01  -1.72476351e+00  -1.23355138e+00</span></span><br><span class="line"><span class="comment">#    -9.63081241e-01  -1.60457373e+00]</span></span><br><span class="line"><span class="comment">#  [  3.23699638e-02  -5.90677261e-01  -1.92470342e-01  -4.10615206e-01</span></span><br><span class="line"><span class="comment">#     3.35628651e-02  -1.41288012e-01  -3.40104014e-01   1.13289797e+00</span></span><br><span class="line"><span class="comment">#     6.52421772e-01   9.17639136e-01]</span></span><br><span class="line"><span class="comment">#  [  5.11528432e-01   1.64260656e-01  -7.84879684e-01  -2.26418376e-01</span></span><br><span class="line"><span class="comment">#    -8.90385628e-01  -3.38358462e-01   1.96581781e+00  -7.17314780e-02</span></span><br><span class="line"><span class="comment">#     1.23814851e-01   7.64766455e-01]</span></span><br><span class="line"><span class="comment">#  [  2.22003132e-01  -1.70102561e+00  -1.60155982e-01   1.10927892e+00</span></span><br><span class="line"><span class="comment">#    -1.14349496e+00  -6.86953589e-02  -3.56495827e-01  -5.14335275e-01</span></span><br><span class="line"><span class="comment">#     1.98457405e-01  -2.56361932e-01]</span></span><br><span class="line"><span class="comment">#  [ -6.98417068e-01  -1.91254735e-01   2.43045017e-01   1.62485635e+00</span></span><br><span class="line"><span class="comment">#     1.34399071e-01   4.48576242e-01   9.65317804e-03   2.63324082e-01</span></span><br><span class="line"><span class="comment">#     1.71964037e+00   1.81242809e-01]</span></span><br><span class="line"><span class="comment">#  [ -3.06579232e-01   6.82186067e-01  -1.34259194e-01   8.21067274e-01</span></span><br><span class="line"><span class="comment">#     2.75264233e-01   2.36507237e-01  -5.18465579e-01   2.66540438e-01</span></span><br><span class="line"><span class="comment">#    -4.08049405e-01   4.00008321e-01]</span></span><br><span class="line"><span class="comment">#  [  6.39303386e-01  -3.73077720e-01  -3.93441260e-01   1.44391823e+00</span></span><br><span class="line"><span class="comment">#    -4.43163812e-01  -2.28796184e-01  -9.21004534e-01  -6.29425883e-01</span></span><br><span class="line"><span class="comment">#    -1.04850844e-01   5.76163709e-01]]</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># [[  2.20000000e+01   2.20000000e+01   1.87626636e+00   1.27253577e-01</span></span><br><span class="line"><span class="comment">#     1.77748889e-01  -2.79777735e-01  -1.29324961e+00   1.18464601e+00</span></span><br><span class="line"><span class="comment">#     5.91014000e-03   3.91639054e-01]</span></span><br><span class="line"><span class="comment">#  [  2.20000000e+01   2.20000000e+01  -1.12289786e+00  -6.78496242e-01</span></span><br><span class="line"><span class="comment">#     4.25694019e-01   1.06920172e-02   8.05350840e-01  -7.63205171e-01</span></span><br><span class="line"><span class="comment">#     3.23375136e-01   4.49576497e-01]</span></span><br><span class="line"><span class="comment">#  [ -1.05841234e-01  -2.85442650e-01   1.01552248e+00  -1.69130695e+00</span></span><br><span class="line"><span class="comment">#    -1.15725782e-03   1.47837210e+00   6.69513494e-02   4.84152675e-01</span></span><br><span class="line"><span class="comment">#    -3.82478178e-01  -1.20722222e+00]</span></span><br><span class="line"><span class="comment">#  [  3.09620090e-02  -7.98057988e-02   5.60789108e-01  -1.78828037e+00</span></span><br><span class="line"><span class="comment">#     1.95968688e-01  -2.27404922e-01  -1.72476351e+00  -1.23355138e+00</span></span><br><span class="line"><span class="comment">#    -9.63081241e-01  -1.60457373e+00]</span></span><br><span class="line"><span class="comment">#  [  3.23699638e-02  -5.90677261e-01  -1.92470342e-01  -4.10615206e-01</span></span><br><span class="line"><span class="comment">#     3.35628651e-02  -1.41288012e-01  -3.40104014e-01   1.13289797e+00</span></span><br><span class="line"><span class="comment">#     6.52421772e-01   9.17639136e-01]</span></span><br><span class="line"><span class="comment">#  [  5.11528432e-01   1.64260656e-01  -7.84879684e-01  -2.26418376e-01</span></span><br><span class="line"><span class="comment">#    -8.90385628e-01  -3.38358462e-01   1.96581781e+00  -7.17314780e-02</span></span><br><span class="line"><span class="comment">#     1.23814851e-01   7.64766455e-01]</span></span><br><span class="line"><span class="comment">#  [  2.22003132e-01  -1.70102561e+00  -1.60155982e-01   1.10927892e+00</span></span><br><span class="line"><span class="comment">#    -1.14349496e+00  -6.86953589e-02  -3.56495827e-01  -5.14335275e-01</span></span><br><span class="line"><span class="comment">#     1.98457405e-01  -2.56361932e-01]</span></span><br><span class="line"><span class="comment">#  [ -6.98417068e-01  -1.91254735e-01   2.43045017e-01   1.62485635e+00</span></span><br><span class="line"><span class="comment">#     1.34399071e-01   4.48576242e-01   9.65317804e-03   2.63324082e-01</span></span><br><span class="line"><span class="comment">#     1.71964037e+00   1.81242809e-01]</span></span><br><span class="line"><span class="comment">#  [ -3.06579232e-01   6.82186067e-01  -1.34259194e-01   8.21067274e-01</span></span><br><span class="line"><span class="comment">#     2.75264233e-01   2.36507237e-01  -5.18465579e-01   2.66540438e-01</span></span><br><span class="line"><span class="comment">#    -4.08049405e-01   4.00008321e-01]</span></span><br><span class="line"><span class="comment">#  [  6.39303386e-01  -3.73077720e-01  -3.93441260e-01   1.44391823e+00</span></span><br><span class="line"><span class="comment">#    -4.43163812e-01  -2.28796184e-01  -9.21004534e-01  -6.29425883e-01</span></span><br><span class="line"><span class="comment">#    -1.04850844e-01   5.76163709e-01]]</span></span><br><span class="line"><span class="comment"># [[  2.20000000e+01   2.20000000e+01   1.87626636e+00   1.27253577e-01</span></span><br><span class="line"><span class="comment">#     1.77748889e-01  -2.79777735e-01  -1.29324961e+00   1.18464601e+00</span></span><br><span class="line"><span class="comment">#     5.91014000e-03   3.91639054e-01]</span></span><br><span class="line"><span class="comment">#  [  2.20000000e+01   2.20000000e+01  -1.12289786e+00  -6.78496242e-01</span></span><br><span class="line"><span class="comment">#     4.25694019e-01   1.06920172e-02   8.05350840e-01  -7.63205171e-01</span></span><br><span class="line"><span class="comment">#     3.23375136e-01   4.49576497e-01]</span></span><br><span class="line"><span class="comment">#  [ -1.05841234e-01  -2.85442650e-01   1.01552248e+00  -1.69130695e+00</span></span><br><span class="line"><span class="comment">#    -1.15725782e-03   1.47837210e+00   6.69513494e-02   4.84152675e-01</span></span><br><span class="line"><span class="comment">#    -3.82478178e-01  -1.20722222e+00]</span></span><br><span class="line"><span class="comment">#  [  3.09620090e-02  -7.98057988e-02   5.60789108e-01  -1.78828037e+00</span></span><br><span class="line"><span class="comment">#     1.95968688e-01  -2.27404922e-01  -1.72476351e+00  -1.23355138e+00</span></span><br><span class="line"><span class="comment">#    -9.63081241e-01  -1.60457373e+00]</span></span><br><span class="line"><span class="comment">#  [  3.23699638e-02  -5.90677261e-01  -1.92470342e-01  -4.10615206e-01</span></span><br><span class="line"><span class="comment">#     3.35628651e-02  -1.41288012e-01  -3.40104014e-01   1.13289797e+00</span></span><br><span class="line"><span class="comment">#     6.52421772e-01   9.17639136e-01]</span></span><br><span class="line"><span class="comment">#  [  5.11528432e-01   1.64260656e-01  -7.84879684e-01  -2.26418376e-01</span></span><br><span class="line"><span class="comment">#    -8.90385628e-01  -3.38358462e-01   1.96581781e+00  -7.17314780e-02</span></span><br><span class="line"><span class="comment">#     1.23814851e-01   7.64766455e-01]</span></span><br><span class="line"><span class="comment">#  [  2.22003132e-01  -1.70102561e+00  -1.60155982e-01   1.10927892e+00</span></span><br><span class="line"><span class="comment">#    -1.14349496e+00  -6.86953589e-02  -3.56495827e-01  -5.14335275e-01</span></span><br><span class="line"><span class="comment">#     1.98457405e-01  -2.56361932e-01]</span></span><br><span class="line"><span class="comment">#  [ -6.98417068e-01  -1.91254735e-01   2.43045017e-01   1.62485635e+00</span></span><br><span class="line"><span class="comment">#     1.34399071e-01   4.48576242e-01   9.65317804e-03   2.63324082e-01</span></span><br><span class="line"><span class="comment">#     1.71964037e+00   1.81242809e-01]</span></span><br><span class="line"><span class="comment">#  [ -3.06579232e-01   6.82186067e-01  -1.34259194e-01   8.21067274e-01</span></span><br><span class="line"><span class="comment">#     2.75264233e-01   2.36507237e-01  -5.18465579e-01   2.66540438e-01</span></span><br><span class="line"><span class="comment">#    -4.08049405e-01   4.00008321e-01]</span></span><br><span class="line"><span class="comment">#  [  6.39303386e-01  -3.73077720e-01  -3.93441260e-01   1.44391823e+00</span></span><br><span class="line"><span class="comment">#    -4.43163812e-01  -2.28796184e-01  -9.21004534e-01  -6.29425883e-01</span></span><br><span class="line"><span class="comment">#    -1.04850844e-01   5.76163709e-01]]</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># &lt;dtype: &#x27;float32_ref&#x27;&gt;</span></span><br><span class="line"><span class="comment"># [[-1.26520741  0.15191878 -0.20875564 -1.3333143  -1.2195878   1.98078632</span></span><br><span class="line"><span class="comment">#   -0.37404546 -0.08800519  1.59779143  0.43416482]</span></span><br><span class="line"><span class="comment">#  [-0.49763143  1.67703199 -0.75461388  1.39778709 -0.59904957  1.07046878</span></span><br><span class="line"><span class="comment">#   -0.66246015  1.20341682 -0.91598368  0.02659398]</span></span><br><span class="line"><span class="comment">#  [ 0.15760519  1.58692122 -1.64905691 -0.82413578 -1.35249043 -0.05494672</span></span><br><span class="line"><span class="comment">#    0.1835352  -1.16055572  0.06633712 -0.60654968]</span></span><br><span class="line"><span class="comment">#  [ 0.44664332  1.32015193  1.19064319  1.04832637 -1.35440087  1.46269107</span></span><br><span class="line"><span class="comment">#   -0.73073471  1.79925811 -0.81201482 -0.52865958]</span></span><br><span class="line"><span class="comment">#  [ 0.86693144  0.58485049  0.74763191  0.16709246  0.87199962 -0.01152798</span></span><br><span class="line"><span class="comment">#   -0.45584357  1.63553476 -0.97385317  0.22666731]</span></span><br><span class="line"><span class="comment">#  [ 0.88356006  0.02941392  0.48637423  0.6196385   0.72364163  0.73068076</span></span><br><span class="line"><span class="comment">#    0.24449067 -1.82126474  0.43334225 -0.57979202]</span></span><br><span class="line"><span class="comment">#  [ 0.90533078 -0.46376067  1.15587556 -0.83500886  0.61234719  0.32427955</span></span><br><span class="line"><span class="comment">#    1.49570584 -0.48938131 -1.18225038  0.19612415]</span></span><br><span class="line"><span class="comment">#  [ 0.66482532  1.62603843  0.83715767  0.93517244 -1.04942799  1.2456522</span></span><br><span class="line"><span class="comment">#    1.45724511  0.82795757 -0.39859715 -1.37503803]</span></span><br><span class="line"><span class="comment">#  [ 0.84474677 -0.97584003 -0.23359941  0.02022619  0.15871523  0.07553232</span></span><br><span class="line"><span class="comment">#   -0.58795238 -1.66832328 -1.08443391 -0.25014412]</span></span><br><span class="line"><span class="comment">#  [ 0.00373921  0.82514638 -0.06235779  0.58550674 -0.90887821 -0.91024882</span></span><br><span class="line"><span class="comment">#    0.57362115 -1.92959452  1.00629067 -0.69716936]]</span></span><br><span class="line"><span class="comment"># None</span></span><br><span class="line"><span class="comment"># (10, 10)</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># [[ 1.  1.]</span></span><br><span class="line"><span class="comment">#  [ 2.  2.]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>TensorFlow</category>
      </categories>
      <tags>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>TensorFlow四种Cross_Entropy算法实现与应用</title>
    <url>/2018/05/12/TensorFlow%E5%9B%9B%E7%A7%8DCross-Entropy%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E4%B8%8E%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p><a href="https://www.toutiao.com/i6360438523132117505/">原文</a></p>
]]></content>
      <categories>
        <category>TensorFlow</category>
      </categories>
      <tags>
        <tag>TensorFlow</tag>
      </tags>
  </entry>
  <entry>
    <title>Vimium快捷键</title>
    <url>/2018/05/03/Vimium%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">向下<span class="regexp">/上/</span>左<span class="regexp">/右移动  j/</span>k<span class="regexp">/h/</span>l</span><br><span class="line">向下<span class="regexp">/上跳动  d/u</span></span><br><span class="line">回到顶<span class="regexp">/尾部  gg/</span>G</span><br><span class="line">窗口打开模式 本窗口<span class="regexp">/新窗口 f/</span>F</span><br><span class="line">查找历史记录+书签   o/O</span><br><span class="line">关闭<span class="regexp">/恢复标签 x/</span>X</span><br><span class="line">查找书签  b<span class="regexp">/B（当前/</span>新窗口打开）</span><br><span class="line">选择左<span class="regexp">/右标签 J/</span>K</span><br><span class="line">搜索剪贴板关键字 在当前<span class="regexp">/新窗口  p/</span>P</span><br><span class="line">跳转到当前url上一级<span class="regexp">/最高级 gu/g</span>U</span><br><span class="line">创建<span class="regexp">/查看标签页  t/</span>T</span><br><span class="line">将焦点聚集在第一个输入框  gi  (<span class="number">2</span>gi就是第二个输入框)</span><br><span class="line">刷新 r</span><br><span class="line">新标签中打开多个链接   &lt;a-f&gt; 即：alt+f</span><br><span class="line">开/关静音  &lt;a-m&gt;即：alt+m</span><br><span class="line">固定标签栏 &lt;a-p&gt;即 alt+p</span><br><span class="line">上一个标签  ^</span><br></pre></td></tr></table></figure>

<h2 id="不常用快捷键"><a href="#不常用快捷键" class="headerlink" title="不常用快捷键"></a>不常用快捷键</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">查找（不支持中文）  /</span><br><span class="line">    向下<span class="regexp">/上查找结果  n/</span>N  (回车后直接打开链接，不用再使用f/F定位)</span><br><span class="line">复制当前链接 yy</span><br><span class="line">新模式 i</span><br><span class="line">查看源码 gs</span><br><span class="line">查看所以快捷键 ?</span><br><span class="line">编辑当前地址栏 g+e<span class="regexp">/E   并在当前/</span>新窗口中打开</span><br><span class="line">复制当前标签页  yt</span><br><span class="line">移动当前标签到左<span class="regexp">/右侧边  &lt;&lt;/</span>&gt;&gt;</span><br><span class="line">滚动到页面最左<span class="regexp">/右边（在有滚动条下才有效果） zH/</span>zL</span><br><span class="line">插入模式  i（可以屏蔽掉vimium快捷键，使其不和网页默认快捷键冲突）</span><br><span class="line">将标签页移动到新窗口  W</span><br><span class="line">创建新标记（可创建多个   m 使用方法</span><br><span class="line">      设置当前<span class="regexp">/全局滚动条位置   m+小/</span>大写字母</span><br><span class="line">      跳转到设置的滚动位置   ~+字母</span><br><span class="line">切换到复制模式 v</span><br></pre></td></tr></table></figure>

<h2 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">作者：小佐</span><br><span class="line">链接：https:<span class="regexp">//</span>www.zhihu.com<span class="regexp">/question/</span><span class="number">23483616</span><span class="regexp">/answer/</span><span class="number">246787555</span></span><br><span class="line">来源：知乎</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br><span class="line"></span><br><span class="line">焦点切换</span><br><span class="line">    从地址栏切换回页面  tag</span><br><span class="line">翻页</span><br><span class="line">    下/上一页  ]]  [[  部分网站不支持  可以使用 Shortcut Manager 插件代替</span><br><span class="line">    下一页代码：</span><br><span class="line">        <span class="keyword">function</span> <span class="keyword">next</span>()&#123;</span><br><span class="line">            var a=$(<span class="string">&quot;.cur&quot;</span>).<span class="keyword">next</span>().find(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">             window.location.assign(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">next</span>();</span><br><span class="line">    上一页代码：</span><br><span class="line">        <span class="keyword">function</span> after()&#123;</span><br><span class="line">            var a=$(<span class="string">&quot;.cur&quot;</span>).prev().find(<span class="string">&quot;a&quot;</span>).attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">             window.location.assign(a);</span><br><span class="line">        &#125;</span><br><span class="line">        after();</span><br><span class="line">自定义搜索引擎</span><br><span class="line">    设置：</span><br><span class="line">        请查看选项：Custom search engines</span><br><span class="line">    使用：</span><br><span class="line">        按b/B打开搜索框，输入搜索引擎关键字+空格</span><br><span class="line">    扩展：</span><br><span class="line">        计算功能</span><br><span class="line">            g (<span class="number">1</span>+<span class="number">2</span>)*<span class="number">3</span>-<span class="number">4</span>=     进入google搜索模式直接输入公式后面加<span class="string">&quot;=&quot;</span>号</span><br><span class="line">打开chrome系统页面</span><br><span class="line">    chrome设置页面</span><br><span class="line">        about:setting</span><br><span class="line">    扩展程序</span><br><span class="line">        about:extensions</span><br><span class="line">    历史(history)，下载(downloads)，书签(bookmarks),建议使用chrome默认快捷键代替</span><br><span class="line">        ctrl+h,ctrl+j,ctrl+shift+o</span><br><span class="line">关于&lt;a-p&gt;,&lt;c-e&gt;</span><br><span class="line">    是emacs中的表示方法，分别指alt+p,ctrl+e</span><br><span class="line">快速定位+复制文本：alt+f,v,hjkl,y四步曲</span><br><span class="line">    alt+f 搜索指定关键字，并定位到起始点</span><br><span class="line">    再按v切换到复制模式</span><br><span class="line">    再使用hjkl控制方向选择范围</span><br><span class="line">    最后y复制</span><br><span class="line">删除/修改命令</span><br><span class="line">    删除指定命令</span><br><span class="line">        unmap j   删除命令j</span><br><span class="line">        unmapAll  删除所有命令</span><br><span class="line">    修改命令（后面的命令参数可以在选择里面打开 show available commands找到）</span><br><span class="line">        map a LinkHints.activateMode  把a定义原来f的功能</span><br><span class="line">        map f scrollPageDown   把f定义成原来d的功能</span><br><span class="line">本地文件中使用vimium</span><br><span class="line">    打开chrome插件设置页面，勾选<span class="string">&quot;允许访问文件网址&quot;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Chrome</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>Websocket+Stomp+RabbitMQ应用</title>
    <url>/2017/08/02/Websocket-Stomp-RabbitMQ/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;&emsp;最近开发中遇到实时接收关联系统信息的功能，关联系统通过RabbitMQ消息队列发布消息，之前还在想通过浏览器链接自家服务器，然后自家服务器订阅关联系统队列的架构。后来查了一下，不用这么麻烦，直接通过WebSocket+Stomp方式，即可实现浏览器直接订阅关联系统消息队列。</p>
]]></content>
      <categories>
        <category>积累</category>
      </categories>
      <tags>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>configMap的应用</title>
    <url>/2020/10/21/configMap%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​    我们系统的微服务是通过K8S容器化部署的，由于某些原因，没有对接配置中心。所以为了将配置与应用分离，便于后续修改配置，决定使用configMap+deployment的方式，将配置文件外挂到应用上。</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>​    整体思路是，创建application.yml配置文件，应用打包时将该文件打到包内。然后将每个环境的</p>
<h2 id="修改应用"><a href="#修改应用" class="headerlink" title="修改应用"></a>修改应用</h2><p>修改应用，指定配置文件为application.yml</p>
<h2 id="创建configMap"><a href="#创建configMap" class="headerlink" title="创建configMap"></a>创建configMap</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl create cm xxx-config --from-file=ci=xxxx.yml --from-file=stg=xxx.yml --from-file=prod=xxx.yml</span><br></pre></td></tr></table></figure>

<h2 id="修改deployment"><a href="#修改deployment" class="headerlink" title="修改deployment"></a>修改deployment</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mountPath</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cm</span></span><br><span class="line">  <span class="attr">mountPath:</span> <span class="string">/xx/xx/application.yml</span></span><br><span class="line">  <span class="attr">subbPath:</span> <span class="string">application.yml</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># volumes</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">cm</span></span><br><span class="line">  <span class="attr">configMap:</span> </span><br><span class="line">    <span class="attr">name:</span> <span class="string">xxx-config</span></span><br><span class="line">    <span class="attr">items:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">ci</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">application.yml</span></span><br></pre></td></tr></table></figure>

<p>修改完成后部署验证</p>
]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>K8S</tag>
        <tag>configMap</tag>
      </tags>
  </entry>
  <entry>
    <title>ZK那点事儿</title>
    <url>/2020/03/25/ZK%E9%82%A3%E7%82%B9%E4%BA%8B%E5%84%BF/</url>
    <content><![CDATA[<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol>
<li>应用场景：集群管理、注册发现中心、分布式锁；</li>
<li>集群为单数，是为了省资源；</li>
<li>最小集群实例数为3台。如果只有2台，一台都不能挂，跟单点效果是一样的。</li>
<li>加入新节点需要修改所有的zoo.cfg；</li>
<li>修改完后如果生效需要重启。有两种方案：1. 同时重启；2.     按特定顺序重启；</li>
<li>如果先重启leader，会造成脑裂；</li>
<li>Port1：非选举通讯端口；port2：选举通讯端口；</li>
<li>选举规则：先看事务id，相同，在看server.id；选票（事务id，server.id）；</li>
<li>集群越大，节点越多，针对每个节点的通讯消耗越大，socket线程越多；</li>
<li>每台实例一个Znode，容量1M，数据存储在内存中；</li>
<li>zk是cp架构，不适合做注册中心，注册中心更适合ap架构，nacos就是；</li>
</ol>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>ZooKeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>iTerm主题配色</title>
    <url>/2018/09/19/iTerm%E4%B8%BB%E9%A2%98%E9%85%8D%E8%89%B2/</url>
    <content><![CDATA[<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><img data-src="/2018/09/19/iTerm%E4%B8%BB%E9%A2%98%E9%85%8D%E8%89%B2/color.png" class="">

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>链接:<a href="https://pan.baidu.com/s/1w64NLBLIyFnMRl4L5qaIJA">https://pan.baidu.com/s/1w64NLBLIyFnMRl4L5qaIJA</a>  密码:c54h</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>iTerm</tag>
      </tags>
  </entry>
  <entry>
    <title>Json处理时需要注意的那些事儿</title>
    <url>/2018/09/12/json/</url>
    <content><![CDATA[<h1 id="JsonIgnore"><a href="#JsonIgnore" class="headerlink" title="@JsonIgnore"></a>@JsonIgnore</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String gender;</span><br><span class="line">    ……</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ……</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>（忽略命名规范）上述代码在序列化、反序列化时，都会导致name属性被忽略。</p>
<p>除非在属性上添加@JsonProperty。</p>
]]></content>
      <categories>
        <category>积累</category>
      </categories>
      <tags>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS12_Beta升级</title>
    <url>/2018/06/06/iOS12-Beta%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<p>​    iOS12体验版发布，大家快来体验咯</p>
<p>描述文件：</p>
<p>链接:<a href="https://pan.baidu.com/s/1G_lG1nqRf9Qunuq7cg8HLw">https://pan.baidu.com/s/1G_lG1nqRf9Qunuq7cg8HLw</a>  密码:eyih</p>
<p>升级方法：</p>
<ol>
<li>备份（毕竟是体验版，给自己留条后路😬）；</li>
<li>手机Safari浏览器打开连接，下载描述文件，点击允许安装；</li>
<li>重启手机，在通用-软件更新，升级；</li>
<li>下载，安装就可以了；</li>
</ol>
]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>kubectl常用命令</title>
    <url>/2018/07/21/kubectl%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有pod</span></span><br><span class="line">kubectl get po -o wide</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod启动日志</span></span><br><span class="line">kubectl logs xxx</span><br><span class="line"><span class="comment"># 也可以写到文件中，查看方便</span></span><br><span class="line">kubectl logs xxx &gt; xxx.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod的详细信息</span></span><br><span class="line">kubectl describe po xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入pod内部</span></span><br><span class="line">kubectl <span class="built_in">exec</span> -it xxx bash</span><br></pre></td></tr></table></figure>

<h1 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑deployment</span></span><br><span class="line">kubectl edit deployments xxx -o yaml</span><br></pre></td></tr></table></figure>

<h1 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有service</span></span><br><span class="line">kubectl get svc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个service</span></span><br><span class="line">kubectl describe svc xxx</span><br></pre></td></tr></table></figure>

<h1 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从文件创建configMap</span></span><br><span class="line"><span class="comment"># AA：configMap的名称</span></span><br><span class="line"><span class="comment"># BB：configMap中key的名称</span></span><br><span class="line"><span class="comment"># CC.yml：源文件</span></span><br><span class="line">kubectl create cm AA --from-file=BB=CC.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将configMap导出为yaml文件</span></span><br><span class="line">kubectl get cm AA -o yaml &gt; BB.yaml</span><br></pre></td></tr></table></figure>

<h1 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h1>]]></content>
      <categories>
        <category>K8S</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS安装sentencepiece模块失败</title>
    <url>/2022/05/02/macOS%E5%AE%89%E8%A3%85sentencepiece%E6%A8%A1%E5%9D%97%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">macOS Monterey 12.2.1，Apple M1 Pro版本</span><br><span class="line"></span><br><span class="line">$ python --version</span><br><span class="line">Python 3.8.9</span><br><span class="line"></span><br><span class="line">$ pip --version</span><br><span class="line">pip 22.0.4 from /Users/gavin/Library/Python/3.8/lib/python/site-packages/pip (python 3.8)</span><br></pre></td></tr></table></figure>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装模块时报错，信息如下</span></span><br><span class="line">$ pip install sentencepiece</span><br><span class="line"></span><br><span class="line">Running setup.py install <span class="keyword">for</span> sentencepiece ... error</span><br><span class="line">  error: subprocess-exited-with-error</span><br><span class="line"></span><br><span class="line">  × Running setup.py install <span class="keyword">for</span> sentencepiece did not run successfully.</span><br><span class="line">  │ <span class="built_in">exit</span> code: 1</span><br><span class="line">  ╰─&gt; [25 lines of output]</span><br><span class="line">      /Users/gavin/Library/Python/3.8/lib/python/site-packages/setuptools/dist.py:757: UserWarning: Usage of dash-separated <span class="string">&#x27;description-file&#x27;</span> will not be supported <span class="keyword">in</span> future versions. Please use the underscore name <span class="string">&#x27;description_file&#x27;</span> instead</span><br><span class="line">        warnings.warn(</span><br><span class="line">      running install</span><br><span class="line">      /Users/gavin/Library/Python/3.8/lib/python/site-packages/setuptools/<span class="built_in">command</span>/install.py:34: SetuptoolsDeprecationWarning: setup.py install is deprecated. Use build and pip and other standards-based tools.</span><br><span class="line">        warnings.warn(</span><br><span class="line">      running build</span><br><span class="line">      running build_py</span><br><span class="line">      creating build</span><br><span class="line">      creating build/lib.macosx-10.14-arm64-cpython-38</span><br><span class="line">      creating build/lib.macosx-10.14-arm64-cpython-38/sentencepiece</span><br><span class="line">      copying src/sentencepiece/__init__.py -&gt; build/lib.macosx-10.14-arm64-cpython-38/sentencepiece</span><br><span class="line">      copying src/sentencepiece/sentencepiece_model_pb2.py -&gt; build/lib.macosx-10.14-arm64-cpython-38/sentencepiece</span><br><span class="line">      copying src/sentencepiece/sentencepiece_pb2.py -&gt; build/lib.macosx-10.14-arm64-cpython-38/sentencepiece</span><br><span class="line">      running build_ext</span><br><span class="line">      /bin/sh: pkg-config: <span class="built_in">command</span> not found</span><br><span class="line">      mkdir: bundled: File exists</span><br><span class="line">      fatal: destination path <span class="string">&#x27;sentencepiece&#x27;</span> already exists and is not an empty directory.</span><br><span class="line">      fatal: destination path <span class="string">&#x27;sentencepiece&#x27;</span> already exists and is not an empty directory.</span><br><span class="line">      mkdir: build: File exists</span><br><span class="line">      ./build_bundled.sh: line 15: cmake: <span class="built_in">command</span> not found</span><br><span class="line">      ./build_bundled.sh: line 16: nproc: <span class="built_in">command</span> not found</span><br><span class="line">      make: *** No targets specified and no makefile found.  Stop.</span><br><span class="line">      make: *** No rule to make target `install<span class="string">&#x27;.  Stop.</span></span><br><span class="line"><span class="string">      env: pkg-config: No such file or directory</span></span><br><span class="line"><span class="string">      Failed to find sentencepiece pkg-config</span></span><br><span class="line"><span class="string">      [end of output]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  note: This error originates from a subprocess, and is likely not a problem with pip.</span></span><br><span class="line"><span class="string">error: legacy-install-failure</span></span><br></pre></td></tr></table></figure>

<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>既然无法在线安装，遂尝试下载安装包，本地安装。</p>
<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>登录<a href="https://pypi.org/project/sentencepiece/#files">官方下载页面</a>，找到最新版本<code>sentencepiece-0.1.96-cp39-cp39-macosx_10_6_x86_64.whl</code>，下载，然后执行命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install sentencepiece-0.1.96-cp39-cp39-macosx_10_6_x86_64.whl</span><br><span class="line">Defaulting to user installation because normal site-packages is not writeable</span><br><span class="line">Looking <span class="keyword">in</span> indexes: https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">ERROR: sentencepiece-0.1.96-cp39-cp39-macosx_10_6_x86_64.whl is not a supported wheel on this platform.</span><br></pre></td></tr></table></figure>

<p>报错平台不支持，而且过程中会到仓库中查找 index。因为我用的是清华的源，第一反应是清华的源仓库里没有这个版本，遂到<a href="https://pypi.tuna.tsinghua.edu.cn/simple/sentencepiece/">清华仓库</a>找了一下，有这个版本，名称也一模一样。</p>
<p>查了一下 cp39 对应的 python 版本，3.9才能安装。</p>
<p>我电脑安装的是 3.8，所以重新下载<code>sentencepiece-0.1.96-cp38-cp38-macosx_10_6_x86_64.whl </code>版本。</p>
<p>重新执行<code>pip install sentencepiece-0.1.96-cp38-cp38-macosx_10_6_x86_64.whl</code>，仍然报错平台不支持。</p>
<h3 id="解决版本问题"><a href="#解决版本问题" class="headerlink" title="解决版本问题"></a>解决版本问题</h3><p>报错平台不支持，当前思路是查看当前电脑上 python 支持版本，查到一个方法，但是执行报错：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python 环境中执行</span></span><br><span class="line">import pip._internal</span><br><span class="line"><span class="built_in">print</span>(pip._internal.pep425tags.get_supported())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 报错信息，模块中没有这个属性</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/Users/gavin/Downloads/PycharmProjects/pythonProject/version.py&quot;</span>, line 2, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="built_in">print</span>(pip._internal.pep425tags.get_supported())</span><br><span class="line">AttributeError: module <span class="string">&#x27;pip._internal&#x27;</span> has no attribute <span class="string">&#x27;pep425tags&#x27;</span></span><br></pre></td></tr></table></figure>

<p>后来发现这个方法，查看当前 python 版本适配的标签：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip debug --verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">······</span><br><span class="line">Compatible tags: 334</span><br><span class="line">  cp38-cp38-macosx_12_0_arm64</span><br><span class="line">  cp38-cp38-macosx_12_0_universal2</span><br><span class="line">  cp38-cp38-macosx_11_0_arm64</span><br><span class="line">  cp38-cp38-macosx_11_0_universal2</span><br><span class="line">  cp38-cp38-macosx_10_16_universal2</span><br><span class="line">  cp38-cp38-macosx_10_15_universal2</span><br><span class="line">  cp38-cp38-macosx_10_14_universal2</span><br><span class="line">  cp38-cp38-macosx_10_13_universal2</span><br><span class="line">  cp38-cp38-macosx_10_12_universal2</span><br><span class="line">  cp38-cp38-macosx_10_11_universal2</span><br><span class="line">  cp38-cp38-macosx_10_10_universal2</span><br><span class="line">  cp38-cp38-macosx_10_9_universal2</span><br><span class="line">  cp38-cp38-macosx_10_8_universal2</span><br><span class="line">  cp38-cp38-macosx_10_7_universal2</span><br><span class="line">  cp38-cp38-macosx_10_6_universal2</span><br><span class="line">  cp38-cp38-macosx_10_5_universal2</span><br><span class="line">  cp38-cp38-macosx_10_4_universal2</span><br><span class="line">  cp38-abi3-macosx_12_0_arm64</span><br><span class="line">  cp38-abi3-macosx_12_0_universal2</span><br><span class="line">  cp38-abi3-macosx_11_0_arm64</span><br><span class="line">  cp38-abi3-macosx_11_0_universal2</span><br><span class="line">  cp38-abi3-macosx_10_16_universal2</span><br><span class="line">······</span><br></pre></td></tr></table></figure>

<p>从中发现<code>cp38-cp38-macosx_10_6_universal2</code>标签，尝试将下载的包名修改为该标签：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cp sentencepiece-0.1.96-cp38-cp38-macosx_10_6_x86_64.whl sentencepiece-0.1.96-cp38-cp38-macosx_10_6_universal2.whl</span><br><span class="line"></span><br><span class="line">$ pip install sentencepiece-0.1.96-cp38-cp38-macosx_10_6_universal2.whl</span><br></pre></td></tr></table></figure>

<p>安装成功。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS设置jenv</title>
    <url>/2022/06/28/macOS%E8%AE%BE%E7%BD%AEjenv/</url>
    <content><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">brew install jenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$HOME/.jenv/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(jenv init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">jenv versions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 到官网下载对应版本，安装，省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要手动将jdk添加到jenv</span></span><br><span class="line">jenv add /Library/Java/JavaVirtualMachines/jdk1.8.0_321.jdk/Contents/Home</span><br><span class="line">jenv add /Library/Java/JavaVirtualMachines/jdk-11.0.15.1.jdk/Contents/Home</span><br><span class="line">jenv add /Library/Java/JavaVirtualMachines/jdk-17.0.3.1.jdk/Contents/Home</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动删除某版本</span></span><br><span class="line">jenv remove *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置某版本，如果之前有设置JAVA_HOME，需要注释掉</span></span><br><span class="line">jenv <span class="built_in">local</span> 1.8</span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看jenv中所有java对应的路径</span></span><br><span class="line">ll $/.jenv/versions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前目录java版本</span></span><br><span class="line">jenv <span class="built_in">which</span> java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置全局默认版本为1.8</span></span><br><span class="line">jenv global 1.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独为某文件设置版本</span></span><br><span class="line"><span class="built_in">echo</span> 1.8 &gt;&gt; ./.java-version</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
      <tags>
        <tag>MacOS</tag>
      </tags>
  </entry>
  <entry>
    <title>pip2与pip3无法并存共用</title>
    <url>/2018/05/23/pip2%E4%B8%8Epip3%E6%97%A0%E6%B3%95%E5%B9%B6%E5%AD%98%E5%85%B1%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>OS：</p>
<p>​    MacOS 10.13.4</p>
<p>Python：</p>
<p>​    python2.7(系统自带)：/System/Library/Frameworks/Python.framework/Versions/2.7</p>
<p>​    python3.6.5(后来安装)：/usr/local/Cellar/python/3.6.5/</p>
<p>pip：</p>
<p>​    pip2：/usr/local/bin/pip</p>
<p>​    pip3：/usr/local/bin/pip3</p>
<h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p>​    当我安装python3.6.5之后，python3中自带pip3，且将原来装的pip覆盖，导致pip无法使用。虽然不用pip命令也可以使用pip功能（<code>python -m pip install XXXX</code>），可以通过重新安装pip方法，使pip生效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo python -m pip install --upgrade pip --force-reinstall</span><br><span class="line"><span class="comment"># 查看pip信息</span></span><br><span class="line">pip -V</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果pip3也有问题，重新安装一遍pip3</span></span><br><span class="line">sudo python3 -m pip install --upgrade pip --force-reinstall</span><br><span class="line"><span class="comment"># 查看pip3信息</span></span><br><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>

<p>​    </p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>setTimeOut()与jQuery中的$.ajax合用，导致内存泄漏</title>
    <url>/2017/12/18/setTimeOut-%E4%B8%8EjQuery%E4%B8%AD%E7%9A%84-ajax%E5%90%88%E7%94%A8%EF%BC%8C%E5%AF%BC%E8%87%B4%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</url>
    <content><![CDATA[<p>最近遇到这个问题，记录一下 </p>
]]></content>
  </entry>
  <entry>
    <title>Solr高亮优化</title>
    <url>/2020/10/14/solr%E9%AB%98%E4%BA%AE%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>0729进展：<br>删除了一些无用的过滤器，并打开httpcaching缓存。<br>目前压测开20个线程（静态参数）1分钟，错误率约0.3%左右。<br>20个线程（动态参数）1分钟，错误率约3.68%左右。<br>后续优化方向：</p>
<ol>
<li>solr内存回收策略方面调整；</li>
<li>solr查询优化参数调优；</li>
<li>查看高亮其他过滤器；</li>
</ol>
<p>PS：目前效率这么差，主要是因为高亮。因为使用高亮查询时，相当于在查询时重新索引，不会用之前构建的索引，所以比较消耗资源，也比较慢。</p>
<p>0730进展：</p>
<ol>
<li>删除了查询逻辑中无用的字段</li>
<li>调整solr的jvm新生代内存分配，减少gc的次数</li>
<li>调整tomcat线程池<br>这些调整都没什么较好的效果，目前效果：<br>压测开20个线程（静态参数）1分钟，错误率0.1%左右。<br>压测开20个线程（静态参数）1分钟，错误率25%左右。<br>（昨天solr内部只有2w条数据，今天solr中有22w条数据）</li>
</ol>
<p>明天的方向：<br>再查些资料看看（这方面资料不多）</p>
<p>0731进展：</p>
<ol>
<li>高亮组件改为FastVectorHighlighter</li>
<li>重新调整solr的jvm新生代内存分配</li>
<li>将solr中的collection改为2个分片<br>效果：<br>因为改了分片，目前在重建索引，solr中的数据5w左右<br>压测开20个线程（动态参数）1分钟，错误率0.03%左右。<br>压测开50个线程（动态参数）1分钟，错误率10%左右。（前50秒在0.02%，后10秒错误率突增，主要是因为由于压测的电脑线程跑满，无法创建新线程报的错）</li>
</ol>
<p>优化成这样就差不多了吧</p>
<p>这几天做了如下优化：</p>
<ol>
<li>调整全局搜索应用代码，删除不需要的查询字段和高亮字段；</li>
<li>将高亮字段类型改为持久化，可以持久化高亮字段的索引；</li>
<li>删除高亮字段所属的类型字段的过滤器（主要是同义词和停用词，我看了对应的文本文件，只有2条内容，应该是搭建solr时从别的地方拷贝过来的）</li>
<li>优化启动solr时jvm的内存分配</li>
<li>默认高亮组件效率较低，改为FastVectorHighter高亮组件</li>
<li>之前uat环境数据只有1个分片，现在改为了2个分片</li>
<li>调整了solr的配置，打开了httpcaching缓存</li>
</ol>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Solr</tag>
      </tags>
  </entry>
  <entry>
    <title>vim键位介绍</title>
    <url>/2018/05/29/vim%E9%94%AE%E4%BD%8D%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="键位图"><a href="#键位图" class="headerlink" title="键位图"></a>键位图</h1><p><img data-src="../vim%E9%94%AE%E4%BD%8D%E4%BB%8B%E7%BB%8D/vim.png" alt="键位图"></p>
<h1 id="常用键位"><a href="#常用键位" class="headerlink" title="常用键位"></a>常用键位</h1><ol>
<li><p>在普通模式下输入 :s/正则表达式/替换文本/g 可以在当前行范围内查找替换。（在正常的IDEA中需要选中当前行后在当前选区查找替换）</p>
</li>
<li><p>在普通模式下输入 小数点将在当前光标位置重复上一次修改操作。例如你在某一行进行了上述的查找替换，如果立即需要在另一行做同样操作，把光标移动到该行按小数点即可。</p>
</li>
<li><p>yyp复制当前行。 yy10p 复制当前行10次</p>
</li>
<li><p>u 撤销修改/ Ctrl+R 重做修改</p>
</li>
<li><p>q加任何单个数字或字母，录制后续操作，记录到名为该数字或字母的宏（Macro）中。在录制状态下按q结束录制。@加某个已录制的宏名（单个数字或字母），回放宏。录制的宏只要不被覆盖，会自动保存。重启IDEA后仍然有效。（在正常的IDEA中使用宏需要进行菜单操作，不甚方便）</p>
</li>
<li><p>daw删除一个单词，d$删除至行尾，d0删除至行首（包括缩进），d^删除至行首（保留缩进），dd删除当前行。删除后按p可以复制删除内容。</p>
</li>
<li><p>J直接把下一行连接到本行末尾，去除缩进 </p>
</li>
<li><p>%跳到匹配的括号</p>
</li>
<li><p>10ib<ESC> 插入10个b。（数字）i/a/o/O（字符串）<ESC>可插入n个重复字符串，i在光标前插入，a在光标后插入，o在下一行插入，O在上一行插入。注意在IDEA默认情况下输入“i字符”后会弹出自动补全菜单，需要多按一下ESC取消掉补全菜单。</p>
</li>
<li><p>在一个数字上按ctrl+a，可将该数字加1.  按ctrl+x可将数字减1. 按（数字）ctrl+a，可将光标数字加上输入的数字。</p>
</li>
<li><p>~ - 将光标下的字母改变大小写。 g~aw - 改变当前单词的大小写。gU&lt;空格&gt; - 当前字母改大写。gu&lt;空格&gt; -当前字母改小写。 gUaw - 当前单词改大写。 guaw - 当前单词改小写。 在字符串前面的引号上 gUf” - 字符串改大写。</p>
</li>
<li><p>行号G -直接移动到某行。（使用IDEA的Ctrl+G会弹出对话框，且移动到的那行会自动居中，颇为眼花）</p>
</li>
<li><p>H -光标移动到屏幕第一行。 L - 光标移动到屏幕最后一行。 M - 光标移动到屏幕中间。 zz - 光标所在行居中。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>华硕TUF-AX3000刷梅林固件</title>
    <url>/2020/10/27/%E5%8D%8E%E7%A1%95TUF-AX3000%E9%85%8D%E7%BD%AE%E6%A2%85%E6%9E%97%E5%9B%BA%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>​    最近购入了新路由器，华硕TUF-AX3000，准备开始折腾。（以前用的是华为AX3 Pro，性价比也很高，算是300元内性价比之王了吧，颜值在线，wifi6标准，还能NFC连接WiFi。唯一不能满足我的就是，不能安装插件科学上网。）</p>
<h1 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h1><p>目标价位是800左右，然后有几个备选都还不错，网件R8000P、华硕RT-AC86U、华硕TUF-AX3000。奈何其余两款不支持WiFi6，购入这个路由器短期内肯定不会更换了，所以一步到位，直接上WiFi6，最终选择了华硕TUF-AX3000。</p>
<p>如何挑路由器就只能在网上找资料了，比较权威的还是<a href="https://www.acwifi.net/">acwifi</a>。</p>
<h1 id="购入"><a href="#购入" class="headerlink" title="购入"></a>购入</h1><p>对比了狗东、拼夕夕，还是拼夕夕香啊，最后在拼夕夕下单。</p>
<p>拼夕夕有好多拆封帮忙刷入梅林固件的，我担心是返修的机器，直接买了全新版本。600多软妹币。</p>
<p>家里的台式网卡坏了好久，拖着一直没弄，这次顺便入了个Intel-AX3000T无线网卡，同样支持wifi6，终于重新焕发青春。这下子终于可以云顶下棋啦🥳</p>
<h1 id="刷固件"><a href="#刷固件" class="headerlink" title="刷固件"></a>刷固件</h1><h2 id="找固件"><a href="#找固件" class="headerlink" title="找固件"></a>找固件</h2><p>机器到手后就开始了折腾，不折腾也不会买华硕了。</p>
<p>找固件常用的论坛有<a href="https://www.right.com.cn/forum/">恩山</a>、<a href="https://koolshare.cn/portal.php">koolshare</a>。</p>
<p>几经周折，找了好几个版本都比较旧，最终在koolshare上找到<a href="https://koolshare.cn/thread-179968-1-1.html">这篇帖子</a>，是基于最新官方固件（384_9923）修改的。一起就绪，开整。</p>
<h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><p>刷机比较简单，连上wifi后，访问router.asus.com，登入后在系统设置里，上传固件，等待刷新，升级完重启就行了。</p>
<p>重新登录，看到里面有了软件中心。有一些内置的插件可以直接安装，不过没有我们想要的科学上网插件。好吧，继续找。</p>
<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><h2 id="找插件"><a href="#找插件" class="headerlink" title="找插件"></a>找插件</h2><p>又是几经周折，终于找到了<a href="https://github.com/hq450/fancyss_history_package/tree/master/fancyss_hnd">ss插件</a>，我这里下载的是1.8.8版本。</p>
<p>记住下面这些参数，找插件的时候用得到。</p>
<p>CPU：BCM6750，平台：axhnd.675x，架构：ARMV7，内核：4.1.52。</p>
<h2 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h2><ol>
<li><p>下载完成后，登录路由器管理页面，点开软件中心，然后离线安装，上传安装包。</p>
</li>
<li><p>安装过程中会提示检测到非法关键词，安装失败。</p>
<p>这时候需要使用ssh远程登录到路由器上（路由器ip在管理页面上有），输入管理员账号、密码，然后执行下面的命令关闭校验。（如果登录失败，提示<code>WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!</code>，到.ssh目录下删掉known_hosts文件）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/\tdetect_package/\t# detect_package/g&#x27; /koolshare/scripts/ks_tar_install.sh</span><br></pre></td></tr></table></figure></li>
<li><p>重新上传安装包，然后安装，这时候提示安装成功。</p>
</li>
<li><p>刷新页面，可以看到软件中心下有科学上网的插件了，点进去，配置v2ray相关的配置或者ssr的配置，然后打开开关。</p>
</li>
</ol>
<p>发现并没有开启科学上网！！！</p>
<p>原因是路由器本身的内存太小，不足以支撑v2ray插件运行。</p>
<p>买一个好点的U盘，插到路由器上，安装虚拟内存的插件，创建1G的虚拟内存并挂载，然后就能科学上网啦！</p>
<h2 id="路由器相关的一些命令"><a href="#路由器相关的一些命令" class="headerlink" title="路由器相关的一些命令"></a>路由器相关的一些命令</h2><p>清空jffs，改命令会将软件中心下所有的插件删掉。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 $(pidof skipd)</span><br><span class="line"><span class="built_in">cd</span> /jffs</span><br><span class="line">rm -r .[a-zA-Z_]* *</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p>删除软件中心</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 $(pidof skipd)</span><br><span class="line">rm -rf /jffs/.asusrouter /jffs/.koolshare /jffs/db /jffs/ksdb /jffs/config/* /jffs/etc/profile</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>

<h1 id="one-more-thing"><a href="#one-more-thing" class="headerlink" title="one more thing"></a>one more thing</h1><p>v2ray运行的时候会占用系统资源，因为路由器天生的局限性，配置不会太高，所以最近又被软路由种草了…兴冲冲的跟女票说这个事儿，又被无情的diss了…</p>
<p>不过一般情况路由器就够用了。除非你家宽带和机场带宽都500M以上，不然看不出来差距。</p>
]]></content>
      <categories>
        <category>路由器</category>
      </categories>
      <tags>
        <tag>路由器</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Mybatis时，对于Oracle中boolean类型的处理</title>
    <url>/2017/07/15/%E4%BD%BF%E7%94%A8Mybatis%E6%97%B6%E5%AF%B9%E4%BA%8EOracle%E4%B8%ADboolean%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="DB为Oracle时，参数中存在boolean类型"><a href="#DB为Oracle时，参数中存在boolean类型" class="headerlink" title="DB为Oracle时，参数中存在boolean类型"></a>DB为Oracle时，参数中存在boolean类型</h1><p>&emsp;&emsp;Oracle不支持boolean类型，针对此类型，Oracle的驱动包中做了转换处理，将true转换为 <em><strong>数字</strong></em>  1，false转换为 <em><strong>数字</strong></em>  0。</p>
<p>&emsp;&emsp;Mybatis解析sqlmapper文件时，调用TypeHandler类中的方法对类型进行处理，针对boolean类型的实现类为BooleanTypeHandler，如下，此类包含在ojdbc包中。其中setNonNullParameter方法为传参时，对入参的处理。</p>
<img data-src="/2017/07/15/%E4%BD%BF%E7%94%A8Mybatis%E6%97%B6%E5%AF%B9%E4%BA%8EOracle%E4%B8%ADboolean%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%A4%84%E7%90%86/BooleanTypeHandler.png" class="" title="BooleanTypeHandler类">

<p>&emsp;&emsp;setBoolean的具体实现。我们可以看到，boolean类型最后转换为Int类型。</p>
<img data-src="/2017/07/15/%E4%BD%BF%E7%94%A8Mybatis%E6%97%B6%E5%AF%B9%E4%BA%8EOracle%E4%B8%ADboolean%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%A4%84%E7%90%86/setBooleanInternal.png" class="" title="setBoolean方法的实现">

<p>&emsp;&emsp;因此，在做insert、update操作时，用decode进行处理，即可将true/false转换成自己想要的值。我通常用Y/N表示状态。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">decode(#&#123;enabled&#125;, <span class="number">1</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;N&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h1 id="DB为Oracle时，将查询结果转换为boolean类型"><a href="#DB为Oracle时，将查询结果转换为boolean类型" class="headerlink" title="DB为Oracle时，将查询结果转换为boolean类型"></a>DB为Oracle时，将查询结果转换为boolean类型</h1><p>&emsp;&emsp;同样，由TypeHandler作为入口，查看Mybatis的处理方式。针对不同情况，有三种处理方法，根据入参大体可以猜到每个方法的作用，此处不做展开。挑选一个方法深入，最终找到getBoolean的实现。</p>
<img data-src="/2017/07/15/%E4%BD%BF%E7%94%A8Mybatis%E6%97%B6%E5%AF%B9%E4%BA%8EOracle%E4%B8%ADboolean%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%A4%84%E7%90%86/TypeHandler.png" class="" title="TypeHandler类">

<p>&emsp;&emsp;下图中getBoolean方法属于ResultSet类，在JDK中rt.jar包中（我的环境为JDK1.8）。根据注释我们可以知道，如果值为如下类型的 0，返回结果为false；如果值为如下类型的1，返回true。</p>
<img data-src="/2017/07/15/%E4%BD%BF%E7%94%A8Mybatis%E6%97%B6%E5%AF%B9%E4%BA%8EOracle%E4%B8%ADboolean%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%A4%84%E7%90%86/getBoolean.png" class="" title="getBoolean方法的实现">

<p>&emsp;&emsp;所以当你希望将ResultSet中的某个属性转换为boolean类型时，可以使用如下方式。enabled为字段名称。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">decode(enabled, <span class="string">&#x27;Y&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;N&#x27;</span>, <span class="number">0</span>) enabled</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>DB</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>因为软连接导致mybatis无法正常启动</title>
    <url>/2021/11/16/%E5%9B%A0%E4%B8%BA%E8%BD%AF%E8%BF%9E%E6%8E%A5%E5%AF%BC%E8%87%B4mybatis%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<p>​    最近接手的一个项目，投产上线，遇到很多问题，其中一个问题比较有意思，记录一下。</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    简单说下背景，我们的应用是SpringBoot+Mybatis，通过内部CI工具部署不同环境，在dev、stg、uat环境都没问题，投产时启动报错，错误日志如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Caused by: java.lang.IllegalArgumentException: Mapped Statements collection already contains value <span class="keyword">for</span> com.yicallv1.dao.AgentSkillMapper.create. please check URL [jar:file:/<span class="built_in">export</span>/package/iim-thirdparty-prod-20211112T123635026/lib/iim-thirdparty-1.0.1.jar!/BOOT-INF/classes!/sqlmap/AgentSkillMapper.xml] and URL [jar:file:/<span class="built_in">export</span>/server/iim-thirdparty/lib/iim-thirdparty-1.0.1.jar!/BOOT-INF/classes/sqlmap/AgentSkillMapper.xml]</span><br><span class="line">	at org.apache.ibatis.session.Configuration<span class="variable">$StrictMap</span>.put(Configuration.java:1014) ~[mybatis-3.5.6.jar!/:3.5.6]</span><br><span class="line">	at org.apache.ibatis.session.Configuration<span class="variable">$StrictMap</span>.put(Configuration.java:970) ~[mybatis-3.5.6.jar!/:3.5.6]</span><br><span class="line">	at org.apache.ibatis.session.Configuration.addMappedStatement(Configuration.java:768) ~[mybatis-3.5.6.jar!/:3.5.6]</span><br><span class="line">	at org.apache.ibatis.builder.MapperBuilderAssistant.addMappedStatement(MapperBuilderAssistant.java:297) ~[mybatis-3.5.6.jar!/:3.5.6]</span><br><span class="line">	at org.apache.ibatis.builder.xml.XMLStatementBuilder.parseStatementNode(XMLStatementBuilder.java:113) ~[mybatis-3.5.6.jar!/:3.5.6]</span><br><span class="line">	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:138) ~[mybatis-3.5.6.jar!/:3.5.6]</span><br><span class="line">	at org.apache.ibatis.builder.xml.XMLMapperBuilder.buildStatementFromContext(XMLMapperBuilder.java:131) ~[mybatis-3.5.6.jar!/:3.5.6]</span><br><span class="line">	at org.apache.ibatis.builder.xml.XMLMapperBuilder.configurationElement(XMLMapperBuilder.java:121) ~[mybatis-3.5.6.jar!/:3.5.6]</span><br><span class="line">	... 94 common frames omitted</span><br></pre></td></tr></table></figure>

<h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>​    刚开始看这个问题有点懵，先后检查mapper文件名、生产jar包反编译、生产主机操作系统版本、环境等，都没有问题。后来仔细看了下报错，提示<br><code>/export/package/iim-thirdparty-prod-20211112T123635026/lib/iim-thirdparty-1.0.1.jar!/BOOT-INF/classes!/sqlmap/AgentSkillMapper.xml</code></p>
<p>与</p>
<p><code>/export/server/iim-thirdparty/lib/iim-thirdparty-1.0.1.jar!/BOOT-INF/classes/sqlmap/AgentSkillMapper.xml</code></p>
<p>文件重名。跟运维沟通，发现生产环境与其他环境不一致，会对jar包所在目录简历一个软连接。包实际路径为上面的路径，软连接路径为下面的路径，为了统一生产启动脚本，脚本中启动jar包的命令，都是使用软连接路径。</p>
<p>​    到这里，可以分析出来，mybatis在服务启动扫描mapper文件时，应该是将真实路径、软连接路径都扫了一遍，所以所有的mapper文件才会提示有重名。</p>
<p>​    再进一步分析代码，加载mapper文件的配置，代码如下：</p>
<p><code>bean.setMapperLocations(resolver.getResources(&quot;classpath*:**/sqlmap/*.xml&quot;));</code></p>
<p>问题应该出在<code>classpath*</code>上，mybatis会遍历所有的classpath，其中包括了真实路径、软连接路径。至此，找到原因，并最终修改为如下：</p>
<p><code>bean.setMapperLocations(resolver.getResources(&quot;classpath:sqlmap/*.xml&quot;));</code></p>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>外地驾照更换上海驾照</title>
    <url>/2017/06/05/%E5%A4%96%E5%9C%B0%E9%A9%BE%E7%85%A7%E6%9B%B4%E6%8D%A2%E4%B8%8A%E6%B5%B7%E9%A9%BE%E7%85%A7/</url>
    <content><![CDATA[<p>&emsp;&emsp;驾照近期内过期，网上查了下，外地户口也可以在上海换驾照，省去回家的舟车劳顿。挺好。</p>
<h3 id="Round-1"><a href="#Round-1" class="headerlink" title="Round 1"></a>Round 1</h3><p>&emsp;&emsp;因为住在浦东，查到杨高中1500号周六也上班。趁某周六朋友聚会，散场后赶紧坐公交过去，好在不远。站在杨高中路1500前，反复在地图上确认，是否来对地方了。面前是一片废墟。心中一群斯巴达草泥马在咆哮。但是我不能表现出来。</p>
<p>&emsp;&emsp;不能接受现实的大脑拒绝工作了10秒。重新聚焦的眼睛发现了残留的一面墙（我记得当时有拍，却找不到了），墙上是蓝底告示，还贴了警徽那种，特正式。上面写了上海所有车管所地址。杨高中路1500那一栏，被黑色签字笔划掉，一个箭头指向若干字，不羁、狂野、洒脱，依稀辨认出来，“康桥路1600号”。</p>
<p>KO.</p>
<h3 id="Round-2"><a href="#Round-2" class="headerlink" title="Round 2"></a>Round 2</h3><p>&emsp;&emsp;日常任务还是要做。第二次，心想进城，城里的车管所肯定靠谱。来到了南京西路1550号。这次楼不仅在，而且还有人😯。不禁为自己的智商点赞。瞧见别人进去都在门口登记，我也上去刷刷刷一通写。还没写完，里屋的50岁左右的大哥（现在这个年龄段比较尴尬，遇见人不知道该喊大哥，还是大爷。就大哥吧），“干啥干啥，你写啥，你来报案啊？”，“不是，我来换驾照。”，“早搬了，你去天目中路600号”。</p>
<p>&emsp;&emsp;喔。</p>
<p>&emsp;&emsp;好在有摩拜。30分钟后，我到门口了。这次我机灵了，先问了门口20来岁的大兄弟，“你好，这里能换驾照不？”，“去天目中路576号”。</p>
<p>&emsp;&emsp;喔。</p>
<p>&emsp;&emsp;好在这次不远，绕到前面拐个弯就是。确认了这里确实能换驾照后，取号，找了个位置坐下，吁了口气。舒坦，终于找对组织了。<br>换驾照需要带上1寸照片、体检证明。没有体检证明，车管所也有体检服务，就是平常的身高、体重、视力等，可以吃早饭。我没有体检证明，等的时候问了下工作人员，上午11：30结束，下午1：30开始。由于几番折腾，我到时正好11：32。没办法，等呗，到下午体检完后再办。有了上午的经历，我没马上走。待会叫号到我时，问清楚体检、办理的流程，省的再出纰漏。到我了。身份证、驾照递过去。相对无言。噼里啪啦一通操作，说，“你是外地驾照？”，“昂”，“外地驾照更换得去哈密路1330号”。</p>
<p>&emsp;&emsp;噗……</p>
<p>&emsp;&emsp;马不停蹄、牛不停犁的，时间刻度往后拨70分钟，场景转换到哈密路1330号。门口很多疑似黄牛的人，没搭理，直接进去。好在这次确实找对组织了。下面是大家关心的流程：</p>
<ol>
<li>先到10号楼拍照，25元；</li>
<li>然后到9号楼体检，60元（进门左边窗口领照片，表格，填表，共两张，缴费，照片千万不要弄丢了）；</li>
<li>出门左转，约20米，有牌子标识，上二楼体检；</li>
<li>体检完，工作人员会收一张，把另一张盖章后给你。然后到1号楼办理；</li>
<li>到1号楼后，先到二楼复印身份证，1元（有复印件不用去了）；</li>
<li>复印好后到一楼前台，他们会帮忙贴照片、取号（号是两张连着的，注意不要弄丢）；</li>
<li>等着叫号，办理（共有两个显示屏，1号显示器显示办理，2号显示器显示是取证）；</li>
<li>办理完后再到二楼缴费，10元。缴费后再到一楼，看2号显示器，等取证（缴费后才开始制作）；</li>
<li>OK，可以回家了。</li>
</ol>
<p>&emsp;&emsp;PS: 之前网上查到必须带居住证，实际没有用到。当时着急，还有别的事，陀螺似的办完也没细问。</p>
<h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>&emsp;&emsp;时逢信息时代，身处大上海，办理的事情也是普罗大众都会遇到的事情。实际却一波三折。最开始打过电话咨询，工作人员说可以办，详情到官网上看，然后匆匆挂断。百度‘更换上海驾照’，搜索出来的信息基本没用，很多都是广告。有一个网站叫‘上海驾照服务网’，服务费竟然350元。我实际办理，总共花费不到100元。有网友说是黄牛网站，不知真假。另外搜索出来的很多帖子都写着‘上海驾照换证地点一览’。我就是看了这些信息，深受其害。这些信息不知是多久以前的，却被一转再转。大家如果要查询信息，最好到<a href="https://sh.122.gov.cn/">上海交通安全综合服务管理平台</a>查询。在服务导航菜单里，可以选择业务，地图上显示可以办理的地址。针对外地驾照换上海驾照这种业务，却没有说明。也可能我没找到。</p>
<h3 id="诗、和远方"><a href="#诗、和远方" class="headerlink" title="诗、和远方"></a>诗、和远方</h3><p><strong>假如生活欺骗了你</strong></p>
<p>   <em>假如生活欺骗了你</em><br>​<br>   <em>不要悲伤，不要心急</em></p>
<p>   <em>忧郁的日子里需要镇静</em></p>
<p>   <em>相信吧，快乐的日子将会来临</em></p>
<p>   <em>心儿永远向往着未来</em></p>
<p>   <em>现在却常是忧郁</em></p>
<p>   <em>一切都是瞬息</em></p>
<p>   <em>一切都将会过去</em></p>
<p>   <em>而那过去了的</em></p>
<p>   <em>就会成为亲切的怀恋</em></p>
<p>   🙂</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>工欲善其事，必先利其器</title>
    <url>/2018/01/20/%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%EF%BC%8C%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8/</url>
    <content><![CDATA[<h1 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h1><table>
<thead>
<tr>
<th>软件</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>Typora</td>
<td>md编辑利器，MacWeb也不错</td>
</tr>
<tr>
<td>番茄土豆(Pomotodo)</td>
<td>番茄钟+todoList，全平台支持</td>
</tr>
<tr>
<td>CheatSheet</td>
<td>所有软件快捷键，一查便知</td>
</tr>
<tr>
<td>IINA</td>
<td>视频播放器</td>
</tr>
<tr>
<td>ShadowsocksX</td>
<td>科学上网软件，需配置ss服务器</td>
</tr>
<tr>
<td>CleanMyMac</td>
<td>相当于电脑管家</td>
</tr>
<tr>
<td>VSSH、 SecureCRT for mac、 ssh tunnel mac、 SSH Shell for Mac</td>
<td>ssh客户端</td>
</tr>
<tr>
<td>XMind ZEN</td>
<td>思维导图</td>
</tr>
<tr>
<td>PDF Expert</td>
<td>PDF工具</td>
</tr>
<tr>
<td>HazeOver</td>
<td>专注办公软件。简而言之可以让你专注在激活窗口</td>
</tr>
<tr>
<td>Fliqlo</td>
<td>数字时钟屏保</td>
</tr>
<tr>
<td>截图</td>
<td>如其名，其实自带的快捷键也很好用，不过不能编辑</td>
</tr>
<tr>
<td>Franz</td>
<td>多通讯工具整合软件，支持WeChat、twitter、telegram、github、steam、facebook等。均为网页版登录。</td>
</tr>
<tr>
<td>Alfred2</td>
<td>快捷访问</td>
</tr>
<tr>
<td>Airmail</td>
<td>邮件客户端</td>
</tr>
</tbody></table>
<h1 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h1><table>
<thead>
<tr>
<th>App</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>AppSo</td>
<td>App推荐平台，而且经常会有iOS限免通知</td>
</tr>
<tr>
<td>XMind</td>
<td>思维导图软件</td>
</tr>
<tr>
<td>SsrConnectPro</td>
<td>科学上网软件，需配置ss服务器。之前用openwingy，可惜中国区下架了</td>
</tr>
<tr>
<td>Seed</td>
<td>英文资讯App，可以一键翻译中文</td>
</tr>
<tr>
<td>Podcasts</td>
<td>iOS自带</td>
</tr>
<tr>
<td>Lingvist</td>
<td>英语单词学习软件</td>
</tr>
<tr>
<td>Seed</td>
<td>英文资讯软件，一键中英文对照</td>
</tr>
<tr>
<td>行程助手</td>
<td>旅游行程软件，可以帮助生成行程单，而且可以加好友共享</td>
</tr>
</tbody></table>
<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><table>
<thead>
<tr>
<th>App</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>影梭(shadowsocks)</td>
<td>科学上网软件，需配置ss服务器</td>
</tr>
<tr>
<td>AirDroid（多平台）</td>
<td>跨平台文件传输工具</td>
</tr>
<tr>
<td>滴答清单</td>
<td>todo-list类App</td>
</tr>
</tbody></table>
<h1 id="Win"><a href="#Win" class="headerlink" title="Win"></a>Win</h1><table>
<thead>
<tr>
<th>App</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>everything</td>
<td>本地文件搜索软件，自带搜索秒成渣</td>
</tr>
<tr>
<td>Clover</td>
<td>文件窗口合并，还可以添加书签</td>
</tr>
</tbody></table>
<h1 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h1><table>
<thead>
<tr>
<th>App</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>Secure Shell</td>
<td>SSH插件</td>
</tr>
<tr>
<td>Vimium</td>
<td>通过vim方式控制浏览器</td>
</tr>
<tr>
<td>剪藏</td>
<td>使用印象笔记的都有吧</td>
</tr>
<tr>
<td>油猴</td>
<td>js脚本管理器，很多脚本</td>
</tr>
</tbody></table>
<h1 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h1><table>
<thead>
<tr>
<th>App</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>36氪</td>
<td>互联网资讯</td>
</tr>
<tr>
<td>差评</td>
<td>比较杂，什么专题都有</td>
</tr>
<tr>
<td>鼠绘漫画网</td>
<td>漫画</td>
</tr>
<tr>
<td>混子曰</td>
<td>漫画看历史、聊车。不过现在好久才推一篇文章</td>
</tr>
<tr>
<td>旅行雷达</td>
<td>旅行类</td>
</tr>
<tr>
<td>少数派</td>
<td>会推一些App、以及使用文章</td>
</tr>
<tr>
<td>AI前线</td>
<td>AI类文章</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>床了个垫</title>
    <url>/2020/11/12/%E5%BA%8A%E4%BA%86%E4%B8%AA%E5%9E%AB/</url>
    <content><![CDATA[<p>​    年轻不知腰金贵，老来只能默流泪。</p>
<p>​    最近体检有点腰突，然后就想换个床垫。之前一直睡得棕垫，老爸不知在什么地方买的，几百块钱，硬的跟平板似的。一度怀疑腰突就是睡它睡得。而且上海梅雨季节比较潮，劣质的棕垫会发霉，好巧不巧我今年前阵子突然感觉有点鼻炎，当时找了好久原因都没找到，现在想来估计也是因为这个床垫。</p>
<p>​    有人可能会问，腰突不就是应该睡硬床垫吗？这里面其实一直有个误解，硬是有一个前提的，是贴合人体曲线的“硬”。人体的腰部是反S曲线，如果睡在硬板床上，腰部是悬空的，反而会使腰突加剧。软也不行，太软了腰部托不住，睡眠时腰部还是无法放松。</p>
<p>​    现在的人多多少少都会有点腰椎、颈椎、腰肌的问题，所以选个好床垫也是很有必要的。这段时间陆陆续续也翻了很多资料，做个笔记留个脚印。</p>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="乳胶床垫"><a href="#乳胶床垫" class="headerlink" title="乳胶床垫"></a>乳胶床垫</h2><p>​    这里说的是全软胶床垫，一般弹簧床垫填充层也会放一层乳胶炒个概念，不过扔然划分在弹簧床垫里。乳胶的优缺点都很明显，优点是透气性好、贴合性高，缺点是支撑性较差，而且随着时间变成会氧化成黄色。做工差的乳胶最终还会氧化成粉末。</p>
<p>​    需要说明的一点，但凡是做成床垫的乳胶，其实都是工业乳胶。真正天然的乳胶是液态的，🇹🇭的橡胶树再牛逼，也不可能长出来一张床垫子。区别在于乳胶发泡方式、乳胶含量。乳胶床垫水也是挺深的，很多都在炒泰国的概念。其实很多都是国内厂造的，外面走了一圈，出口转内销，身价骤升。就算真的是🇹🇭产的，也未必好多少，他们那边是原材料好，但是工艺差。</p>
<p>​    专业做乳胶床垫的首推邓禄普，不过我没去睡过。斯林百兰的卖点也是软胶，他们家的弹簧床垫乳胶层都很厚，最厚的有10公分。睡感偏软，女孩子可能会喜欢。</p>
<h2 id="棕垫"><a href="#棕垫" class="headerlink" title="棕垫"></a>棕垫</h2><p>​    分山棕和椰棕，也是国内比较容易炒的一个概念，深受中老年群体喜爱，销售基本都会说老年人适合睡硬的床垫。实际上睡感跟硬板差不多，腰部没有支撑，贴合性也差，真的是不建议中老年人睡。另外南方梅雨季节容易潮湿，也不推荐睡棕垫。</p>
<p>​    棕垫我基本没体验，穗宝家貌似挺多的。</p>
<h2 id="记忆棉床垫"><a href="#记忆棉床垫" class="headerlink" title="记忆棉床垫"></a>记忆棉床垫</h2><p>​    记忆棉的贴合性也很好，做的好的支撑性也高，不过透气性差，睡感偏热。</p>
<p>​    这个也没试睡过，听说泰普尔的很好，20多公分全是记忆棉，有睡在云端的感觉。不过一个垫子也在2w左右了，价格也是不低。</p>
<h2 id="弹簧床垫"><a href="#弹簧床垫" class="headerlink" title="弹簧床垫"></a>弹簧床垫</h2><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>​    终于到了最复杂、最常见的弹簧床垫了。弹簧床垫总共3部分组成，弹簧、填充、面料。</p>
<p>​    弹簧是整个床垫的核心，支撑性如何、有没有异响、可以承受多少次的压缩等，都对弹簧床垫的寿命有影响。弹簧也是五花八门，根据材料、形状、高度、丝径粗细、排列方式、黏合方式等不同又可以有各种高大上的名称。</p>
<p>​    填充层决定的是床垫软不软，这层一般会有好几层，XX棉啊、XX乳胶啊、XX3D材料啊、XX棕啊，感觉什么材料都可以往放，然后可以蹭个概念。有些厂家可能放了1公分都不到的乳胶，就开始宣传是乳胶床垫。</p>
<p>​    面料层相对来说简单一点，一般主打防螨、银离子杀菌、亲肤之类。</p>
<p>​    我个人觉得选购弹簧床垫不用太把销售说的当回事。比如某家床垫填充层就炒了个概念火山棉、冰雪棉，还印在宣传页上。实际睡的时候是否能够隔着床单、面料感受到这些许差异，真的要打个问号。</p>
<p>​    另外呢，很多人以为弹簧床垫就叫席梦思，其实不是的。独立袋装弹簧的生产机器最早是席梦思研发出来的，然后其他床垫纷纷使用，为了营销也都说自己是席梦思。</p>
<h3 id="弹簧类型"><a href="#弹簧类型" class="headerlink" title="弹簧类型"></a>弹簧类型</h3><p>​    弹簧类型五花八门，总体上来说分3类，独立袋、美姿弹簧、妙而扣。这么分主要是根据弹簧结构分的，其他的种类基本上都是以这3种为基础延伸出来的，然后起个新奇的名字，就开始宣传了。</p>
<h4 id="独立袋"><a href="#独立袋" class="headerlink" title="独立袋"></a>独立袋</h4><p>​    最常见的弹簧种类，结构很简单，将筒状的弹簧装在纺织袋中，每个都是独立的个体，然后将筒子组装排列起来。根据弹簧大小不同，同样尺寸的床垫中筒子个数也不同。一般来说一张1.8*2m的床垫差不多800个弹簧左右。</p>
<p>​    独立袋最大的特点呢就是抗干扰性好，这也很好理解，筒子之间是相互独立的嘛。以前看到过一个床垫测评的视频，在一角放了一个🍷，然后有个人从旁边跳到床垫上空保持盘腿的姿势落到床垫上，酒杯里的红酒连个涟漪都没有。当时看了还觉得好神奇，哈哈哈。</p>
<p>​    另外环保方面可能差一点，因为筒子之间的纺织袋也要固定，有些厂家会用胶。了解一点家装知识的朋友都知道，胶里面基本都会有甲醛的，这个一定要注意一下。也有些厂家采用其他方式固定，比如缝起来，这种呢费时费力，比较少。</p>
<p>​    使用寿命方面基本都是10年质保，这个什么说的。</p>
<p>​    使用的材质基本上高锰钢、高猛碳钢，具体差别如何没做过深究，我觉得应该差别不大。</p>
<p>​    另外需要注意的一点是，弹簧的丝径和重量。有些厂商呢光吹嘘自己床垫的的数量最多，有可能在弹簧上缩水，丝径太细支撑性就差很多，而且也容易断。</p>
<h4 id="美姿弹簧"><a href="#美姿弹簧" class="headerlink" title="美姿弹簧"></a>美姿弹簧</h4><p>​    丝涟的看家本领，也叫LFK开口弹簧，结构是相邻的弹簧之间被一组横着的弹簧捆绑在了一起，当有重压的时候弹簧向下压缩，同时最上面开口也会被拉大。如果脑补不出来呢可以上网搜一下动图。</p>
<p>​    美姿最大的特点是贴合性好，会随着重物的曲线变化。这点呢我觉得更适合腰不好的同学。</p>
<p>​    环保方面比独立袋好，因为弹簧之间是用钢丝连起来的，而不是胶。</p>
<p>​    寿命基本也是10年质保。</p>
<p>​    材质也差不多。弹簧嘛，最终的形状可能不同，原材料都是一样大的。</p>
<h4 id="妙而扣"><a href="#妙而扣" class="headerlink" title="妙而扣"></a>妙而扣</h4><p>​    舒达的招牌，基本上只有他家有。它的结构稍微复杂一点。糖画大家都见过吧，把糖加热成液体，然后在板上画出各种形状。手艺人作画时基本上都是从头到尾一气呵成。妙而扣也是一样，从头到尾一个钢丝贯穿到底。</p>
<p>​    妙而扣最大的特点就是承重性好，随便你怎么压怎么造。舒达店里的销售当时跟我们说，之前公司专门找了辆大卡车从妙而扣上压过去，碾过去后啥事儿没有😂，想想也是牛逼。</p>
<p>​    环保方面跟美姿差不多，都是钢丝串联的。</p>
<p>​    寿命就厉害了，别家都是10年质保，舒达不一样，25年。由此也能看出来这种结构确实耐造。</p>
<p>​    材质不说了，大差不差。</p>
<p>​    妙而扣更适合几百斤的大胖子。美国人胖子多嘛，所以专门研发出来了这种结构。</p>
<h1 id="品牌"><a href="#品牌" class="headerlink" title="品牌"></a>品牌</h1><h2 id="国外"><a href="#国外" class="headerlink" title="国外"></a>国外</h2><h3 id="丝涟"><a href="#丝涟" class="headerlink" title="丝涟"></a>丝涟</h3><p>​    上面也说了，主打是美姿感应弹簧。作为3S中的一员，价格也是不低的。上海红星美凯龙基本都9k以上。这家床垫我体验的少，当时不怎么了解丝涟，就在中途逛累了的时候，跑人家店里休息去了😂，别说躺了20min还挺舒服的。</p>
<h3 id="舒达"><a href="#舒达" class="headerlink" title="舒达"></a>舒达</h3><p>​    3S之一。主打妙而扣，不过也有独立袋装弹簧的产品。因为舒达把席梦思收购了，所以现在这2S是同一家的2个产品品牌…</p>
<p>​    他们家我试了亚特兰大、天籁、星辰。其中星辰是独立袋，另外两款是妙而扣。亚特兰大睡感最软，价格1w2出头；其次天籁硬一点，价格8.6k；最硬是星辰，价格7.6k。</p>
<p>​    这里有个小插曲，本来我跟女朋友试睡下来好不容易达成共识（她喜欢软的，我喜欢硬的），下单订了天籁。结果回去一查，沈阳的红星才6k多，立马心里不平衡了，然后给退了…</p>
<h3 id="席梦思"><a href="#席梦思" class="headerlink" title="席梦思"></a>席梦思</h3><p>​    3S之一。主打独立袋，他们家的独立袋装弹簧应该是所有同类产品中最好的吧，好多其他品牌也在用他们加的弹簧。产品线也很丰富，各种床垫由软到硬都有。</p>
<p>​    他们家我体验了银禧、瑞豪。银禧睡感软一点，7k出头；瑞豪睡感偏硬，8k出头。</p>
<h3 id="金可儿"><a href="#金可儿" class="headerlink" title="金可儿"></a>金可儿</h3><p>​    近几年金可儿也很出名，基本与3S齐名了。我跟女朋友想换床垫的想法，也源于在海南玩睡了威斯汀的天梦之床之后种了草。而天梦就是出自金可儿之手。不过天梦是酒店专供款，一般家用买不到。本来到红星也想试试繁星A来着，结果线下没有。</p>
<p>​    在他们家只试了一张，专家之选，2w+…嗯…也挺好的就是有点贵…</p>
<h3 id="斯林百兰"><a href="#斯林百兰" class="headerlink" title="斯林百兰"></a>斯林百兰</h3><p>​    英国牌子，主打是独立袋+天然乳胶。红星的销售告诉我们，他们家的软胶都是物理发泡、乳胶含量77%以上。然后还说透气性比海绵好巴拉巴拉，我纠正她说海绵透气性要比乳胶好的，她还不信…</p>
<p>​    他们家试了温度智慧1200、护脊智慧2060、海洋奇缘（也不知道到底哪里智慧了…）。睡感都偏软，好像是海洋奇缘，乳胶层有10公分。不过我不喜欢太软的，就撤了。</p>
<h3 id="泰普尔"><a href="#泰普尔" class="headerlink" title="泰普尔"></a>泰普尔</h3><p>​    好像也是英国牌子吧，专门做海绵床垫的。这家我没试睡过。当时也不太了解海绵床垫，总觉得睡上去就跟塌下去一样，所以看到门店就绕过去了。不过后来查了些资料，发现有些腰部有问题的人也在推荐这个床垫，睦风、微风系列，有睡在云上的感觉，腰部也有支撑。咱没试过也不知道到是真是假。</p>
<h2 id="国内"><a href="#国内" class="headerlink" title="国内"></a>国内</h2><h3 id="喜临门"><a href="#喜临门" class="headerlink" title="喜临门"></a>喜临门</h3><p>​    国内知名品牌，名字好听，而且广告力度也很大。去他们店里逛了逛，人确实挺多。试了优眠6926、静眠S26、蜜月季钻石。后两款睡感跟席梦思的瑞豪差不多，结果价格比席梦思还贵…真不知道为啥…</p>
<p>​    另外喜临门的销售你能感觉到他们的不专业。首先是对自己家产品就不了解，其次是对床垫也不怎么了解。问个问题支支吾吾的。而且服务意识很不好，我们在店里呆了也就10来分钟，前后换了3个销售…总之给我的印象极差，东西又贵又不专业的印象。</p>
<h3 id="慕斯"><a href="#慕斯" class="headerlink" title="慕斯"></a>慕斯</h3><p>​    也是国内知名品牌，广告也不少。相信很多人都看到过一个外国老头带着眼镜的宣传海报。他们家我就试了一款，233B，16k，3d材料的，也还行。不过试玩没什么特别的印象。另外不知道为什么，网上好多人都在喷慕斯，可能是因为水军请的太多了吧。</p>
<h3 id="爱舒"><a href="#爱舒" class="headerlink" title="爱舒"></a>爱舒</h3><p>​    上海老牌子，价格相对亲民一点。哪怕在上海，5k也能买到他们家比较好的床垫了。试睡了舒心E、爱之韵m。舒心E偏硬，2.8k；爱之韵m软一点，4.5k。个人感觉性价比较高。</p>
<h3 id="龙凤"><a href="#龙凤" class="headerlink" title="龙凤"></a>龙凤</h3><p>​    也是国内品牌。他们家试了几个床垫都很软，最后试了至欣还不错，刚躺上去软软的，时间久了也能感受到支撑，好像是他们家至尊系列中的一款。7.5k左右。</p>
<h1 id="购买渠道"><a href="#购买渠道" class="headerlink" title="购买渠道"></a>购买渠道</h1><p>​    无非线上、线下两种。不过现在厂家都学聪明了，线上、线下2个产品线，相互隔离。也就是线上官方绝对买不到线下的款式，线下也不会摆线上的款。一般来讲，线下都会比线上贵。线上大多在6k左右。线下6k可能是最基础款。不过没办法，人家赚的就是你线下体验的钱。</p>
<p>​    不过近来倒是有些厂家，比如红星，也会开网店，所以能看到一些线下的款在卖。而且这种一般只买本市，不会跨市出售的。像我跟女朋友，看到沈阳的红星有卖天籁，但是也没法子买。不过如果你有朋友正好在那边，可以帮忙买一张，然后发物流。现在物流也便宜。</p>
<p>​    另外淘宝上也有一些代购，比官方价格会便宜个1-2k，基本都是剪标的。为什么剪标呢，因为标签上会有指定出售的城市（相同产品在不同城市官方售价不同，恶心吧），如果跨城市出售官方会追究责任的，所以代理商一般也不会跨城市出售。当然也有积压了很多库存，实在没办法想回笼资金的，也会出售到异地，这种情况就得剪标。</p>
<h2 id="线下"><a href="#线下" class="headerlink" title="线下"></a>线下</h2><h1 id="大V推荐"><a href="#大V推荐" class="headerlink" title="大V推荐"></a>大V推荐</h1><h2 id="腿毛"><a href="#腿毛" class="headerlink" title="腿毛"></a>腿毛</h2><p>​    人是四川的，也是床垫行业的，也有自己的淘宝店。拆了很多床垫，比较专业。主要活跃在知乎。</p>
<h2 id="家居破坏王"><a href="#家居破坏王" class="headerlink" title="家居破坏王"></a>家居破坏王</h2><p>​    非床垫行业的素人，也是专门拆床垫的，相对来说专业性没那么强。不过也提供了普通人的视角。知乎、B站上都有。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>​    买床垫呢一定不能偷懒，毕竟不是经常换的物件，所以能到线下体验的一定要到线下体验。睡感这个东西，网上看再多攻略、视频也是体验不出来的。</p>
<p>​    另外试睡呢不要用屁股试。好多人都是往那一坐，试试软不软就买了。一定要多躺会，躺个10来分钟，感觉腰部有没有支持。然后侧身睡感受肩膀会不会有挤压。</p>
<p>​    最后呢不要怕花钱，床垫这个东西是真的对你的身体健康有影响的。花个几千块，买个每晚的舒适睡眠，以及将来健康的躯干，还是值得的。不过也不能盲目花钱。1w以内的床垫能满足大部分人的需求，2w以上都有点玄学的成分。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>床垫</tag>
      </tags>
  </entry>
  <entry>
    <title>技能图谱-Apollo自动驾驶</title>
    <url>/2018/03/17/%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1-Apollo%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/</url>
    <content><![CDATA[<p>​    今年参加AICon大会时，参与活动获得了一些知识图谱手册，在这里分享给大家</p>
<img data-src="/2018/03/17/%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1-Apollo%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6/Apollo%E8%87%AA%E5%8A%A8%E9%A9%BE%E9%A9%B6%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1.png" class="">
]]></content>
      <categories>
        <category>技能图谱</category>
      </categories>
      <tags>
        <tag>Apollo</tag>
        <tag>技能图谱</tag>
      </tags>
  </entry>
  <entry>
    <title>技术栈</title>
    <url>/2017/08/13/%E6%8A%80%E6%9C%AF%E6%A0%88/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">语言</th>
<th align="center">领域</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Solr</td>
<td align="center">lucene</td>
<td align="center">搜索引擎</td>
<td align="center">支持多种格式</td>
</tr>
<tr>
<td align="center">ElasticSearch</td>
<td align="center">lucene</td>
<td align="center"></td>
<td align="center">实时性好；只支持json；分布式易扩展<br /><a href="https://www.cnblogs.com/wenbronk/p/6432990.html">https://www.cnblogs.com/wenbronk/p/6432990.html</a><br /><a href="https://www.jianshu.com/p/8bb84384566a">https://www.jianshu.com/p/8bb84384566a</a></td>
</tr>
<tr>
<td align="center">Freemarker</td>
<td align="center"></td>
<td align="center">模板</td>
<td align="center">模板引擎，java端生成模板</td>
</tr>
<tr>
<td align="center">Shiro</td>
<td align="center">java</td>
<td align="center">安全框架</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Rhino.js</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">基于Java的javascript实现。可以再java中调js，也可以在js中调用java</td>
</tr>
<tr>
<td align="center">growingio</td>
<td align="center"></td>
<td align="center">无埋点</td>
<td align="center">用户行为埋点</td>
</tr>
<tr>
<td align="center">mybatis-plus</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">简化mybatis语句模板</td>
</tr>
<tr>
<td align="center">Echarts、AntV（G2）</td>
<td align="center">js</td>
<td align="center">图表</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">walle</td>
<td align="center"></td>
<td align="center">部署</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">Android-Things</td>
<td align="center"></td>
<td align="center">IoT</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">TensorFlow</td>
<td align="center"></td>
<td align="center">DL</td>
<td align="center">Google家的</td>
</tr>
<tr>
<td align="center">PaddlePaddle</td>
<td align="center"></td>
<td align="center">DL</td>
<td align="center">Baidu家的</td>
</tr>
<tr>
<td align="center">Docsify、Docute、Showdoc、MinDoc、apidoc</td>
<td align="center"></td>
<td align="center">API文档</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">WebAssembly</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">js中运行C<br /><a href="https://blog.csdn.net/garfielder007/article/details/68215694">https://blog.csdn.net/garfielder007/article/details/68215694</a></td>
</tr>
<tr>
<td align="center">Web3.js</td>
<td align="center">js</td>
<td align="center">以太坊Dapp</td>
<td align="center"><a href="http://web3.tryblockchain.org/">http://web3.tryblockchain.org/</a></td>
</tr>
<tr>
<td align="center">Solidity</td>
<td align="center"></td>
<td align="center">区块链</td>
<td align="center"><a href="http://me.tryblockchain.org/getting-up-to-speed-on-ethereum.html">http://me.tryblockchain.org/getting-up-to-speed-on-ethereum.html</a></td>
</tr>
<tr>
<td align="center">Redisson</td>
<td align="center"></td>
<td align="center">redis</td>
<td align="center"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>技术栈</category>
      </categories>
      <tags>
        <tag>技术栈</tag>
      </tags>
  </entry>
  <entry>
    <title>技能图谱-前端</title>
    <url>/2018/03/17/%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1-%E5%89%8D%E7%AB%AF/</url>
    <content><![CDATA[<p>​    今年参加AICon大会时，参与活动获得了一些知识图谱手册，在这里分享给大家</p>
<img data-src="/2018/03/17/%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1-%E5%89%8D%E7%AB%AF/%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1-%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88.png" class="">
]]></content>
      <categories>
        <category>技能图谱</category>
      </categories>
      <tags>
        <tag>技能图谱</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>技能图谱-后端</title>
    <url>/2018/05/29/%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1-%E5%90%8E%E7%AB%AF/</url>
    <content><![CDATA[<p><img data-src="../%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1-%E5%90%8E%E7%AB%AF%E6%9E%B6%E6%9E%84/back.png"></p>
]]></content>
      <categories>
        <category>技能图谱</category>
      </categories>
      <tags>
        <tag>技能图谱</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>技能图谱-大数据</title>
    <url>/2018/03/17/%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1-%E5%A4%A7%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>​    今年参加AICon大会时，参与活动获得了一些知识图谱手册，在这里分享给大家</p>
<img data-src="/2018/03/17/%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1-%E5%A4%A7%E6%95%B0%E6%8D%AE/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1.png" class="">
]]></content>
      <categories>
        <category>技能图谱</category>
      </categories>
      <tags>
        <tag>技能图谱</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建shadowsocks服务</title>
    <url>/2018/05/06/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAshadowsocks%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="安装shadowsocks服务"><a href="#安装shadowsocks服务" class="headerlink" title="安装shadowsocks服务"></a>安装shadowsocks服务</h2><h3 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install python-pip</span><br><span class="line">sudo pip install shadowsocks</span><br><span class="line">sudo pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -s</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install python-pip</span><br><span class="line">pip install shadowsocks</span><br><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /etc/shadowsocks</span><br><span class="line">vim /etc/shadowsocks/ss.json</span><br><span class="line"></span><br><span class="line">//拷贝，别忘了改密码</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;server&quot;</span>:<span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;server_port&quot;</span>:443,</span><br><span class="line">    <span class="string">&quot;local_address&quot;</span>:<span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;local_port&quot;</span>:1080,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>:<span class="string">&quot;XXXXXXX&quot;</span>,</span><br><span class="line">    <span class="string">&quot;timeout&quot;</span>:300,</span><br><span class="line">    <span class="string">&quot;method&quot;</span>:<span class="string">&quot;aes-256-cfb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;fast_open&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;workers&quot;</span>: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>server_port中配的端口，需要服务器上对外开放</p>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/<span class="built_in">local</span>/bin/ssserver  -c /etc/shadowsocks/ss.json -d start</span><br><span class="line">sudo /usr/<span class="built_in">local</span>/bin/ssserver  -c /etc/shadowsocks/ss.json -d stop</span><br><span class="line">sudo /usr/<span class="built_in">local</span>/bin/ssserver  -c /etc/shadowsocks/ss.json -d restart</span><br><span class="line"></span><br><span class="line">//设置开机自启</span><br><span class="line">vim /etc/rc.local</span><br><span class="line">//末尾添加</span><br><span class="line">sudo /usr/<span class="built_in">local</span>/bin/ssserver  -c /etc/shadowsocks/ss.json -d start</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>shadowsocks</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>技能图谱-机器学习</title>
    <url>/2018/03/17/%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>​    今年参加AICon大会时，参与活动获得了一些知识图谱手册，在这里分享给大家</p>
<img data-src="/2018/03/17/%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.png" class="">
]]></content>
      <categories>
        <category>技能图谱</category>
      </categories>
      <tags>
        <tag>ML</tag>
        <tag>技能图谱</tag>
      </tags>
  </entry>
  <entry>
    <title>养犬有道の禁忌食物篇</title>
    <url>/2018/09/09/%E6%9F%B4%E7%8A%AC%E4%B8%8D%E8%83%BD%E5%90%83%E7%9A%84%E7%9A%84%E9%82%A3%E4%BA%9B%E5%A5%BD%E5%90%83%E7%9A%84/</url>
    <content><![CDATA[<h1 id="禁忌食物"><a href="#禁忌食物" class="headerlink" title="禁忌食物"></a>禁忌食物</h1><ol>
<li>巧克力。有些犬食用后振奋不安，且巧克力中富含许多的糖分，对犬的安康有害无宜。 </li>
<li>葱、洋葱等类食物。有些犬食入此类食物可致使细胞溶血，呈现尿血的表象。 </li>
<li>肝脏。长时间食用可形成维生素A过量乃至中毒。</li>
<li>海鲜等易过敏的食物。</li>
<li>高糖、高脂肪、高盐分的食物。高脂肪、高糖食物易使犬发胖而诱发一系列疾病；过量的盐分，必然加剧肾脏的分泌的担负，影响肾脏安康，打破体液平衡，形成各种肌肤疾病。 </li>
<li>牛奶。许多狗狗有乳糖不适应症，若是狗喝了牛奶后呈现放屁、腹泄、脱水或肌肤发炎等。</li>
<li>生鸡蛋。生蛋白富含一种卵白素的蛋白质，它会耗尽狗狗体内的维生素H，会致使肌肤病及背毛疑问。</li>
<li>肥肉。致使胰腺炎。</li>
<li>含酒精的饮料、热可可、咖啡、茶。</li>
<li>葡萄、梅子、李子、樱桃、枇杷、菠萝（生物碱和菠萝蛋白简单形成过敏，PH值过酸）、桃子、芒果、未成熟的西红柿等生的水果。</li>
<li>芹菜、香菜、甘薯、大麦、小麦、玉米（含蛋白酶按捺物）、带皮与发芽的马铃薯、油菜等蔬菜。</li>
<li>碎骨头。尤其是鸡鸭一类尖利的骨头，可能对狗狗肠胃造成损害。</li>
<li>冷藏的牛奶、冰淇淋和其它乳制品。特别是对发育未彻底的幼犬影响最大，一般几口冷牛奶就会形成幼犬腹泄，长时间如此会形成习气性腹泄，致使犬体衰弱，犬的肠胃不适应此类食物。 </li>
<li>猪肉。猪肉内的脂肪球比其它肉类大，能够堵塞狗狗的微血管。防止猪制品，尤其是含硝酸钠的火腿。</li>
</ol>
]]></content>
      <categories>
        <category>养犬有道</category>
      </categories>
      <tags>
        <tag>狗狗</tag>
      </tags>
  </entry>
  <entry>
    <title>养犬有道の准备篇</title>
    <url>/2018/09/12/%E6%9F%B4%E7%8A%AC%E5%9B%9E%E5%AE%B6%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87/</url>
    <content><![CDATA[<h1 id="住的"><a href="#住的" class="headerlink" title="住的"></a>住的</h1><p><strong>打扫卫生，消毒：</strong>家里的卫生要收拾下，消下毒。毕竟小狗抵抗力低</p>
<p><strong>围栏、笼子：</strong>根据个人需要选择。如果家里一直有人，狗子经常放在外面，可以笼子也可以围栏。如果白天上班家里没人，必须把狗狗关着，推荐围栏，活动空间大些。有朋友围栏也不固定，狗子长大后带着围栏走，就是一座移动堡垒~</p>
<p><strong>狗窝、垫子：</strong>也看情况。夏天狗子更喜欢趴地板、睡地板，买回家他也不睡，只会在上面撒尿，所以不用那么着急。天气转凉的时候可以看情况买，其实我觉得买一个就够了。另外还有一种宠物用行军床，住在一楼，家里湿气重可以买，也比较透气。</p>
<h1 id="吃的"><a href="#吃的" class="headerlink" title="吃的"></a>吃的</h1><p><strong>奶糕/幼犬粮：</strong>8个月之前尽量喂幼犬粮。</p>
<p><strong>羊奶粉：</strong>3个月之前在狗粮里加羊奶粉。</p>
<p><strong>营养品：</strong>营养膏、美毛膏、爆毛粉、钙片、卵磷脂、微量元素片等，这些都没必要买，只要是还可以的狗粮，各方面营养都是足够的。有异食癖再吃微量元素；卵磷脂完全可以自己煮鸡蛋给他吃蛋黄。幼犬肠胃不好，尽量不要吃乱七八糟的东西。</p>
<p><strong>益生菌：</strong>可以备一点，肠胃消化不好弄一些放在狗粮里。</p>
<p><strong>零食：</strong>主要用于训练用，幼犬阶段千万不要给太多零食，以免把胃口养刁了，挑食。</p>
<h1 id="用的"><a href="#用的" class="headerlink" title="用的"></a>用的</h1><p><strong>食盆、水盆：</strong> 必备。</p>
<p><strong>尿片：</strong> 在没学会外出憋尿、大小便之前，必须的。</p>
<p><strong>撸毛梳子：</strong>比较出名的有富美内特，不过梳毛效果太好，撸多了会秃的。</p>
<p><strong>驱虫：</strong>必备。</p>
<p><strong>沐浴露：</strong>家里洗澡必备。</p>
<p><strong>消毒液：</strong>必备，打扫卫生时用。</p>
<p><strong>洗耳液：</strong>有耳螨再用。建议问下宠物医生有什么信得过牌子。</p>
<p><strong>洁牙凝胶：</strong>建议换牙后再用。或者刷牙，这个方便一点。</p>
<p><strong>项圈、胸背、牵引绳：</strong>必备。</p>
<h1 id="玩的"><a href="#玩的" class="headerlink" title="玩的"></a>玩的</h1><p><strong>球：</strong>狗子都很喜欢玩球，尤其是小的。</p>
<p><strong>漏食球：</strong>星际漏食球，推荐。</p>
<p><strong>磨牙棒：</strong>鹿角，性价比超高。</p>
<p><strong>布偶：</strong>一定要耐艹。</p>
<h1 id="辅助的"><a href="#辅助的" class="headerlink" title="辅助的"></a>辅助的</h1><p><strong>监视器：</strong>不在家的时候，或者晚上，一定很好奇小家伙在干嘛。用过两款，一款海康威视c6c，一款大方。推荐大方.</p>
<p>小米大方：性价比高，配置简单，视角广，转动响应快，红外清晰，断电重启不用重新设置网络，语音可以实时通信。缺点是视频存放只能靠tf卡、u盘，没有云存储；电源线比较短，1.8米；只能连5Ghz的网络。</p>
<p>海康c6c：海康威视是摄像头行业龙头，所以也买来体验了一把，真的…无力吐槽。每次断电都要重新设置网络，转动特别慢，红外不清晰，质感差，录像功能不知道为什么晚上没有录，语音是对讲机那种，录完再发，不是实时的。本来我先买的这款，没办法，退了，才买的小米大方，发现小米果然是不错…</p>
]]></content>
      <categories>
        <category>养犬有道</category>
      </categories>
      <tags>
        <tag>狗狗</tag>
      </tags>
  </entry>
  <entry>
    <title>家有小柴の柴犬身高体重参照表</title>
    <url>/2018/08/23/%E6%9F%B4%E7%8A%AC%E5%85%BB%E6%88%90/</url>
    <content><![CDATA[<h1 id="身高体重参照表"><a href="#身高体重参照表" class="headerlink" title="身高体重参照表"></a>身高体重参照表</h1><p>每只柴犬体质都不一样，我也遇到过3个月才4斤多，狗狗健康就好，不用非得逼着他多吃。</p>
<img data-src="/2018/08/23/%E6%9F%B4%E7%8A%AC%E5%85%BB%E6%88%90/weight.jpg" class="" title="身高体重参照表">

]]></content>
      <categories>
        <category>家有小柴</category>
      </categories>
      <tags>
        <tag>柴犬</tag>
      </tags>
  </entry>
  <entry>
    <title>养犬有道の驱虫篇</title>
    <url>/2018/09/09/%E6%9F%B4%E7%8A%AC%E9%A9%B1%E8%99%AB/</url>
    <content><![CDATA[<h1 id="常用驱虫药"><a href="#常用驱虫药" class="headerlink" title="常用驱虫药"></a>常用驱虫药</h1><p>主要分为内驱和外驱，每月一次。不同品牌的驱虫药时效不同，有的一个季度一次，有的一个月一次，根据说明书使用。</p>
<p>我目前的组合是福来恩+犬心保。主要狗子经常去草地，所以可能有蜱虫，福来恩可以驱蜱虫。</p>
<p>如果不经常去草地，可以直接用大宠爱。</p>
<p>另外有朋友的组合是夏天犬心宝，冬天拜宠清，偶尔穿插吃驱球虫的。</p>
<p>不要只用一种驱虫药，因为有些覆盖不到，可以穿插使用。</p>
]]></content>
      <categories>
        <category>养犬有道</category>
      </categories>
      <tags>
        <tag>狗狗</tag>
      </tags>
  </entry>
  <entry>
    <title>家有小柴の柴犬挑选篇</title>
    <url>/2018/08/07/%E6%9F%B4%E7%8A%AC%E6%8C%91%E9%80%89/</url>
    <content><![CDATA[<p>​    大概在5月份，朋友的朋友，打算到别的城市发展，家里有一只雪纳瑞，打算送给别人领养。朋友知道我比较喜欢🐶，所以告诉了我，当时开心的睡不着，第二天请了半天假，开车过去接狗子，到小区门口被告知，有情况，不送了。当时别提多郁闷，但是也没办法┐(ﾟ～ﾟ)┌。经这事儿一撩，大学时就萌生的养狗的念头，再也憋不住，把这事提上了日程。</p>
<h1 id="关于领养"><a href="#关于领养" class="headerlink" title="关于领养"></a>关于领养</h1><p>​    写在最前面，也是鼓励大家领养代替购买，领养的渠道有很多，当地的流浪狗/流浪猫收容所，救助站等，或者自己小区，或者朋友家。我本身有一些强迫症，如果养狗就一定要从头开始，自己带，所以选择了买小狗。我朋友领养了一只被遗弃的德牧串串，长得也很可爱，现在也特别乖。狗狗只要你对他好，他一定会对你好的。少一些买卖，多一些关爱。</p>
<p>​    不管是领养，还是购买，在领回家之前，一定要考虑清楚。如果你不清楚是否做好准备，可以问自己下面几个问题：​</p>
<ul>
<li>家人是否同意接纳你的新成员？如果遇到了家庭阻力，你是否有能力对抗邪恶势力，保护他？</li>
<li>是否准备好捡屎擦尿？狗狗在没学会定点之前，家里任何一个地方都是🚾；</li>
<li>是否有耐心陪他成长？在他懂事之前，他是个小淘气，会乱叫、咬东西，大型犬还会拆家；</li>
<li>是否可以为了他学习，了解之前未曾涉及的领域？比如狗粮成分、如何训练、疾病知识等；</li>
<li>是否有时间、有精力陪他玩耍，带他出去遛狗？好动是狗的天性，无处发泄的精力只能用在破坏家具上；</li>
<li>是否有经济基础？疫苗、看病、狗粮、零食、玩具、尿片、装备等，都是money；</li>
</ul>
<p>考虑清楚，能满足条件的，可以打个勾。如果还不到一半的，可以放弃了。</p>
<p>​    一旦领回家，就要担负起照顾他一生的责任。</p>
<h1 id="购买渠道"><a href="#购买渠道" class="headerlink" title="购买渠道"></a>购买渠道</h1><p>​    购买的话，无外乎下面几种渠道：</p>
<ol>
<li><p>犬舍。价格通常较高，尤其是知名犬舍，稍微品相好一些的崽，上万是很正常的。这个渠道相对靠谱，而且有些还会带出生纸（注1）。<strong>适合不差钱、新手的同学</strong>。记得以前有一张图，国内12大柴犬犬舍合照，具体有哪些犬舍忘了，可以在当地打听打听。另外也有一些小犬舍，也有不错的狗子，尽量多看一些。我有朋友在柴多酱买的，也不错。犬舍价格至少5k起，上不封顶。</p>
</li>
<li><p>个人家养。一般是家养的狗配出来的，价格不会太高，毕竟不是专门做这个生意。通常在豆瓣、转转、闲鱼上发帖，不过比较少。豆瓣有个柴犬小组，还算靠谱。转转、闲鱼上大多是骗人的（注2），注意不要上当受骗。这个渠道风险较高，<strong>不适合新手</strong>。我是在研究、学习了1个多月之后，才专门找家养，并且现场挑狗买的。这就有点像逛古玩市场，好孬都有，眼力好才能捡漏。价格在3k~5k之间，太便宜的一定不要信！别人都卖3k以上，他卖几百、1k、2k，他傻嘛？</p>
</li>
<li><p><strong>正规</strong>宠物店。家养狗狗生的宝宝，因为没有渠道卖不出去，或者犬舍因为品相不好卖不出去，大多会送到宠物店，宠物店按批发价收。看到这你懂了吧，大多是别人挑剩下的才会在宠物店里。当然也不排除有些店做的比较好，有好的合作伙伴。所以这个渠道良莠不齐，也算考眼力，价格也比较贵。另外就是，有一些专门骗人的宠物店，专门卖病狗。之前在宠物医院碰到一个狗主人，以前在一家宠物店买过两只狗，都不到两个星期就死了。所以去宠物点的话也要注意点。接触比较少，价格也不太清楚，不过有朋友说也是上万起的。</p>
</li>
<li><p>贴吧。百度你懂的，几个大一点的柴犬吧，据说已经被各种狗商垄断，只有他们能发卖狗信息的帖子，一些小犬舍发帖直接被删。在贴吧看看别人家的狗子，学习些知识还是可以的，买狗就算了。不是说没有良心卖家，水太深，<strong>不适合新手</strong>。不过贴吧里还是有一些热心网友，会帮人鉴别真假。</p>
</li>
<li><p>买狗网站。这个了解不多，不过也不推荐。买狗注重实地挑选，最好在当地买。买狗网站上也充斥着大量无良卖家在卖假冒柴犬。</p>
<p>说这么多，还是那句话，做足功课，不贪小便宜，就不怕上当。</p>
</li>
</ol>
<p><u>注1：血统证明，只要父母双方都有血统证书，生的宝宝可以申请出生纸。等到一定年龄可以到机构换血统证书，换证费貌似200。一些犬舍会给狗子贴标签，“双血统带纸”，就是这个意思。自己家养的话，用处不大，一般参赛需要。另外的用处就是长大后配种成功，如果另外一只也有证书，宝宝就可以申请出生纸，出售价格会稍微高一些。另外补一句，这个出生纸也不绝对就是真的，某宝上就可以买</u>。</p>
<p><u>注2：闲鱼、转转上，大多是一些骗子，放一些偷来的照片、视频，吸引你跟他聊天，没几句就说加微信，然后约你看狗。重点来了，等到时间你到指定地方，他一定说有事没时间，让朋友带你去看。而他朋友如果带你去宠物店，一定不要买！不出意外，这些都是星期狗。什么是星期狗？就是病狗，你带回家，1、2天就会生病，不到一个星期就死掉。去找宠物店理论也没用，他们会说给你换狗，你挑完了还让你补差价。举报也没用，人家证件齐全，有关部门也没办法。</u></p>
<h1 id="挑选注意事项"><a href="#挑选注意事项" class="headerlink" title="挑选注意事项"></a>挑选注意事项</h1><p>​    挑选的时候呢，也有一些注意事项：</p>
<ol>
<li>最好在当地买，实地、现场挑选。之前给你发的视频是不是真的狗啊，犬舍环境怎么样啊，狗狗性格怎么样啊，身体有没有隐疾啊，具体长得怎么样啊，等等等等，都要现场看了才知道。而且现场挑选，一般会有一堆狗狗，你可以对比，哪个更合得来，选择也更多一点。如果实在无法现场挑，也一定要跟买家视频，确保狗真的在他那，而不是偷了别人的视频。另外也可以视频跟狗狗互动，进一步挑选。</li>
<li>跟卖家要父母的照片、交配视频等，确保这只狗子真的是柴犬的崽。另一方面，看父母的样子，对于崽以后长什么样心里也有个数，小的基本上还是随父母的。</li>
<li>北京、上海基本上都要4k起，上万很正常。南京等新一线城市也不便宜，二三线可能会便宜点。今年2018年是狗年，很多人养狗打算汪一下，而且柴犬黄色那种叫赤柴，又红又旺，寓意好，价格也就上来了。</li>
<li>买幼犬的话，一般选择2~4个月之间。2个月之前，太小，断奶没多久，不好照顾。4个月之后性格基本养成，调教会麻烦些。不过也不是说一定要在这个区间内，主要还是主人要有耐心照顾他，陪他一起成长。我家花生，在他40多天断奶没多久我就抱回家了。</li>
<li>柴犬小时候跟土狗特别相似，所以有很多“山寨”柴犬，尽量做好功课再去买，以免买到大黄，或者串串。</li>
</ol>
<h1 id="幼犬特征"><a href="#幼犬特征" class="headerlink" title="幼犬特征"></a>幼犬特征</h1><p>​    这里讲的是2个月左右的狗狗特征：</p>
<ol>
<li>头部。小狗的头部以大一点的为佳，后脑勺也要有适度地隆起较好。额头要适度地宽，幼犬时期带点圆弧，长大之后就会好了，但是若太突出就不大好了。小狗的鼻梁在幼犬时会比较深，考虑到这一点时就要注意选择幼犬时要选鼻梁不过深也不过浅者。（挑柴犬小狗，要以头大一点的好，额头要宽，后脑勺隆起的，鼻梁不深不浅的。）</li>
<li>嘴巴。要粗而短，这样长大嘴巴不会太尖，不会像狐型脸。小时候很多黑嘴管，这是正常的，长大就会褪了。</li>
<li>鼻子。鼻子要小而黑，稍微有些湿润，不是太湿，太湿可能生病了。</li>
<li>眼睛。圆眼，眼睛不能过大或者眼球突出，要呈杏仁形，配合头部，眼色要乌黑，两眼的距离不能过开。</li>
<li>耳朵。耳朵要小，耳位不能过低，两耳的距离不能太开。要挑耳朵呈三角形的，在小狗附近拍拍手，看看小狗的听力，耳朵的大小要和柴犬的头相匹配，耳朵要有适当的厚度，保持前倾的。</li>
<li>颈部粗壮，两颊毛发旺盛。</li>
<li>尾巴。大多是蜷缩型。</li>
</ol>
<p>这些特征都是局部最优，满足所有条件的柴犬很少。所以不必太过强求，只是让大家心里有个标准，重要的是狗子健健康康，就够了。</p>
<h1 id="成犬特征"><a href="#成犬特征" class="headerlink" title="成犬特征"></a>成犬特征</h1><p>​    有些朋友买的是成犬，相对来说，比较好区分一点，下面也有一些特征：</p>
<ol>
<li>三角眼。眼睛要稍稍呈三角形，下眼帘要接近直线，上眼皮在离眼头三分之一处开始弧度较大，这种眼型才是正确的眼型。</li>
<li>立耳。折耳一定是假的。</li>
<li>毛发。柴犬有双层毛，外层刚毛直立，内层绒毛细软。</li>
</ol>
]]></content>
      <categories>
        <category>家有小柴</category>
      </categories>
      <tags>
        <tag>柴犬</tag>
      </tags>
  </entry>
  <entry>
    <title>养犬有道の疫苗篇</title>
    <url>/2018/08/26/%E6%9F%B4%E7%8A%AC%E7%96%AB%E8%8B%97%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
    <content><![CDATA[<p><strong>疫苗没有注射完以前，不要带宠物出门、洗澡！</strong></p>
<p><strong>疫苗没有注射完以前，不要带宠物出门、洗澡！</strong></p>
<p><strong>疫苗没有注射完以前，不要带宠物出门、洗澡！</strong></p>
<h1 id="疫苗品牌"><a href="#疫苗品牌" class="headerlink" title="疫苗品牌"></a>疫苗品牌</h1><p>尽量选国外的吧，前段时间长生生物爆出的丑闻，连给人注射的疫苗都不靠谱，还指望宠物疫苗多安全吗？不是崇洋媚外，实在是国内让人不放心。</p>
<p>X联国外品牌主要有：</p>
<ul>
<li><p>荷兰英特威公司，疫苗品牌名叫宠必威；</p>
<p>分2联（幼犬宝）、4联（优免康）、6联（乐必妥）。据说6联国内不让进口，所以市面上很少。</p>
<img data-src="/2018/08/26/%E6%9F%B4%E7%8A%AC%E7%96%AB%E8%8B%97%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/yingtewei.jpg" class="" title="英特威疫苗"></li>
<li><p>美国硕腾公司（辉瑞子公司），疫苗品牌名叫卫佳；</p>
<p>分5联、8联，一般叫卫佳伍、卫佳捌。宠物医院基本都是卫佳捌。</p>
<img data-src="/2018/08/26/%E6%9F%B4%E7%8A%AC%E7%96%AB%E8%8B%97%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/weijia.jpg" class="" title="卫佳疫苗"></li>
<li><p>法国梅里亚公司，疫苗品牌名叫优乐康；</p>
<p>这个比较少，大多是宠必威、卫佳。</p>
<img data-src="/2018/08/26/%E6%9F%B4%E7%8A%AC%E7%96%AB%E8%8B%97%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/meiliya.jpg" class="" title="梅里亚疫苗"></li>
</ul>
<p>狂犬国外品牌主要有：</p>
<ul>
<li><p>荷兰英特威公司，疫苗品牌名叫宠必威*锐必威；</p>
</li>
<li><p>美国硕腾公司（辉瑞子公司），疫苗品牌名叫瑞比克；</p>
</li>
<li><p>法国梅里亚公司，疫苗品牌名叫瑞贝康；</p>
<img data-src="/2018/08/26/%E6%9F%B4%E7%8A%AC%E7%96%AB%E8%8B%97%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/crazydog.jpg" class="" title="狂犬疫苗"></li>
</ul>
<h1 id="疫苗种类"><a href="#疫苗种类" class="headerlink" title="疫苗种类"></a>疫苗种类</h1><p>主要两类，犬瘟、细小等<strong>X联疫苗</strong>，和<strong>狂犬疫苗</strong>。</p>
<p>犬瘟、细小是幼犬最容易得的病，而且不容易治好，上面说的2联就是这两种的联合疫苗。其他的4联、6联、8联，都是以这个为基础增加了其他种类的疫苗。犬瘟、细小疫苗要注射3次，所以组合有多样，可以246，或者666，也可以888。</p>
<p>狂犬疫苗大家都知道，人畜都会得，为了避免传染，也是要注射的。</p>
<h1 id="注射时间"><a href="#注射时间" class="headerlink" title="注射时间"></a>注射时间</h1><p><strong>X联</strong>：一般6周左右注射第一针，每隔3~4周再注射。不过有些犬舍为了让客户尽早拿到狗狗，会提前注射，大概是4周左右就会注射第一针。英特威的2联在第4周的时候就可以注射了。之后每年一针加强。</p>
<p><strong>狂犬</strong>：理论上来讲，注射最后一针X联时，过一会就可以注射狂犬了。但是狂犬会对幼犬脑部发育有影响，所以尽量等幼犬4月以上，再注射。之后每年一针。需要注意的是，狂犬只能在防疫站，或者防疫站指定的宠物医院注射。像北京、上海需要办理“狗狗户口”，必须有狂犬注射证明才能不办理。之后每年一针加强。</p>
<p>接种时要注意狗狗身体状况，一定要身体健康才能接种。接种后也要注意，不要换粮、换环境等，以免接种失败。</p>
<h1 id="注射地点"><a href="#注射地点" class="headerlink" title="注射地点"></a>注射地点</h1><ol>
<li><p>防疫站</p>
<p>这个网上一查都知道。</p>
</li>
<li><p>宠物医院</p>
<p>百度地图、大众点评搜索就有。</p>
</li>
</ol>
<h1 id="注射之后"><a href="#注射之后" class="headerlink" title="注射之后"></a>注射之后</h1><p>3天内不要换粮、换环境、带出去溜等，狗狗情绪波动太会导致免疫失败。</p>
<p>最后一针注射1周之后，可以带出去溜了。</p>
<p>最后一针注射3周之后，可以带到医院里检查抗体。</p>
<h1 id="one-more-thing"><a href="#one-more-thing" class="headerlink" title="one more thing"></a>one more thing</h1><p>一般来讲，X联三针最好使用同一个品牌。如果遇到一些突发状况，需要注射其他品牌的疫苗，虽然不建议，但是也可以。我们家就是前两针英特威2联、4联，由于英特威6联国内很少，没找到，只好注射了卫佳8，现在也活蹦乱跳。不过每个狗狗体质都不一样，尽量不要随便更换。</p>
]]></content>
      <categories>
        <category>养犬有道</category>
      </categories>
      <tags>
        <tag>狗狗</tag>
      </tags>
  </entry>
  <entry>
    <title>com.sun.image.codec.jpeg不存在</title>
    <url>/2017/09/18/%E9%94%99%E8%AF%AF-%E7%A8%8B%E5%BA%8F%E5%8C%85com-sun-image-codec-jpeg%E4%B8%8D%E5%AD%98%E5%9C%A8/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>​    最近项目中有个应用，需要将上传图片压缩为缩略图，用到了JPEGCodec等类。开发过程中一切正常，程序也能运行。当使用maven发布时，程序报错了：</p>
<img data-src="/2017/09/18/%E9%94%99%E8%AF%AF-%E7%A8%8B%E5%BA%8F%E5%8C%85com-sun-image-codec-jpeg%E4%B8%8D%E5%AD%98%E5%9C%A8/jpeg_error.png" class="" title="错误信息">

<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>​    度娘了一下，maven的插件maven-compiler-plugin在编译的时候，没有加载/jre/lib内的包。而我们用到的JPEGCodec等类，恰好在/jre/lib/rt.jar包内。为了解决该问题，我们可以使用bootclasspath标签。该标签会将你指定路径下的包，通知到maven进行加载。</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 设置指定包的路径 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">compilerArguments</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">verbose</span> /&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="comment">&lt;!-- 有两点需要注意 --&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;<span class="name">bootclasspath</span>&gt;</span>$</span><span class="template-variable">&#123;env.JAVA_HOME&#125;</span><span class="xml">/jre/lib/rt.jar:$</span><span class="template-variable">&#123;env.JAVA_HOME&#125;</span><span class="xml">/jre/lib/jce.jarr<span class="tag">&lt;/<span class="name">bootclasspath</span>&gt;</span></span></span><br><span class="line"><span class="xml">		<span class="tag">&lt;/<span class="name">compilerArguments</span>&gt;</span></span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>Attention:</p>
<ol>
<li><p>${JAVA_HOME}设置为全局变量。我用的是Mac+IDEA，刚开始改过之后，IDEA的编辑器显示一直为红色。因为过度相信工具，所以一直以为全局变量设置的有问题，走了弯路。所以只要echo正常，就不要怀疑。</p>
<img data-src="/2017/09/18/%E9%94%99%E8%AF%AF-%E7%A8%8B%E5%BA%8F%E5%8C%85com-sun-image-codec-jpeg%E4%B8%8D%E5%AD%98%E5%9C%A8/JAVA_HOME_ERROR.png" class="" title="IDEA下JAVA_HOME显示为红色"></li>
<li><p>当bootclasspath标签内，有多个变量时，Mac/Linux系统以 ：分隔，Windows系统以 ; 分隔。否则也会有异常。​</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云ECS升级HTTPS</title>
    <url>/2018/02/06/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E5%8D%87%E7%BA%A7HTTPS/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    最近系统准备开发小程序，增加流量入口，而小程序的后端接口需要支持https协议，顺便给网站安全升下级。</p>
<h2 id="制作证书"><a href="#制作证书" class="headerlink" title="制作证书"></a>制作证书</h2><p>​    阿里云上有证书服务，填写完整信息可以在线制作，省时省力。登录阿里云后，点开安全（云盾）- CA证书服务，点击右上角购买证书，填写信息，域名验证类型选择DNS，因为域名也是在阿里买的，所以勾上自动完成域名授权验证，完成。很快，10min左右就审核通过了。</p>
<h2 id="配置安全组"><a href="#配置安全组" class="headerlink" title="配置安全组"></a>配置安全组</h2><p>​    在ECS中点击管理实例，添加安全组规则，公网入方向中加入443/443，地址段为0.0.0.0/0。</p>
<h2 id="防火墙打开443端口"><a href="#防火墙打开443端口" class="headerlink" title="防火墙打开443端口"></a>防火墙打开443端口</h2><p>​    打开防火墙端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑</span></span><br><span class="line">vim /etc/sysconfig/iptables</span><br><span class="line"><span class="comment"># 添加记录</span></span><br><span class="line">-A INPUT -p tcp -m tcp --dport 443 -j ACCEPT </span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure>

<h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p>​    将证书下载，在服务器上nginx目录下建立/cert，将证书解压，scp到/cert目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在conf.d下建立单独conf文件</span></span><br><span class="line">vim ssl.yuming.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加如下配置</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen       443;</span><br><span class="line">  server_name  域名;</span><br><span class="line">  ssl          on;</span><br><span class="line">  root html;</span><br><span class="line">  index index.html; </span><br><span class="line"></span><br><span class="line">  ssl_certificate   /etc/nginx/cert/XXXXXXXXXX.pem;</span><br><span class="line">  ssl_certificate_key  /etc/nginx/cert/XXXXXXXXXXX.key;</span><br><span class="line">  ssl_session_timeout 5m;</span><br><span class="line">  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">  ssl_ciphers AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span><br><span class="line">  ssl_prefer_server_ciphers on;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">#需要加上，一开始没加，访问一直404，找了半天原因</span></span><br><span class="line">  location / &#123;</span><br><span class="line">		proxy_pass	http://localhost:8080;</span><br><span class="line">		proxy_set_header Host	<span class="variable">$host</span>;</span><br><span class="line">		proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">		proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">		proxy_set_header X-Forwarded-Proto  <span class="variable">$scheme</span>; 		<span class="comment">#与下方tomcat配置对应，解决request.getScheme()问题。不需要可以不用配</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启nginx</span></span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></figure>

<h2 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat配置</h2><p>​    做完上面的配置之后，可以通过https协议访问网站，不过代码中使用request.getScheme()取到的协议仍是http，不是https，有报错，还需在server.xml中的Engine模块中添加，需重启。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Valve className=<span class="string">&quot;org.apache.catalina.valves.RemoteIpValve&quot;</span>  </span><br><span class="line">remoteIpHeader=<span class="string">&quot;X-Forwarded-For&quot;</span>  </span><br><span class="line">protocolHeader=<span class="string">&quot;X-Forwarded-Proto&quot;</span>  </span><br><span class="line">protocolHeaderHttpsValue=<span class="string">&quot;https&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<h2 id="one-more-thing"><a href="#one-more-thing" class="headerlink" title="one more thing"></a>one more thing</h2><p>​    如果需要将所有请求强制使用https协议，在监听80端口处增加如下配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rewrite ^(.*)$ https://<span class="variable">$&#123;server_name&#125;</span><span class="variable">$1</span> permanent;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>SSL</tag>
      </tags>
  </entry>
</search>
